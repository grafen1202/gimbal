
gimbalver1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cad0  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d8  0800ccb0  0800ccb0  0000dcb0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d188  0800d188  0000f1e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800d188  0800d188  0000e188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d190  0800d190  0000f1e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d190  0800d190  0000e190  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d194  0800d194  0000e194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e4  20000000  0800d198  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004d0  200001e4  0800d37c  0000f1e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006b4  0800d37c  0000f6b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f1e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017cf3  00000000  00000000  0000f214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ead  00000000  00000000  00026f07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001510  00000000  00000000  00029db8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000108a  00000000  00000000  0002b2c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002037f  00000000  00000000  0002c352  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001956a  00000000  00000000  0004c6d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cc90d  00000000  00000000  00065c3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000086  00000000  00000000  00132548  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006ff0  00000000  00000000  001325d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  001395c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001e4 	.word	0x200001e4
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800cc98 	.word	0x0800cc98

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001e8 	.word	0x200001e8
 800021c:	0800cc98 	.word	0x0800cc98

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9a0 	b.w	8001030 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	460c      	mov	r4, r1
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d14e      	bne.n	8000e1e <__udivmoddi4+0xaa>
 8000d80:	4694      	mov	ip, r2
 8000d82:	458c      	cmp	ip, r1
 8000d84:	4686      	mov	lr, r0
 8000d86:	fab2 f282 	clz	r2, r2
 8000d8a:	d962      	bls.n	8000e52 <__udivmoddi4+0xde>
 8000d8c:	b14a      	cbz	r2, 8000da2 <__udivmoddi4+0x2e>
 8000d8e:	f1c2 0320 	rsb	r3, r2, #32
 8000d92:	4091      	lsls	r1, r2
 8000d94:	fa20 f303 	lsr.w	r3, r0, r3
 8000d98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9c:	4319      	orrs	r1, r3
 8000d9e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da6:	fa1f f68c 	uxth.w	r6, ip
 8000daa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb07 1114 	mls	r1, r7, r4, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb04 f106 	mul.w	r1, r4, r6
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x64>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dca:	f080 8112 	bcs.w	8000ff2 <__udivmoddi4+0x27e>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 810f 	bls.w	8000ff2 <__udivmoddi4+0x27e>
 8000dd4:	3c02      	subs	r4, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a59      	subs	r1, r3, r1
 8000dda:	fa1f f38e 	uxth.w	r3, lr
 8000dde:	fbb1 f0f7 	udiv	r0, r1, r7
 8000de2:	fb07 1110 	mls	r1, r7, r0, r1
 8000de6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dea:	fb00 f606 	mul.w	r6, r0, r6
 8000dee:	429e      	cmp	r6, r3
 8000df0:	d90a      	bls.n	8000e08 <__udivmoddi4+0x94>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dfa:	f080 80fc 	bcs.w	8000ff6 <__udivmoddi4+0x282>
 8000dfe:	429e      	cmp	r6, r3
 8000e00:	f240 80f9 	bls.w	8000ff6 <__udivmoddi4+0x282>
 8000e04:	4463      	add	r3, ip
 8000e06:	3802      	subs	r0, #2
 8000e08:	1b9b      	subs	r3, r3, r6
 8000e0a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e0e:	2100      	movs	r1, #0
 8000e10:	b11d      	cbz	r5, 8000e1a <__udivmoddi4+0xa6>
 8000e12:	40d3      	lsrs	r3, r2
 8000e14:	2200      	movs	r2, #0
 8000e16:	e9c5 3200 	strd	r3, r2, [r5]
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d905      	bls.n	8000e2e <__udivmoddi4+0xba>
 8000e22:	b10d      	cbz	r5, 8000e28 <__udivmoddi4+0xb4>
 8000e24:	e9c5 0100 	strd	r0, r1, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e7f5      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e2e:	fab3 f183 	clz	r1, r3
 8000e32:	2900      	cmp	r1, #0
 8000e34:	d146      	bne.n	8000ec4 <__udivmoddi4+0x150>
 8000e36:	42a3      	cmp	r3, r4
 8000e38:	d302      	bcc.n	8000e40 <__udivmoddi4+0xcc>
 8000e3a:	4290      	cmp	r0, r2
 8000e3c:	f0c0 80f0 	bcc.w	8001020 <__udivmoddi4+0x2ac>
 8000e40:	1a86      	subs	r6, r0, r2
 8000e42:	eb64 0303 	sbc.w	r3, r4, r3
 8000e46:	2001      	movs	r0, #1
 8000e48:	2d00      	cmp	r5, #0
 8000e4a:	d0e6      	beq.n	8000e1a <__udivmoddi4+0xa6>
 8000e4c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e50:	e7e3      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e52:	2a00      	cmp	r2, #0
 8000e54:	f040 8090 	bne.w	8000f78 <__udivmoddi4+0x204>
 8000e58:	eba1 040c 	sub.w	r4, r1, ip
 8000e5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e60:	fa1f f78c 	uxth.w	r7, ip
 8000e64:	2101      	movs	r1, #1
 8000e66:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e6a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e6e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e76:	fb07 f006 	mul.w	r0, r7, r6
 8000e7a:	4298      	cmp	r0, r3
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x11c>
 8000e7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e82:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x11a>
 8000e88:	4298      	cmp	r0, r3
 8000e8a:	f200 80cd 	bhi.w	8001028 <__udivmoddi4+0x2b4>
 8000e8e:	4626      	mov	r6, r4
 8000e90:	1a1c      	subs	r4, r3, r0
 8000e92:	fa1f f38e 	uxth.w	r3, lr
 8000e96:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e9a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ea2:	fb00 f707 	mul.w	r7, r0, r7
 8000ea6:	429f      	cmp	r7, r3
 8000ea8:	d908      	bls.n	8000ebc <__udivmoddi4+0x148>
 8000eaa:	eb1c 0303 	adds.w	r3, ip, r3
 8000eae:	f100 34ff 	add.w	r4, r0, #4294967295
 8000eb2:	d202      	bcs.n	8000eba <__udivmoddi4+0x146>
 8000eb4:	429f      	cmp	r7, r3
 8000eb6:	f200 80b0 	bhi.w	800101a <__udivmoddi4+0x2a6>
 8000eba:	4620      	mov	r0, r4
 8000ebc:	1bdb      	subs	r3, r3, r7
 8000ebe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ec2:	e7a5      	b.n	8000e10 <__udivmoddi4+0x9c>
 8000ec4:	f1c1 0620 	rsb	r6, r1, #32
 8000ec8:	408b      	lsls	r3, r1
 8000eca:	fa22 f706 	lsr.w	r7, r2, r6
 8000ece:	431f      	orrs	r7, r3
 8000ed0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ed4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ed8:	ea43 030c 	orr.w	r3, r3, ip
 8000edc:	40f4      	lsrs	r4, r6
 8000ede:	fa00 f801 	lsl.w	r8, r0, r1
 8000ee2:	0c38      	lsrs	r0, r7, #16
 8000ee4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ee8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eec:	fa1f fc87 	uxth.w	ip, r7
 8000ef0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ef4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ef8:	fb0e f90c 	mul.w	r9, lr, ip
 8000efc:	45a1      	cmp	r9, r4
 8000efe:	fa02 f201 	lsl.w	r2, r2, r1
 8000f02:	d90a      	bls.n	8000f1a <__udivmoddi4+0x1a6>
 8000f04:	193c      	adds	r4, r7, r4
 8000f06:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f0a:	f080 8084 	bcs.w	8001016 <__udivmoddi4+0x2a2>
 8000f0e:	45a1      	cmp	r9, r4
 8000f10:	f240 8081 	bls.w	8001016 <__udivmoddi4+0x2a2>
 8000f14:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f18:	443c      	add	r4, r7
 8000f1a:	eba4 0409 	sub.w	r4, r4, r9
 8000f1e:	fa1f f983 	uxth.w	r9, r3
 8000f22:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f26:	fb00 4413 	mls	r4, r0, r3, r4
 8000f2a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f2e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f32:	45a4      	cmp	ip, r4
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x1d2>
 8000f36:	193c      	adds	r4, r7, r4
 8000f38:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f3c:	d267      	bcs.n	800100e <__udivmoddi4+0x29a>
 8000f3e:	45a4      	cmp	ip, r4
 8000f40:	d965      	bls.n	800100e <__udivmoddi4+0x29a>
 8000f42:	3b02      	subs	r3, #2
 8000f44:	443c      	add	r4, r7
 8000f46:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f4a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f4e:	eba4 040c 	sub.w	r4, r4, ip
 8000f52:	429c      	cmp	r4, r3
 8000f54:	46ce      	mov	lr, r9
 8000f56:	469c      	mov	ip, r3
 8000f58:	d351      	bcc.n	8000ffe <__udivmoddi4+0x28a>
 8000f5a:	d04e      	beq.n	8000ffa <__udivmoddi4+0x286>
 8000f5c:	b155      	cbz	r5, 8000f74 <__udivmoddi4+0x200>
 8000f5e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f62:	eb64 040c 	sbc.w	r4, r4, ip
 8000f66:	fa04 f606 	lsl.w	r6, r4, r6
 8000f6a:	40cb      	lsrs	r3, r1
 8000f6c:	431e      	orrs	r6, r3
 8000f6e:	40cc      	lsrs	r4, r1
 8000f70:	e9c5 6400 	strd	r6, r4, [r5]
 8000f74:	2100      	movs	r1, #0
 8000f76:	e750      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000f78:	f1c2 0320 	rsb	r3, r2, #32
 8000f7c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f84:	fa24 f303 	lsr.w	r3, r4, r3
 8000f88:	4094      	lsls	r4, r2
 8000f8a:	430c      	orrs	r4, r1
 8000f8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f90:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f94:	fa1f f78c 	uxth.w	r7, ip
 8000f98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f9c:	fb08 3110 	mls	r1, r8, r0, r3
 8000fa0:	0c23      	lsrs	r3, r4, #16
 8000fa2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fa6:	fb00 f107 	mul.w	r1, r0, r7
 8000faa:	4299      	cmp	r1, r3
 8000fac:	d908      	bls.n	8000fc0 <__udivmoddi4+0x24c>
 8000fae:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fb6:	d22c      	bcs.n	8001012 <__udivmoddi4+0x29e>
 8000fb8:	4299      	cmp	r1, r3
 8000fba:	d92a      	bls.n	8001012 <__udivmoddi4+0x29e>
 8000fbc:	3802      	subs	r0, #2
 8000fbe:	4463      	add	r3, ip
 8000fc0:	1a5b      	subs	r3, r3, r1
 8000fc2:	b2a4      	uxth	r4, r4
 8000fc4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fc8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fcc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fd0:	fb01 f307 	mul.w	r3, r1, r7
 8000fd4:	42a3      	cmp	r3, r4
 8000fd6:	d908      	bls.n	8000fea <__udivmoddi4+0x276>
 8000fd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fdc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fe0:	d213      	bcs.n	800100a <__udivmoddi4+0x296>
 8000fe2:	42a3      	cmp	r3, r4
 8000fe4:	d911      	bls.n	800100a <__udivmoddi4+0x296>
 8000fe6:	3902      	subs	r1, #2
 8000fe8:	4464      	add	r4, ip
 8000fea:	1ae4      	subs	r4, r4, r3
 8000fec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ff0:	e739      	b.n	8000e66 <__udivmoddi4+0xf2>
 8000ff2:	4604      	mov	r4, r0
 8000ff4:	e6f0      	b.n	8000dd8 <__udivmoddi4+0x64>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e706      	b.n	8000e08 <__udivmoddi4+0x94>
 8000ffa:	45c8      	cmp	r8, r9
 8000ffc:	d2ae      	bcs.n	8000f5c <__udivmoddi4+0x1e8>
 8000ffe:	ebb9 0e02 	subs.w	lr, r9, r2
 8001002:	eb63 0c07 	sbc.w	ip, r3, r7
 8001006:	3801      	subs	r0, #1
 8001008:	e7a8      	b.n	8000f5c <__udivmoddi4+0x1e8>
 800100a:	4631      	mov	r1, r6
 800100c:	e7ed      	b.n	8000fea <__udivmoddi4+0x276>
 800100e:	4603      	mov	r3, r0
 8001010:	e799      	b.n	8000f46 <__udivmoddi4+0x1d2>
 8001012:	4630      	mov	r0, r6
 8001014:	e7d4      	b.n	8000fc0 <__udivmoddi4+0x24c>
 8001016:	46d6      	mov	lr, sl
 8001018:	e77f      	b.n	8000f1a <__udivmoddi4+0x1a6>
 800101a:	4463      	add	r3, ip
 800101c:	3802      	subs	r0, #2
 800101e:	e74d      	b.n	8000ebc <__udivmoddi4+0x148>
 8001020:	4606      	mov	r6, r0
 8001022:	4623      	mov	r3, r4
 8001024:	4608      	mov	r0, r1
 8001026:	e70f      	b.n	8000e48 <__udivmoddi4+0xd4>
 8001028:	3e02      	subs	r6, #2
 800102a:	4463      	add	r3, ip
 800102c:	e730      	b.n	8000e90 <__udivmoddi4+0x11c>
 800102e:	bf00      	nop

08001030 <__aeabi_idiv0>:
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <I2cInitialize>:
//
static bool initialized = false;



static void I2cInitialize(){
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
	if(!initialized){
 8001038:	4b07      	ldr	r3, [pc, #28]	@ (8001058 <I2cInitialize+0x24>)
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	f083 0301 	eor.w	r3, r3, #1
 8001040:	b2db      	uxtb	r3, r3
 8001042:	2b00      	cmp	r3, #0
 8001044:	d002      	beq.n	800104c <I2cInitialize+0x18>
		initialized = true;
 8001046:	4b04      	ldr	r3, [pc, #16]	@ (8001058 <I2cInitialize+0x24>)
 8001048:	2201      	movs	r2, #1
 800104a:	701a      	strb	r2, [r3, #0]
	}
}
 800104c:	bf00      	nop
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	20000201 	.word	0x20000201

0800105c <I2cWriteByte>:

static void I2cWriteByte(uint8_t add, uint8_t reg, uint8_t data)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b086      	sub	sp, #24
 8001060:	af04      	add	r7, sp, #16
 8001062:	4603      	mov	r3, r0
 8001064:	71fb      	strb	r3, [r7, #7]
 8001066:	460b      	mov	r3, r1
 8001068:	71bb      	strb	r3, [r7, #6]
 800106a:	4613      	mov	r3, r2
 800106c:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write(&hi2c1, add << 1, reg, 1, &data, 1, 100);
 800106e:	79fb      	ldrb	r3, [r7, #7]
 8001070:	b29b      	uxth	r3, r3
 8001072:	005b      	lsls	r3, r3, #1
 8001074:	b299      	uxth	r1, r3
 8001076:	79bb      	ldrb	r3, [r7, #6]
 8001078:	b29a      	uxth	r2, r3
 800107a:	2364      	movs	r3, #100	@ 0x64
 800107c:	9302      	str	r3, [sp, #8]
 800107e:	2301      	movs	r3, #1
 8001080:	9301      	str	r3, [sp, #4]
 8001082:	1d7b      	adds	r3, r7, #5
 8001084:	9300      	str	r3, [sp, #0]
 8001086:	2301      	movs	r3, #1
 8001088:	4803      	ldr	r0, [pc, #12]	@ (8001098 <I2cWriteByte+0x3c>)
 800108a:	f001 fe87 	bl	8002d9c <HAL_I2C_Mem_Write>
}
 800108e:	bf00      	nop
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	20000204 	.word	0x20000204

0800109c <I2cReadByte>:

static uint8_t I2cReadByte(uint8_t add, uint8_t reg)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b088      	sub	sp, #32
 80010a0:	af04      	add	r7, sp, #16
 80010a2:	4603      	mov	r3, r0
 80010a4:	460a      	mov	r2, r1
 80010a6:	71fb      	strb	r3, [r7, #7]
 80010a8:	4613      	mov	r3, r2
 80010aa:	71bb      	strb	r3, [r7, #6]
	uint8_t data;
	HAL_I2C_Mem_Read(&hi2c1, add << 1, reg, 1, &data, 1, 100);
 80010ac:	79fb      	ldrb	r3, [r7, #7]
 80010ae:	b29b      	uxth	r3, r3
 80010b0:	005b      	lsls	r3, r3, #1
 80010b2:	b299      	uxth	r1, r3
 80010b4:	79bb      	ldrb	r3, [r7, #6]
 80010b6:	b29a      	uxth	r2, r3
 80010b8:	2364      	movs	r3, #100	@ 0x64
 80010ba:	9302      	str	r3, [sp, #8]
 80010bc:	2301      	movs	r3, #1
 80010be:	9301      	str	r3, [sp, #4]
 80010c0:	f107 030f 	add.w	r3, r7, #15
 80010c4:	9300      	str	r3, [sp, #0]
 80010c6:	2301      	movs	r3, #1
 80010c8:	4803      	ldr	r0, [pc, #12]	@ (80010d8 <I2cReadByte+0x3c>)
 80010ca:	f001 ff7b 	bl	8002fc4 <HAL_I2C_Mem_Read>
	return data;
 80010ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	3710      	adds	r7, #16
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	20000204 	.word	0x20000204

080010dc <I2cReadBytes>:

static void I2cReadBytes(uint8_t add, uint8_t reg, uint8_t *data, uint8_t count)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b086      	sub	sp, #24
 80010e0:	af04      	add	r7, sp, #16
 80010e2:	603a      	str	r2, [r7, #0]
 80010e4:	461a      	mov	r2, r3
 80010e6:	4603      	mov	r3, r0
 80010e8:	71fb      	strb	r3, [r7, #7]
 80010ea:	460b      	mov	r3, r1
 80010ec:	71bb      	strb	r3, [r7, #6]
 80010ee:	4613      	mov	r3, r2
 80010f0:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Read(&hi2c1, add << 1, reg, 1, data, count, 100);
 80010f2:	79fb      	ldrb	r3, [r7, #7]
 80010f4:	b29b      	uxth	r3, r3
 80010f6:	005b      	lsls	r3, r3, #1
 80010f8:	b299      	uxth	r1, r3
 80010fa:	79bb      	ldrb	r3, [r7, #6]
 80010fc:	b29a      	uxth	r2, r3
 80010fe:	797b      	ldrb	r3, [r7, #5]
 8001100:	b29b      	uxth	r3, r3
 8001102:	2064      	movs	r0, #100	@ 0x64
 8001104:	9002      	str	r0, [sp, #8]
 8001106:	9301      	str	r3, [sp, #4]
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	9300      	str	r3, [sp, #0]
 800110c:	2301      	movs	r3, #1
 800110e:	4803      	ldr	r0, [pc, #12]	@ (800111c <I2cReadBytes+0x40>)
 8001110:	f001 ff58 	bl	8002fc4 <HAL_I2C_Mem_Read>
}
 8001114:	bf00      	nop
 8001116:	3708      	adds	r7, #8
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	20000204 	.word	0x20000204

08001120 <DelayMs>:

static void DelayMs(uint32_t t){
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
}
 8001128:	bf00      	nop
 800112a:	370c      	adds	r7, #12
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr

08001134 <BNO055_Initialize_Fusion>:

//------------------- Write Yourself To Here-------------

bool BNO055_Initialize_Fusion(){
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
	I2cInitialize();
 800113a:	f7ff ff7b 	bl	8001034 <I2cInitialize>

	BNO055_ADRESS = BNO055_ADRESS_0;
 800113e:	4b37      	ldr	r3, [pc, #220]	@ (800121c <BNO055_Initialize_Fusion+0xe8>)
 8001140:	2228      	movs	r2, #40	@ 0x28
 8001142:	701a      	strb	r2, [r3, #0]

	uint8_t id = 0;
 8001144:	2300      	movs	r3, #0
 8001146:	71fb      	strb	r3, [r7, #7]
	id = I2cReadByte(BNO055_ADRESS,BNO055_CHIP_ID);
 8001148:	4b34      	ldr	r3, [pc, #208]	@ (800121c <BNO055_Initialize_Fusion+0xe8>)
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	2100      	movs	r1, #0
 800114e:	4618      	mov	r0, r3
 8001150:	f7ff ffa4 	bl	800109c <I2cReadByte>
 8001154:	4603      	mov	r3, r0
 8001156:	71fb      	strb	r3, [r7, #7]
	printf("%d\r\n",id);
 8001158:	79fb      	ldrb	r3, [r7, #7]
 800115a:	4619      	mov	r1, r3
 800115c:	4830      	ldr	r0, [pc, #192]	@ (8001220 <BNO055_Initialize_Fusion+0xec>)
 800115e:	f008 fe3b 	bl	8009dd8 <iprintf>
	id = I2cReadByte(BNO055_ADRESS,BNO055_CHIP_ID);
 8001162:	4b2e      	ldr	r3, [pc, #184]	@ (800121c <BNO055_Initialize_Fusion+0xe8>)
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	2100      	movs	r1, #0
 8001168:	4618      	mov	r0, r3
 800116a:	f7ff ff97 	bl	800109c <I2cReadByte>
 800116e:	4603      	mov	r3, r0
 8001170:	71fb      	strb	r3, [r7, #7]
	printf("%d\r\n",id);
 8001172:	79fb      	ldrb	r3, [r7, #7]
 8001174:	4619      	mov	r1, r3
 8001176:	482a      	ldr	r0, [pc, #168]	@ (8001220 <BNO055_Initialize_Fusion+0xec>)
 8001178:	f008 fe2e 	bl	8009dd8 <iprintf>
	id = I2cReadByte(BNO055_ADRESS,BNO055_CHIP_ID);
 800117c:	4b27      	ldr	r3, [pc, #156]	@ (800121c <BNO055_Initialize_Fusion+0xe8>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	2100      	movs	r1, #0
 8001182:	4618      	mov	r0, r3
 8001184:	f7ff ff8a 	bl	800109c <I2cReadByte>
 8001188:	4603      	mov	r3, r0
 800118a:	71fb      	strb	r3, [r7, #7]
	printf("%d\r\n",id);
 800118c:	79fb      	ldrb	r3, [r7, #7]
 800118e:	4619      	mov	r1, r3
 8001190:	4823      	ldr	r0, [pc, #140]	@ (8001220 <BNO055_Initialize_Fusion+0xec>)
 8001192:	f008 fe21 	bl	8009dd8 <iprintf>
//			printf("%x\r\n",id);
//			printf("false");
//			return false;
//		}
//	}
	if(I2cReadByte(BNO055_ADRESS,BNO055_CHIP_ID) != BNO055_CHIP_ID_DEFAULT){
 8001196:	4b21      	ldr	r3, [pc, #132]	@ (800121c <BNO055_Initialize_Fusion+0xe8>)
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	2100      	movs	r1, #0
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff ff7d 	bl	800109c <I2cReadByte>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2ba0      	cmp	r3, #160	@ 0xa0
 80011a6:	d01d      	beq.n	80011e4 <BNO055_Initialize_Fusion+0xb0>
		BNO055_ADRESS = BNO055_ADRESS_1;
 80011a8:	4b1c      	ldr	r3, [pc, #112]	@ (800121c <BNO055_Initialize_Fusion+0xe8>)
 80011aa:	2229      	movs	r2, #41	@ 0x29
 80011ac:	701a      	strb	r2, [r3, #0]
		if(I2cReadByte(BNO055_ADRESS,BNO055_CHIP_ID) != BNO055_CHIP_ID_DEFAULT){
 80011ae:	4b1b      	ldr	r3, [pc, #108]	@ (800121c <BNO055_Initialize_Fusion+0xe8>)
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	2100      	movs	r1, #0
 80011b4:	4618      	mov	r0, r3
 80011b6:	f7ff ff71 	bl	800109c <I2cReadByte>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2ba0      	cmp	r3, #160	@ 0xa0
 80011be:	d011      	beq.n	80011e4 <BNO055_Initialize_Fusion+0xb0>
			id = I2cReadByte(BNO055_ADRESS,BNO055_CHIP_ID);
 80011c0:	4b16      	ldr	r3, [pc, #88]	@ (800121c <BNO055_Initialize_Fusion+0xe8>)
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	2100      	movs	r1, #0
 80011c6:	4618      	mov	r0, r3
 80011c8:	f7ff ff68 	bl	800109c <I2cReadByte>
 80011cc:	4603      	mov	r3, r0
 80011ce:	71fb      	strb	r3, [r7, #7]
			printf("%x\r\n",id);
 80011d0:	79fb      	ldrb	r3, [r7, #7]
 80011d2:	4619      	mov	r1, r3
 80011d4:	4813      	ldr	r0, [pc, #76]	@ (8001224 <BNO055_Initialize_Fusion+0xf0>)
 80011d6:	f008 fdff 	bl	8009dd8 <iprintf>
			printf("false");
 80011da:	4813      	ldr	r0, [pc, #76]	@ (8001228 <BNO055_Initialize_Fusion+0xf4>)
 80011dc:	f008 fdfc 	bl	8009dd8 <iprintf>
			return false;
 80011e0:	2300      	movs	r3, #0
 80011e2:	e016      	b.n	8001212 <BNO055_Initialize_Fusion+0xde>
		}
	}


	I2cWriteByte(BNO055_ADRESS,BNO055_PWR_MODE,0);
 80011e4:	4b0d      	ldr	r3, [pc, #52]	@ (800121c <BNO055_Initialize_Fusion+0xe8>)
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	2200      	movs	r2, #0
 80011ea:	213e      	movs	r1, #62	@ 0x3e
 80011ec:	4618      	mov	r0, r3
 80011ee:	f7ff ff35 	bl	800105c <I2cWriteByte>
	BNO055_SetUnit();
 80011f2:	f000 f81d 	bl	8001230 <BNO055_SetUnit>
	I2cWriteByte(BNO055_ADRESS,BNO055_OPR_MODE,BNO055_OPR_MODE_NDOF);
 80011f6:	4b09      	ldr	r3, [pc, #36]	@ (800121c <BNO055_Initialize_Fusion+0xe8>)
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	220c      	movs	r2, #12
 80011fc:	213d      	movs	r1, #61	@ 0x3d
 80011fe:	4618      	mov	r0, r3
 8001200:	f7ff ff2c 	bl	800105c <I2cWriteByte>
	DelayMs(20);
 8001204:	2014      	movs	r0, #20
 8001206:	f7ff ff8b 	bl	8001120 <DelayMs>
	printf("Initialize");
 800120a:	4808      	ldr	r0, [pc, #32]	@ (800122c <BNO055_Initialize_Fusion+0xf8>)
 800120c:	f008 fde4 	bl	8009dd8 <iprintf>
	return true;
 8001210:	2301      	movs	r3, #1
}
 8001212:	4618      	mov	r0, r3
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	20000200 	.word	0x20000200
 8001220:	0800ccb0 	.word	0x0800ccb0
 8001224:	0800ccb8 	.word	0x0800ccb8
 8001228:	0800ccc0 	.word	0x0800ccc0
 800122c:	0800ccc8 	.word	0x0800ccc8

08001230 <BNO055_SetUnit>:
	I2cWriteByte(BNO055_ADRESS,BNO055_OPR_MODE,BNO055_OPR_MODE_AMG);
	DelayMs(20);
	return true;
}

void BNO055_SetUnit(){
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
	uint8_t unit =  BNO055_UNIT_SEL_ACC | BNO055_UNIT_SEL_GYR | BNO055_UNIT_SEL_ANGL | BNO055_UNIT_SEL_Tmp | BNO055_UNIT_SEL_Fus;
 8001236:	2300      	movs	r3, #0
 8001238:	71fb      	strb	r3, [r7, #7]
	I2cWriteByte(BNO055_ADRESS,BNO055_UNIT_SEL,unit);
 800123a:	4b05      	ldr	r3, [pc, #20]	@ (8001250 <BNO055_SetUnit+0x20>)
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	79fa      	ldrb	r2, [r7, #7]
 8001240:	213b      	movs	r1, #59	@ 0x3b
 8001242:	4618      	mov	r0, r3
 8001244:	f7ff ff0a 	bl	800105c <I2cWriteByte>
}
 8001248:	bf00      	nop
 800124a:	3708      	adds	r7, #8
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	20000200 	.word	0x20000200

08001254 <BNO055_ReadGyr>:
	*x = (float)_x / 16;
	*y = (float)_y / 16;
	*z = (float)_z / 16;
}

void BNO055_ReadGyr(float* x,float* y,float* z){
 8001254:	b580      	push	{r7, lr}
 8001256:	b088      	sub	sp, #32
 8001258:	af00      	add	r7, sp, #0
 800125a:	60f8      	str	r0, [r7, #12]
 800125c:	60b9      	str	r1, [r7, #8]
 800125e:	607a      	str	r2, [r7, #4]
	uint8_t data[6]={};
 8001260:	2300      	movs	r3, #0
 8001262:	617b      	str	r3, [r7, #20]
 8001264:	2300      	movs	r3, #0
 8001266:	833b      	strh	r3, [r7, #24]

	I2cReadBytes(BNO055_ADRESS,BNO055_GYR_DATA_X_LSB,data,6);
 8001268:	4b23      	ldr	r3, [pc, #140]	@ (80012f8 <BNO055_ReadGyr+0xa4>)
 800126a:	7818      	ldrb	r0, [r3, #0]
 800126c:	f107 0214 	add.w	r2, r7, #20
 8001270:	2306      	movs	r3, #6
 8001272:	2114      	movs	r1, #20
 8001274:	f7ff ff32 	bl	80010dc <I2cReadBytes>
	//printf("%d,%d\r\n",data[0],data[1]);

	int16_t _x,_y,_z;
	_x = data[1] << 8 | data[0];
 8001278:	7d7b      	ldrb	r3, [r7, #21]
 800127a:	021b      	lsls	r3, r3, #8
 800127c:	b21a      	sxth	r2, r3
 800127e:	7d3b      	ldrb	r3, [r7, #20]
 8001280:	b21b      	sxth	r3, r3
 8001282:	4313      	orrs	r3, r2
 8001284:	83fb      	strh	r3, [r7, #30]
	_y = data[3] << 8 | data[2];
 8001286:	7dfb      	ldrb	r3, [r7, #23]
 8001288:	021b      	lsls	r3, r3, #8
 800128a:	b21a      	sxth	r2, r3
 800128c:	7dbb      	ldrb	r3, [r7, #22]
 800128e:	b21b      	sxth	r3, r3
 8001290:	4313      	orrs	r3, r2
 8001292:	83bb      	strh	r3, [r7, #28]
	_z = data[5] << 8 | data[4];
 8001294:	7e7b      	ldrb	r3, [r7, #25]
 8001296:	021b      	lsls	r3, r3, #8
 8001298:	b21a      	sxth	r2, r3
 800129a:	7e3b      	ldrb	r3, [r7, #24]
 800129c:	b21b      	sxth	r3, r3
 800129e:	4313      	orrs	r3, r2
 80012a0:	837b      	strh	r3, [r7, #26]

#if BNO055_UNIT_SEL_GYR == BNO055_UNIT_SEL_GYR_Dps
	*x = (float)_x / 16;
 80012a2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80012a6:	ee07 3a90 	vmov	s15, r3
 80012aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012ae:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 80012b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	edc3 7a00 	vstr	s15, [r3]
	*y = (float)_y / 16;
 80012bc:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80012c0:	ee07 3a90 	vmov	s15, r3
 80012c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012c8:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 80012cc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	edc3 7a00 	vstr	s15, [r3]
	*z = (float)_z / 16;
 80012d6:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80012da:	ee07 3a90 	vmov	s15, r3
 80012de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012e2:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 80012e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	edc3 7a00 	vstr	s15, [r3]
	*x = (float)_x / 900;
	*y = (float)_y / 900;
	*z = (float)_z / 900;
#endif
	//printf("%f , %f , %f\r\n",x,y,z);
}
 80012f0:	bf00      	nop
 80012f2:	3720      	adds	r7, #32
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	20000200 	.word	0x20000200

080012fc <A4988_Initialize>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void A4988_Initialize(){
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MDEN_GPIO_Port,MDEN_Pin,GPIO_PIN_RESET);
 8001300:	2200      	movs	r2, #0
 8001302:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001306:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800130a:	f001 fc93 	bl	8002c34 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MDMS1_GPIO_Port,MDMS1_Pin,GPIO_PIN_RESET);
 800130e:	2200      	movs	r2, #0
 8001310:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001314:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001318:	f001 fc8c 	bl	8002c34 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MDMS2_GPIO_Port,MDMS2_Pin,GPIO_PIN_RESET);
 800131c:	2200      	movs	r2, #0
 800131e:	2140      	movs	r1, #64	@ 0x40
 8001320:	4804      	ldr	r0, [pc, #16]	@ (8001334 <A4988_Initialize+0x38>)
 8001322:	f001 fc87 	bl	8002c34 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MDMS3_GPIO_Port,MDMS3_Pin,GPIO_PIN_RESET);
 8001326:	2200      	movs	r2, #0
 8001328:	2101      	movs	r1, #1
 800132a:	4802      	ldr	r0, [pc, #8]	@ (8001334 <A4988_Initialize+0x38>)
 800132c:	f001 fc82 	bl	8002c34 <HAL_GPIO_WritePin>
}
 8001330:	bf00      	nop
 8001332:	bd80      	pop	{r7, pc}
 8001334:	48000400 	.word	0x48000400

08001338 <A4988_STEP>:

void A4988_STEP(uint16_t interval){
 8001338:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800133c:	b082      	sub	sp, #8
 800133e:	af00      	add	r7, sp, #0
 8001340:	4603      	mov	r3, r0
 8001342:	80fb      	strh	r3, [r7, #6]
	if(stopState == 0){
 8001344:	4b38      	ldr	r3, [pc, #224]	@ (8001428 <A4988_STEP+0xf0>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d061      	beq.n	8001410 <A4988_STEP+0xd8>
		return ;
	}
	if(stepState == 0){
 800134c:	4b37      	ldr	r3, [pc, #220]	@ (800142c <A4988_STEP+0xf4>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d120      	bne.n	8001396 <A4988_STEP+0x5e>
		if(stepInterval != interval - 1){
 8001354:	4b36      	ldr	r3, [pc, #216]	@ (8001430 <A4988_STEP+0xf8>)
 8001356:	881b      	ldrh	r3, [r3, #0]
 8001358:	461a      	mov	r2, r3
 800135a:	88fb      	ldrh	r3, [r7, #6]
 800135c:	3b01      	subs	r3, #1
 800135e:	429a      	cmp	r2, r3
 8001360:	d00e      	beq.n	8001380 <A4988_STEP+0x48>
			stepInterval = interval - 1;
 8001362:	88fb      	ldrh	r3, [r7, #6]
 8001364:	3b01      	subs	r3, #1
 8001366:	b29a      	uxth	r2, r3
 8001368:	4b31      	ldr	r3, [pc, #196]	@ (8001430 <A4988_STEP+0xf8>)
 800136a:	801a      	strh	r2, [r3, #0]
			__HAL_TIM_SET_AUTORELOAD(&htim7, stepInterval);
 800136c:	4b30      	ldr	r3, [pc, #192]	@ (8001430 <A4988_STEP+0xf8>)
 800136e:	881a      	ldrh	r2, [r3, #0]
 8001370:	4b30      	ldr	r3, [pc, #192]	@ (8001434 <A4988_STEP+0xfc>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001376:	4b2e      	ldr	r3, [pc, #184]	@ (8001430 <A4988_STEP+0xf8>)
 8001378:	881b      	ldrh	r3, [r3, #0]
 800137a:	461a      	mov	r2, r3
 800137c:	4b2d      	ldr	r3, [pc, #180]	@ (8001434 <A4988_STEP+0xfc>)
 800137e:	60da      	str	r2, [r3, #12]
		}
		HAL_GPIO_WritePin(MDSTEP_GPIO_Port,MDSTEP_Pin,GPIO_PIN_SET);
 8001380:	2201      	movs	r2, #1
 8001382:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001386:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800138a:	f001 fc53 	bl	8002c34 <HAL_GPIO_WritePin>
		stepState = 1;
 800138e:	4b27      	ldr	r3, [pc, #156]	@ (800142c <A4988_STEP+0xf4>)
 8001390:	2201      	movs	r2, #1
 8001392:	601a      	str	r2, [r3, #0]
 8001394:	e03d      	b.n	8001412 <A4988_STEP+0xda>
	}else{
		HAL_GPIO_WritePin(MDSTEP_GPIO_Port,MDSTEP_Pin,GPIO_PIN_RESET);
 8001396:	2200      	movs	r2, #0
 8001398:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800139c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013a0:	f001 fc48 	bl	8002c34 <HAL_GPIO_WritePin>
		stepState = 0;
 80013a4:	4b21      	ldr	r3, [pc, #132]	@ (800142c <A4988_STEP+0xf4>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	601a      	str	r2, [r3, #0]
		mangle += onepulse_motorangle*mdir/ms;
 80013aa:	4b23      	ldr	r3, [pc, #140]	@ (8001438 <A4988_STEP+0x100>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4618      	mov	r0, r3
 80013b0:	f7ff f8f2 	bl	8000598 <__aeabi_f2d>
 80013b4:	4604      	mov	r4, r0
 80013b6:	460d      	mov	r5, r1
 80013b8:	4b20      	ldr	r3, [pc, #128]	@ (800143c <A4988_STEP+0x104>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4618      	mov	r0, r3
 80013be:	f7ff f8d9 	bl	8000574 <__aeabi_i2d>
 80013c2:	a317      	add	r3, pc, #92	@ (adr r3, 8001420 <A4988_STEP+0xe8>)
 80013c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013c8:	f7ff f93e 	bl	8000648 <__aeabi_dmul>
 80013cc:	4602      	mov	r2, r0
 80013ce:	460b      	mov	r3, r1
 80013d0:	4690      	mov	r8, r2
 80013d2:	4699      	mov	r9, r3
 80013d4:	4b1a      	ldr	r3, [pc, #104]	@ (8001440 <A4988_STEP+0x108>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4618      	mov	r0, r3
 80013da:	f7ff f8cb 	bl	8000574 <__aeabi_i2d>
 80013de:	4602      	mov	r2, r0
 80013e0:	460b      	mov	r3, r1
 80013e2:	4640      	mov	r0, r8
 80013e4:	4649      	mov	r1, r9
 80013e6:	f7ff fa59 	bl	800089c <__aeabi_ddiv>
 80013ea:	4602      	mov	r2, r0
 80013ec:	460b      	mov	r3, r1
 80013ee:	4620      	mov	r0, r4
 80013f0:	4629      	mov	r1, r5
 80013f2:	f7fe ff73 	bl	80002dc <__adddf3>
 80013f6:	4602      	mov	r2, r0
 80013f8:	460b      	mov	r3, r1
 80013fa:	4610      	mov	r0, r2
 80013fc:	4619      	mov	r1, r3
 80013fe:	f7ff fc1b 	bl	8000c38 <__aeabi_d2f>
 8001402:	4603      	mov	r3, r0
 8001404:	4a0c      	ldr	r2, [pc, #48]	@ (8001438 <A4988_STEP+0x100>)
 8001406:	6013      	str	r3, [r2, #0]
		printf("onepulse");
 8001408:	480e      	ldr	r0, [pc, #56]	@ (8001444 <A4988_STEP+0x10c>)
 800140a:	f008 fce5 	bl	8009dd8 <iprintf>
 800140e:	e000      	b.n	8001412 <A4988_STEP+0xda>
		return ;
 8001410:	bf00      	nop
	}

}
 8001412:	3708      	adds	r7, #8
 8001414:	46bd      	mov	sp, r7
 8001416:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800141a:	bf00      	nop
 800141c:	f3af 8000 	nop.w
 8001420:	cccccccd 	.word	0xcccccccd
 8001424:	3feccccc 	.word	0x3feccccc
 8001428:	200004f4 	.word	0x200004f4
 800142c:	200004e0 	.word	0x200004e0
 8001430:	200004e4 	.word	0x200004e4
 8001434:	200002f0 	.word	0x200002f0
 8001438:	200004e8 	.word	0x200004e8
 800143c:	20000004 	.word	0x20000004
 8001440:	20000008 	.word	0x20000008
 8001444:	0800ccd4 	.word	0x0800ccd4

08001448 <HAL_TIM_PeriodElapsedCallback>:
    HAL_GPIO_WritePin(MDMS2_GPIO_Port, MDMS2_Pin, (MS & 0b010) ? GPIO_PIN_SET : GPIO_PIN_RESET);
    HAL_GPIO_WritePin(MDMS3_GPIO_Port, MDMS3_Pin, (MS & 0b100) ? GPIO_PIN_SET : GPIO_PIN_RESET);
}


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001448:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800144c:	b084      	sub	sp, #16
 800144e:	af00      	add	r7, sp, #0
 8001450:	6078      	str	r0, [r7, #4]
	if(htim == &htim4){
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	4a9c      	ldr	r2, [pc, #624]	@ (80016c8 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d160      	bne.n	800151c <HAL_TIM_PeriodElapsedCallback+0xd4>
        BNO055_ReadGyr(&Gyr_x, &Gyr_y, &Gyr_z);
 800145a:	4a9c      	ldr	r2, [pc, #624]	@ (80016cc <HAL_TIM_PeriodElapsedCallback+0x284>)
 800145c:	499c      	ldr	r1, [pc, #624]	@ (80016d0 <HAL_TIM_PeriodElapsedCallback+0x288>)
 800145e:	489d      	ldr	r0, [pc, #628]	@ (80016d4 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001460:	f7ff fef8 	bl	8001254 <BNO055_ReadGyr>
        //printf("%f , %f , %f\r\n",Gyr_x,Gyr_y,Gyr_z); // @suppress("Float formatting support")
        if(Gyr_z == now_z){
 8001464:	4b99      	ldr	r3, [pc, #612]	@ (80016cc <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001466:	ed93 7a00 	vldr	s14, [r3]
 800146a:	4b9b      	ldr	r3, [pc, #620]	@ (80016d8 <HAL_TIM_PeriodElapsedCallback+0x290>)
 800146c:	edd3 7a00 	vldr	s15, [r3]
 8001470:	eeb4 7a67 	vcmp.f32	s14, s15
 8001474:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001478:	d105      	bne.n	8001486 <HAL_TIM_PeriodElapsedCallback+0x3e>
        	bnoemergency++;
 800147a:	4b98      	ldr	r3, [pc, #608]	@ (80016dc <HAL_TIM_PeriodElapsedCallback+0x294>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	3301      	adds	r3, #1
 8001480:	4a96      	ldr	r2, [pc, #600]	@ (80016dc <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001482:	6013      	str	r3, [r2, #0]
 8001484:	e002      	b.n	800148c <HAL_TIM_PeriodElapsedCallback+0x44>
        }else{
        	bnoemergency = 0;
 8001486:	4b95      	ldr	r3, [pc, #596]	@ (80016dc <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001488:	2200      	movs	r2, #0
 800148a:	601a      	str	r2, [r3, #0]
        }
        if(bnoemergency == 10){
 800148c:	4b93      	ldr	r3, [pc, #588]	@ (80016dc <HAL_TIM_PeriodElapsedCallback+0x294>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	2b0a      	cmp	r3, #10
 8001492:	d10b      	bne.n	80014ac <HAL_TIM_PeriodElapsedCallback+0x64>
        	HAL_UART_Transmit(&huart1,reset_buffer,sizeof(reset_buffer),0xFFFF);
 8001494:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001498:	2204      	movs	r2, #4
 800149a:	4991      	ldr	r1, [pc, #580]	@ (80016e0 <HAL_TIM_PeriodElapsedCallback+0x298>)
 800149c:	4891      	ldr	r0, [pc, #580]	@ (80016e4 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 800149e:	f004 fd33 	bl	8005f08 <HAL_UART_Transmit>
        	HAL_NVIC_SystemReset();
 80014a2:	f001 f95a 	bl	800275a <HAL_NVIC_SystemReset>
        	bnoemergency = 0;
 80014a6:	4b8d      	ldr	r3, [pc, #564]	@ (80016dc <HAL_TIM_PeriodElapsedCallback+0x294>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	601a      	str	r2, [r3, #0]
        }
        pre_z = now_z;
 80014ac:	4b8a      	ldr	r3, [pc, #552]	@ (80016d8 <HAL_TIM_PeriodElapsedCallback+0x290>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a8d      	ldr	r2, [pc, #564]	@ (80016e8 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80014b2:	6013      	str	r3, [r2, #0]
        now_z = Gyr_z;
 80014b4:	4b85      	ldr	r3, [pc, #532]	@ (80016cc <HAL_TIM_PeriodElapsedCallback+0x284>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a87      	ldr	r2, [pc, #540]	@ (80016d8 <HAL_TIM_PeriodElapsedCallback+0x290>)
 80014ba:	6013      	str	r3, [r2, #0]
        tangle += (now_z + Gyr_z) * 0.01 * 0.5;
 80014bc:	4b8b      	ldr	r3, [pc, #556]	@ (80016ec <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7ff f869 	bl	8000598 <__aeabi_f2d>
 80014c6:	4680      	mov	r8, r0
 80014c8:	4689      	mov	r9, r1
 80014ca:	4b83      	ldr	r3, [pc, #524]	@ (80016d8 <HAL_TIM_PeriodElapsedCallback+0x290>)
 80014cc:	ed93 7a00 	vldr	s14, [r3]
 80014d0:	4b7e      	ldr	r3, [pc, #504]	@ (80016cc <HAL_TIM_PeriodElapsedCallback+0x284>)
 80014d2:	edd3 7a00 	vldr	s15, [r3]
 80014d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014da:	ee17 0a90 	vmov	r0, s15
 80014de:	f7ff f85b 	bl	8000598 <__aeabi_f2d>
 80014e2:	a375      	add	r3, pc, #468	@ (adr r3, 80016b8 <HAL_TIM_PeriodElapsedCallback+0x270>)
 80014e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014e8:	f7ff f8ae 	bl	8000648 <__aeabi_dmul>
 80014ec:	4602      	mov	r2, r0
 80014ee:	460b      	mov	r3, r1
 80014f0:	4610      	mov	r0, r2
 80014f2:	4619      	mov	r1, r3
 80014f4:	f04f 0200 	mov.w	r2, #0
 80014f8:	4b7d      	ldr	r3, [pc, #500]	@ (80016f0 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80014fa:	f7ff f8a5 	bl	8000648 <__aeabi_dmul>
 80014fe:	4602      	mov	r2, r0
 8001500:	460b      	mov	r3, r1
 8001502:	4640      	mov	r0, r8
 8001504:	4649      	mov	r1, r9
 8001506:	f7fe fee9 	bl	80002dc <__adddf3>
 800150a:	4602      	mov	r2, r0
 800150c:	460b      	mov	r3, r1
 800150e:	4610      	mov	r0, r2
 8001510:	4619      	mov	r1, r3
 8001512:	f7ff fb91 	bl	8000c38 <__aeabi_d2f>
 8001516:	4603      	mov	r3, r0
 8001518:	4a74      	ldr	r2, [pc, #464]	@ (80016ec <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 800151a:	6013      	str	r3, [r2, #0]
        //printf("%f\r\n",tangle);
	}
    if(htim == &htim6){
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	4a75      	ldr	r2, [pc, #468]	@ (80016f4 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8001520:	4293      	cmp	r3, r2
 8001522:	f040 80b7 	bne.w	8001694 <HAL_TIM_PeriodElapsedCallback+0x24c>
        float diffangle = tangle - mangle;
 8001526:	4b71      	ldr	r3, [pc, #452]	@ (80016ec <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001528:	ed93 7a00 	vldr	s14, [r3]
 800152c:	4b72      	ldr	r3, [pc, #456]	@ (80016f8 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 800152e:	edd3 7a00 	vldr	s15, [r3]
 8001532:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001536:	edc7 7a03 	vstr	s15, [r7, #12]
        if((diffangle < (onepulse_motorangle/ms)*5) && (diffangle > -(onepulse_motorangle/ms)*5) ){
 800153a:	68f8      	ldr	r0, [r7, #12]
 800153c:	f7ff f82c 	bl	8000598 <__aeabi_f2d>
 8001540:	4680      	mov	r8, r0
 8001542:	4689      	mov	r9, r1
 8001544:	4b6d      	ldr	r3, [pc, #436]	@ (80016fc <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4618      	mov	r0, r3
 800154a:	f7ff f813 	bl	8000574 <__aeabi_i2d>
 800154e:	4602      	mov	r2, r0
 8001550:	460b      	mov	r3, r1
 8001552:	a15b      	add	r1, pc, #364	@ (adr r1, 80016c0 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001554:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001558:	f7ff f9a0 	bl	800089c <__aeabi_ddiv>
 800155c:	4602      	mov	r2, r0
 800155e:	460b      	mov	r3, r1
 8001560:	4610      	mov	r0, r2
 8001562:	4619      	mov	r1, r3
 8001564:	f04f 0200 	mov.w	r2, #0
 8001568:	4b65      	ldr	r3, [pc, #404]	@ (8001700 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 800156a:	f7ff f86d 	bl	8000648 <__aeabi_dmul>
 800156e:	4602      	mov	r2, r0
 8001570:	460b      	mov	r3, r1
 8001572:	4640      	mov	r0, r8
 8001574:	4649      	mov	r1, r9
 8001576:	f7ff fad9 	bl	8000b2c <__aeabi_dcmplt>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d028      	beq.n	80015d2 <HAL_TIM_PeriodElapsedCallback+0x18a>
 8001580:	68f8      	ldr	r0, [r7, #12]
 8001582:	f7ff f809 	bl	8000598 <__aeabi_f2d>
 8001586:	4680      	mov	r8, r0
 8001588:	4689      	mov	r9, r1
 800158a:	4b5c      	ldr	r3, [pc, #368]	@ (80016fc <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4618      	mov	r0, r3
 8001590:	f7fe fff0 	bl	8000574 <__aeabi_i2d>
 8001594:	4602      	mov	r2, r0
 8001596:	460b      	mov	r3, r1
 8001598:	a149      	add	r1, pc, #292	@ (adr r1, 80016c0 <HAL_TIM_PeriodElapsedCallback+0x278>)
 800159a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800159e:	f7ff f97d 	bl	800089c <__aeabi_ddiv>
 80015a2:	4602      	mov	r2, r0
 80015a4:	460b      	mov	r3, r1
 80015a6:	4614      	mov	r4, r2
 80015a8:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 80015ac:	f04f 0200 	mov.w	r2, #0
 80015b0:	4b53      	ldr	r3, [pc, #332]	@ (8001700 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80015b2:	4620      	mov	r0, r4
 80015b4:	4629      	mov	r1, r5
 80015b6:	f7ff f847 	bl	8000648 <__aeabi_dmul>
 80015ba:	4602      	mov	r2, r0
 80015bc:	460b      	mov	r3, r1
 80015be:	4640      	mov	r0, r8
 80015c0:	4649      	mov	r1, r9
 80015c2:	f7ff fad1 	bl	8000b68 <__aeabi_dcmpgt>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d002      	beq.n	80015d2 <HAL_TIM_PeriodElapsedCallback+0x18a>
        	diffangle = 0;
 80015cc:	f04f 0300 	mov.w	r3, #0
 80015d0:	60fb      	str	r3, [r7, #12]
        }
        int pulse = diffangle / (onepulse_motorangle / ms);
 80015d2:	68f8      	ldr	r0, [r7, #12]
 80015d4:	f7fe ffe0 	bl	8000598 <__aeabi_f2d>
 80015d8:	4604      	mov	r4, r0
 80015da:	460d      	mov	r5, r1
 80015dc:	4b47      	ldr	r3, [pc, #284]	@ (80016fc <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4618      	mov	r0, r3
 80015e2:	f7fe ffc7 	bl	8000574 <__aeabi_i2d>
 80015e6:	4602      	mov	r2, r0
 80015e8:	460b      	mov	r3, r1
 80015ea:	a135      	add	r1, pc, #212	@ (adr r1, 80016c0 <HAL_TIM_PeriodElapsedCallback+0x278>)
 80015ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80015f0:	f7ff f954 	bl	800089c <__aeabi_ddiv>
 80015f4:	4602      	mov	r2, r0
 80015f6:	460b      	mov	r3, r1
 80015f8:	4620      	mov	r0, r4
 80015fa:	4629      	mov	r1, r5
 80015fc:	f7ff f94e 	bl	800089c <__aeabi_ddiv>
 8001600:	4602      	mov	r2, r0
 8001602:	460b      	mov	r3, r1
 8001604:	4610      	mov	r0, r2
 8001606:	4619      	mov	r1, r3
 8001608:	f7ff face 	bl	8000ba8 <__aeabi_d2iz>
 800160c:	4603      	mov	r3, r0
 800160e:	60bb      	str	r3, [r7, #8]
        //printf("%f\r\n",diffangle);

        if (pulse < 0) {
 8001610:	68bb      	ldr	r3, [r7, #8]
 8001612:	2b00      	cmp	r3, #0
 8001614:	da0d      	bge.n	8001632 <HAL_TIM_PeriodElapsedCallback+0x1ea>
            mdir = -1;
 8001616:	4b3b      	ldr	r3, [pc, #236]	@ (8001704 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001618:	f04f 32ff 	mov.w	r2, #4294967295
 800161c:	601a      	str	r2, [r3, #0]
            HAL_GPIO_WritePin(MDDIR_GPIO_Port, MDDIR_Pin, GPIO_PIN_SET);
 800161e:	2201      	movs	r2, #1
 8001620:	2180      	movs	r1, #128	@ 0x80
 8001622:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001626:	f001 fb05 	bl	8002c34 <HAL_GPIO_WritePin>
            pulse = -pulse;
 800162a:	68bb      	ldr	r3, [r7, #8]
 800162c:	425b      	negs	r3, r3
 800162e:	60bb      	str	r3, [r7, #8]
 8001630:	e00b      	b.n	800164a <HAL_TIM_PeriodElapsedCallback+0x202>
        } else if (pulse > 0) {
 8001632:	68bb      	ldr	r3, [r7, #8]
 8001634:	2b00      	cmp	r3, #0
 8001636:	dd08      	ble.n	800164a <HAL_TIM_PeriodElapsedCallback+0x202>
            mdir = 1;
 8001638:	4b32      	ldr	r3, [pc, #200]	@ (8001704 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 800163a:	2201      	movs	r2, #1
 800163c:	601a      	str	r2, [r3, #0]
            HAL_GPIO_WritePin(MDDIR_GPIO_Port, MDDIR_Pin, GPIO_PIN_RESET);
 800163e:	2200      	movs	r2, #0
 8001640:	2180      	movs	r1, #128	@ 0x80
 8001642:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001646:	f001 faf5 	bl	8002c34 <HAL_GPIO_WritePin>
        }

        if (pulse > 0) {
 800164a:	68bb      	ldr	r3, [r7, #8]
 800164c:	2b00      	cmp	r3, #0
 800164e:	dd0a      	ble.n	8001666 <HAL_TIM_PeriodElapsedCallback+0x21e>
            mInterval = 100 / pulse;
 8001650:	2264      	movs	r2, #100	@ 0x64
 8001652:	68bb      	ldr	r3, [r7, #8]
 8001654:	fb92 f3f3 	sdiv	r3, r2, r3
 8001658:	b29a      	uxth	r2, r3
 800165a:	4b2b      	ldr	r3, [pc, #172]	@ (8001708 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 800165c:	801a      	strh	r2, [r3, #0]
            stopState = 1;
 800165e:	4b2b      	ldr	r3, [pc, #172]	@ (800170c <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001660:	2201      	movs	r2, #1
 8001662:	601a      	str	r2, [r3, #0]
 8001664:	e005      	b.n	8001672 <HAL_TIM_PeriodElapsedCallback+0x22a>
        } else {
            mInterval = 100; // ゼロ除算防止
 8001666:	4b28      	ldr	r3, [pc, #160]	@ (8001708 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001668:	2264      	movs	r2, #100	@ 0x64
 800166a:	801a      	strh	r2, [r3, #0]
            stopState = 0;
 800166c:	4b27      	ldr	r3, [pc, #156]	@ (800170c <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 800166e:	2200      	movs	r2, #0
 8001670:	601a      	str	r2, [r3, #0]
        }
        if(mInterval < 34){
 8001672:	4b25      	ldr	r3, [pc, #148]	@ (8001708 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001674:	881b      	ldrh	r3, [r3, #0]
 8001676:	2b21      	cmp	r3, #33	@ 0x21
 8001678:	d802      	bhi.n	8001680 <HAL_TIM_PeriodElapsedCallback+0x238>
        	mInterval = 34;
 800167a:	4b23      	ldr	r3, [pc, #140]	@ (8001708 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 800167c:	2222      	movs	r2, #34	@ 0x22
 800167e:	801a      	strh	r2, [r3, #0]
        }


        if (tim7init == 0) {
 8001680:	4b23      	ldr	r3, [pc, #140]	@ (8001710 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d105      	bne.n	8001694 <HAL_TIM_PeriodElapsedCallback+0x24c>
            HAL_TIM_Base_Start_IT(&htim7);
 8001688:	4822      	ldr	r0, [pc, #136]	@ (8001714 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 800168a:	f003 ff11 	bl	80054b0 <HAL_TIM_Base_Start_IT>
            tim7init = 1;
 800168e:	4b20      	ldr	r3, [pc, #128]	@ (8001710 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001690:	2201      	movs	r2, #1
 8001692:	601a      	str	r2, [r3, #0]
        }
        //printf("%f,%f\r\n",tangle,mangle);
    }

    if(htim == &htim7){
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	4a1f      	ldr	r2, [pc, #124]	@ (8001714 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8001698:	4293      	cmp	r3, r2
 800169a:	d107      	bne.n	80016ac <HAL_TIM_PeriodElapsedCallback+0x264>
    	printf("tim7\r\n");
 800169c:	481e      	ldr	r0, [pc, #120]	@ (8001718 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 800169e:	f008 fc03 	bl	8009ea8 <puts>
        A4988_STEP(mInterval);
 80016a2:	4b19      	ldr	r3, [pc, #100]	@ (8001708 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80016a4:	881b      	ldrh	r3, [r3, #0]
 80016a6:	4618      	mov	r0, r3
 80016a8:	f7ff fe46 	bl	8001338 <A4988_STEP>
    }
}
 80016ac:	bf00      	nop
 80016ae:	3710      	adds	r7, #16
 80016b0:	46bd      	mov	sp, r7
 80016b2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80016b6:	bf00      	nop
 80016b8:	47ae147b 	.word	0x47ae147b
 80016bc:	3f847ae1 	.word	0x3f847ae1
 80016c0:	cccccccd 	.word	0xcccccccd
 80016c4:	3feccccc 	.word	0x3feccccc
 80016c8:	20000258 	.word	0x20000258
 80016cc:	200004d0 	.word	0x200004d0
 80016d0:	200004cc 	.word	0x200004cc
 80016d4:	200004c8 	.word	0x200004c8
 80016d8:	200004d8 	.word	0x200004d8
 80016dc:	200004dc 	.word	0x200004dc
 80016e0:	0800cd18 	.word	0x0800cd18
 80016e4:	2000033c 	.word	0x2000033c
 80016e8:	200004d4 	.word	0x200004d4
 80016ec:	200004ec 	.word	0x200004ec
 80016f0:	3fe00000 	.word	0x3fe00000
 80016f4:	200002a4 	.word	0x200002a4
 80016f8:	200004e8 	.word	0x200004e8
 80016fc:	20000008 	.word	0x20000008
 8001700:	40140000 	.word	0x40140000
 8001704:	20000004 	.word	0x20000004
 8001708:	20000000 	.word	0x20000000
 800170c:	200004f4 	.word	0x200004f4
 8001710:	200004f0 	.word	0x200004f0
 8001714:	200002f0 	.word	0x200002f0
 8001718:	0800cce0 	.word	0x0800cce0

0800171c <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800171c:	b580      	push	{r7, lr}
 800171e:	b084      	sub	sp, #16
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
	//printf("receive\r\n");
	//printf("%d\r\n",buffer[0]);

	if(buffer[0] == 13){
 8001724:	4b2c      	ldr	r3, [pc, #176]	@ (80017d8 <HAL_UART_RxCpltCallback+0xbc>)
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	2b0d      	cmp	r3, #13
 800172a:	d140      	bne.n	80017ae <HAL_UART_RxCpltCallback+0x92>
		//printf("ok\r\n");
		if(data[0] == 97){
 800172c:	4b2b      	ldr	r3, [pc, #172]	@ (80017dc <HAL_UART_RxCpltCallback+0xc0>)
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	2b61      	cmp	r3, #97	@ 0x61
 8001732:	d127      	bne.n	8001784 <HAL_UART_RxCpltCallback+0x68>
			for(int i=0;i<datapos-1;i++){
 8001734:	2300      	movs	r3, #0
 8001736:	60fb      	str	r3, [r7, #12]
 8001738:	e00b      	b.n	8001752 <HAL_UART_RxCpltCallback+0x36>
				num_char[i] = data[i+1];
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	3301      	adds	r3, #1
 800173e:	4a27      	ldr	r2, [pc, #156]	@ (80017dc <HAL_UART_RxCpltCallback+0xc0>)
 8001740:	5cd1      	ldrb	r1, [r2, r3]
 8001742:	4a27      	ldr	r2, [pc, #156]	@ (80017e0 <HAL_UART_RxCpltCallback+0xc4>)
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	4413      	add	r3, r2
 8001748:	460a      	mov	r2, r1
 800174a:	701a      	strb	r2, [r3, #0]
			for(int i=0;i<datapos-1;i++){
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	3301      	adds	r3, #1
 8001750:	60fb      	str	r3, [r7, #12]
 8001752:	4b24      	ldr	r3, [pc, #144]	@ (80017e4 <HAL_UART_RxCpltCallback+0xc8>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	3b01      	subs	r3, #1
 8001758:	68fa      	ldr	r2, [r7, #12]
 800175a:	429a      	cmp	r2, r3
 800175c:	dbed      	blt.n	800173a <HAL_UART_RxCpltCallback+0x1e>
			}
			num_char[datapos-1] = '\0';
 800175e:	4b21      	ldr	r3, [pc, #132]	@ (80017e4 <HAL_UART_RxCpltCallback+0xc8>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	3b01      	subs	r3, #1
 8001764:	4a1e      	ldr	r2, [pc, #120]	@ (80017e0 <HAL_UART_RxCpltCallback+0xc4>)
 8001766:	2100      	movs	r1, #0
 8001768:	54d1      	strb	r1, [r2, r3]
			cangle = strtof(num_char, NULL);
 800176a:	2100      	movs	r1, #0
 800176c:	481c      	ldr	r0, [pc, #112]	@ (80017e0 <HAL_UART_RxCpltCallback+0xc4>)
 800176e:	f007 fba1 	bl	8008eb4 <strtof>
 8001772:	eef0 7a40 	vmov.f32	s15, s0
 8001776:	4b1c      	ldr	r3, [pc, #112]	@ (80017e8 <HAL_UART_RxCpltCallback+0xcc>)
 8001778:	edc3 7a00 	vstr	s15, [r3]
			mangle = cangle;
 800177c:	4b1a      	ldr	r3, [pc, #104]	@ (80017e8 <HAL_UART_RxCpltCallback+0xcc>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a1a      	ldr	r2, [pc, #104]	@ (80017ec <HAL_UART_RxCpltCallback+0xd0>)
 8001782:	6013      	str	r3, [r2, #0]
			//printf("%f\r\n",cangle);
		}
		for(int i =0;i < datapos;i++){
 8001784:	2300      	movs	r3, #0
 8001786:	60bb      	str	r3, [r7, #8]
 8001788:	e007      	b.n	800179a <HAL_UART_RxCpltCallback+0x7e>
			//printf("%d\r\n",data[i]);
			//printf("i:%d,data:%d\r\n",i,data[i]);

			data[i] = 0;
 800178a:	4a14      	ldr	r2, [pc, #80]	@ (80017dc <HAL_UART_RxCpltCallback+0xc0>)
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	4413      	add	r3, r2
 8001790:	2200      	movs	r2, #0
 8001792:	701a      	strb	r2, [r3, #0]
		for(int i =0;i < datapos;i++){
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	3301      	adds	r3, #1
 8001798:	60bb      	str	r3, [r7, #8]
 800179a:	4b12      	ldr	r3, [pc, #72]	@ (80017e4 <HAL_UART_RxCpltCallback+0xc8>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	68ba      	ldr	r2, [r7, #8]
 80017a0:	429a      	cmp	r2, r3
 80017a2:	dbf2      	blt.n	800178a <HAL_UART_RxCpltCallback+0x6e>
		}
		datapos = -1;
 80017a4:	4b0f      	ldr	r3, [pc, #60]	@ (80017e4 <HAL_UART_RxCpltCallback+0xc8>)
 80017a6:	f04f 32ff 	mov.w	r2, #4294967295
 80017aa:	601a      	str	r2, [r3, #0]
 80017ac:	e00a      	b.n	80017c4 <HAL_UART_RxCpltCallback+0xa8>
	}else{
		data[datapos] = buffer[0];
 80017ae:	4b0d      	ldr	r3, [pc, #52]	@ (80017e4 <HAL_UART_RxCpltCallback+0xc8>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a09      	ldr	r2, [pc, #36]	@ (80017d8 <HAL_UART_RxCpltCallback+0xbc>)
 80017b4:	7811      	ldrb	r1, [r2, #0]
 80017b6:	4a09      	ldr	r2, [pc, #36]	@ (80017dc <HAL_UART_RxCpltCallback+0xc0>)
 80017b8:	54d1      	strb	r1, [r2, r3]
		//printf("%d\r\n",data[datapos]);
		datapos++;
 80017ba:	4b0a      	ldr	r3, [pc, #40]	@ (80017e4 <HAL_UART_RxCpltCallback+0xc8>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	3301      	adds	r3, #1
 80017c0:	4a08      	ldr	r2, [pc, #32]	@ (80017e4 <HAL_UART_RxCpltCallback+0xc8>)
 80017c2:	6013      	str	r3, [r2, #0]
	}
	HAL_UART_Receive_IT(&huart1, buffer, 1);
 80017c4:	2201      	movs	r2, #1
 80017c6:	4904      	ldr	r1, [pc, #16]	@ (80017d8 <HAL_UART_RxCpltCallback+0xbc>)
 80017c8:	4809      	ldr	r0, [pc, #36]	@ (80017f0 <HAL_UART_RxCpltCallback+0xd4>)
 80017ca:	f004 fc2b 	bl	8006024 <HAL_UART_Receive_IT>
}
 80017ce:	bf00      	nop
 80017d0:	3710      	adds	r7, #16
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	200004f8 	.word	0x200004f8
 80017dc:	20000518 	.word	0x20000518
 80017e0:	2000053c 	.word	0x2000053c
 80017e4:	20000538 	.word	0x20000538
 80017e8:	2000055c 	.word	0x2000055c
 80017ec:	200004e8 	.word	0x200004e8
 80017f0:	2000033c 	.word	0x2000033c

080017f4 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart){
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
	printf("uart_error\r\n");
 80017fc:	4808      	ldr	r0, [pc, #32]	@ (8001820 <HAL_UART_ErrorCallback+0x2c>)
 80017fe:	f008 fb53 	bl	8009ea8 <puts>
	HAL_UART_Abort(huart);
 8001802:	6878      	ldr	r0, [r7, #4]
 8001804:	f004 fc5a 	bl	80060bc <HAL_UART_Abort>
	HAL_UART_Receive_IT(&huart1, buffer, size);
 8001808:	4b06      	ldr	r3, [pc, #24]	@ (8001824 <HAL_UART_ErrorCallback+0x30>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	b29b      	uxth	r3, r3
 800180e:	461a      	mov	r2, r3
 8001810:	4905      	ldr	r1, [pc, #20]	@ (8001828 <HAL_UART_ErrorCallback+0x34>)
 8001812:	4806      	ldr	r0, [pc, #24]	@ (800182c <HAL_UART_ErrorCallback+0x38>)
 8001814:	f004 fc06 	bl	8006024 <HAL_UART_Receive_IT>
}
 8001818:	bf00      	nop
 800181a:	3708      	adds	r7, #8
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	0800cce8 	.word	0x0800cce8
 8001824:	2000000c 	.word	0x2000000c
 8001828:	200004f8 	.word	0x200004f8
 800182c:	2000033c 	.word	0x2000033c

08001830 <_write>:


int _write(int file, char *ptr, int len)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b084      	sub	sp, #16
 8001834:	af00      	add	r7, sp, #0
 8001836:	60f8      	str	r0, [r7, #12]
 8001838:	60b9      	str	r1, [r7, #8]
 800183a:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2,(uint8_t *)ptr,len,10);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	b29a      	uxth	r2, r3
 8001840:	230a      	movs	r3, #10
 8001842:	68b9      	ldr	r1, [r7, #8]
 8001844:	4803      	ldr	r0, [pc, #12]	@ (8001854 <_write+0x24>)
 8001846:	f004 fb5f 	bl	8005f08 <HAL_UART_Transmit>
  return len;
 800184a:	687b      	ldr	r3, [r7, #4]
}
 800184c:	4618      	mov	r0, r3
 800184e:	3710      	adds	r7, #16
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	200003d0 	.word	0x200003d0

08001858 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	setbuf(stdout, NULL);
 800185c:	4b32      	ldr	r3, [pc, #200]	@ (8001928 <main+0xd0>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	2100      	movs	r1, #0
 8001864:	4618      	mov	r0, r3
 8001866:	f008 fb27 	bl	8009eb8 <setbuf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800186a:	f000 fdca 	bl	8002402 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800186e:	f000 f877 	bl	8001960 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001872:	f000 fa5b 	bl	8001d2c <MX_GPIO_Init>
  MX_I2C1_Init();
 8001876:	f000 f8bf 	bl	80019f8 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 800187a:	f000 fa0b 	bl	8001c94 <MX_USART2_UART_Init>
  MX_TIM7_Init();
 800187e:	f000 f97f 	bl	8001b80 <MX_TIM7_Init>
  MX_TIM6_Init();
 8001882:	f000 f947 	bl	8001b14 <MX_TIM6_Init>
  MX_TIM4_Init();
 8001886:	f000 f8f7 	bl	8001a78 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 800188a:	f000 f9b7 	bl	8001bfc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("u\r\n");
 800188e:	4827      	ldr	r0, [pc, #156]	@ (800192c <main+0xd4>)
 8001890:	f008 fb0a 	bl	8009ea8 <puts>
  if(BNO055_Initialize_Fusion() == false){
 8001894:	f7ff fc4e 	bl	8001134 <BNO055_Initialize_Fusion>
 8001898:	4603      	mov	r3, r0
 800189a:	f083 0301 	eor.w	r3, r3, #1
 800189e:	b2db      	uxtb	r3, r3
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d003      	beq.n	80018ac <main+0x54>
    	  printf("false");
 80018a4:	4822      	ldr	r0, [pc, #136]	@ (8001930 <main+0xd8>)
 80018a6:	f008 fa97 	bl	8009dd8 <iprintf>
 80018aa:	e002      	b.n	80018b2 <main+0x5a>
      }else{
    	  printf("Ok");
 80018ac:	4821      	ldr	r0, [pc, #132]	@ (8001934 <main+0xdc>)
 80018ae:	f008 fa93 	bl	8009dd8 <iprintf>
      }
  HAL_TIM_Base_Start_IT(&htim6);
 80018b2:	4821      	ldr	r0, [pc, #132]	@ (8001938 <main+0xe0>)
 80018b4:	f003 fdfc 	bl	80054b0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 80018b8:	4820      	ldr	r0, [pc, #128]	@ (800193c <main+0xe4>)
 80018ba:	f003 fdf9 	bl	80054b0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 80018be:	4820      	ldr	r0, [pc, #128]	@ (8001940 <main+0xe8>)
 80018c0:	f003 fdf6 	bl	80054b0 <HAL_TIM_Base_Start_IT>
  A4988_Initialize();
 80018c4:	f7ff fd1a 	bl	80012fc <A4988_Initialize>
  HAL_UART_Transmit(&huart1,reset_buffer,sizeof(reset_buffer),0xFFFF);
 80018c8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80018cc:	2204      	movs	r2, #4
 80018ce:	491d      	ldr	r1, [pc, #116]	@ (8001944 <main+0xec>)
 80018d0:	481d      	ldr	r0, [pc, #116]	@ (8001948 <main+0xf0>)
 80018d2:	f004 fb19 	bl	8005f08 <HAL_UART_Transmit>
  HAL_UART_Receive_IT(&huart1, buffer, 1);
 80018d6:	2201      	movs	r2, #1
 80018d8:	491c      	ldr	r1, [pc, #112]	@ (800194c <main+0xf4>)
 80018da:	481b      	ldr	r0, [pc, #108]	@ (8001948 <main+0xf0>)
 80018dc:	f004 fba2 	bl	8006024 <HAL_UART_Receive_IT>
  printf("o\r\n");
 80018e0:	481b      	ldr	r0, [pc, #108]	@ (8001950 <main+0xf8>)
 80018e2:	f008 fae1 	bl	8009ea8 <puts>
  //A4988_MSCHANGE(0x07);
  HAL_GPIO_WritePin(MDDIR_GPIO_Port, MDDIR_Pin, GPIO_PIN_RESET);
 80018e6:	2200      	movs	r2, #0
 80018e8:	2180      	movs	r1, #128	@ 0x80
 80018ea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018ee:	f001 f9a1 	bl	8002c34 <HAL_GPIO_WritePin>
//	  HAL_Delay(200);
//	  HAL_GPIO_WritePin(MDSTEP_GPIO_Port,MDSTEP_Pin,GPIO_PIN_RESET);
//	  //HAL_GPIO_TogglePin(MDDIR_GPIO_Port, MDDIR_Pin);
//	  HAL_Delay(200);
//	  printf("HEllo\r\n");
	  sprintf(angle_buffer, "a%f\r\n", tangle);
 80018f2:	4b18      	ldr	r3, [pc, #96]	@ (8001954 <main+0xfc>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4618      	mov	r0, r3
 80018f8:	f7fe fe4e 	bl	8000598 <__aeabi_f2d>
 80018fc:	4602      	mov	r2, r0
 80018fe:	460b      	mov	r3, r1
 8001900:	4915      	ldr	r1, [pc, #84]	@ (8001958 <main+0x100>)
 8001902:	4816      	ldr	r0, [pc, #88]	@ (800195c <main+0x104>)
 8001904:	f008 fb94 	bl	800a030 <siprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t*)angle_buffer, strlen(angle_buffer), 0xFFFF);
 8001908:	4814      	ldr	r0, [pc, #80]	@ (800195c <main+0x104>)
 800190a:	f7fe fcd9 	bl	80002c0 <strlen>
 800190e:	4603      	mov	r3, r0
 8001910:	b29a      	uxth	r2, r3
 8001912:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001916:	4911      	ldr	r1, [pc, #68]	@ (800195c <main+0x104>)
 8001918:	480b      	ldr	r0, [pc, #44]	@ (8001948 <main+0xf0>)
 800191a:	f004 faf5 	bl	8005f08 <HAL_UART_Transmit>
//		  printf("reset\r\n");
//		  HAL_NVIC_SystemReset();
//	  }else{
//		  state++;
//	  }
	  HAL_Delay(100);
 800191e:	2064      	movs	r0, #100	@ 0x64
 8001920:	f000 fde0 	bl	80024e4 <HAL_Delay>
	  sprintf(angle_buffer, "a%f\r\n", tangle);
 8001924:	bf00      	nop
 8001926:	e7e4      	b.n	80018f2 <main+0x9a>
 8001928:	20000194 	.word	0x20000194
 800192c:	0800ccf4 	.word	0x0800ccf4
 8001930:	0800ccf8 	.word	0x0800ccf8
 8001934:	0800cd00 	.word	0x0800cd00
 8001938:	200002a4 	.word	0x200002a4
 800193c:	20000258 	.word	0x20000258
 8001940:	200002f0 	.word	0x200002f0
 8001944:	0800cd18 	.word	0x0800cd18
 8001948:	2000033c 	.word	0x2000033c
 800194c:	200004f8 	.word	0x200004f8
 8001950:	0800cd04 	.word	0x0800cd04
 8001954:	200004ec 	.word	0x200004ec
 8001958:	0800cd08 	.word	0x0800cd08
 800195c:	20000464 	.word	0x20000464

08001960 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b094      	sub	sp, #80	@ 0x50
 8001964:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001966:	f107 0318 	add.w	r3, r7, #24
 800196a:	2238      	movs	r2, #56	@ 0x38
 800196c:	2100      	movs	r1, #0
 800196e:	4618      	mov	r0, r3
 8001970:	f008 fc56 	bl	800a220 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001974:	1d3b      	adds	r3, r7, #4
 8001976:	2200      	movs	r2, #0
 8001978:	601a      	str	r2, [r3, #0]
 800197a:	605a      	str	r2, [r3, #4]
 800197c:	609a      	str	r2, [r3, #8]
 800197e:	60da      	str	r2, [r3, #12]
 8001980:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001982:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001986:	f002 fd69 	bl	800445c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800198a:	2302      	movs	r3, #2
 800198c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800198e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001992:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001994:	2340      	movs	r3, #64	@ 0x40
 8001996:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001998:	2302      	movs	r3, #2
 800199a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800199c:	2302      	movs	r3, #2
 800199e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80019a0:	2301      	movs	r3, #1
 80019a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 10;
 80019a4:	230a      	movs	r3, #10
 80019a6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80019a8:	2302      	movs	r3, #2
 80019aa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80019ac:	2302      	movs	r3, #2
 80019ae:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80019b0:	2302      	movs	r3, #2
 80019b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019b4:	f107 0318 	add.w	r3, r7, #24
 80019b8:	4618      	mov	r0, r3
 80019ba:	f002 fe03 	bl	80045c4 <HAL_RCC_OscConfig>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d001      	beq.n	80019c8 <SystemClock_Config+0x68>
  {
    Error_Handler();
 80019c4:	f000 fa08 	bl	8001dd8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019c8:	230f      	movs	r3, #15
 80019ca:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019cc:	2303      	movs	r3, #3
 80019ce:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019d0:	2300      	movs	r3, #0
 80019d2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80019d4:	2300      	movs	r3, #0
 80019d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019d8:	2300      	movs	r3, #0
 80019da:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80019dc:	1d3b      	adds	r3, r7, #4
 80019de:	2102      	movs	r1, #2
 80019e0:	4618      	mov	r0, r3
 80019e2:	f003 f901 	bl	8004be8 <HAL_RCC_ClockConfig>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d001      	beq.n	80019f0 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80019ec:	f000 f9f4 	bl	8001dd8 <Error_Handler>
  }
}
 80019f0:	bf00      	nop
 80019f2:	3750      	adds	r7, #80	@ 0x50
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}

080019f8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80019fc:	4b1b      	ldr	r3, [pc, #108]	@ (8001a6c <MX_I2C1_Init+0x74>)
 80019fe:	4a1c      	ldr	r2, [pc, #112]	@ (8001a70 <MX_I2C1_Init+0x78>)
 8001a00:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10D19CE4;
 8001a02:	4b1a      	ldr	r3, [pc, #104]	@ (8001a6c <MX_I2C1_Init+0x74>)
 8001a04:	4a1b      	ldr	r2, [pc, #108]	@ (8001a74 <MX_I2C1_Init+0x7c>)
 8001a06:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001a08:	4b18      	ldr	r3, [pc, #96]	@ (8001a6c <MX_I2C1_Init+0x74>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a0e:	4b17      	ldr	r3, [pc, #92]	@ (8001a6c <MX_I2C1_Init+0x74>)
 8001a10:	2201      	movs	r2, #1
 8001a12:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a14:	4b15      	ldr	r3, [pc, #84]	@ (8001a6c <MX_I2C1_Init+0x74>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001a1a:	4b14      	ldr	r3, [pc, #80]	@ (8001a6c <MX_I2C1_Init+0x74>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001a20:	4b12      	ldr	r3, [pc, #72]	@ (8001a6c <MX_I2C1_Init+0x74>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a26:	4b11      	ldr	r3, [pc, #68]	@ (8001a6c <MX_I2C1_Init+0x74>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a2c:	4b0f      	ldr	r3, [pc, #60]	@ (8001a6c <MX_I2C1_Init+0x74>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a32:	480e      	ldr	r0, [pc, #56]	@ (8001a6c <MX_I2C1_Init+0x74>)
 8001a34:	f001 f916 	bl	8002c64 <HAL_I2C_Init>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001a3e:	f000 f9cb 	bl	8001dd8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001a42:	2100      	movs	r1, #0
 8001a44:	4809      	ldr	r0, [pc, #36]	@ (8001a6c <MX_I2C1_Init+0x74>)
 8001a46:	f002 fc71 	bl	800432c <HAL_I2CEx_ConfigAnalogFilter>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d001      	beq.n	8001a54 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001a50:	f000 f9c2 	bl	8001dd8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001a54:	2100      	movs	r1, #0
 8001a56:	4805      	ldr	r0, [pc, #20]	@ (8001a6c <MX_I2C1_Init+0x74>)
 8001a58:	f002 fcb3 	bl	80043c2 <HAL_I2CEx_ConfigDigitalFilter>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d001      	beq.n	8001a66 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001a62:	f000 f9b9 	bl	8001dd8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001a66:	bf00      	nop
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	20000204 	.word	0x20000204
 8001a70:	40005400 	.word	0x40005400
 8001a74:	10d19ce4 	.word	0x10d19ce4

08001a78 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b088      	sub	sp, #32
 8001a7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a7e:	f107 0310 	add.w	r3, r7, #16
 8001a82:	2200      	movs	r2, #0
 8001a84:	601a      	str	r2, [r3, #0]
 8001a86:	605a      	str	r2, [r3, #4]
 8001a88:	609a      	str	r2, [r3, #8]
 8001a8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a8c:	1d3b      	adds	r3, r7, #4
 8001a8e:	2200      	movs	r2, #0
 8001a90:	601a      	str	r2, [r3, #0]
 8001a92:	605a      	str	r2, [r3, #4]
 8001a94:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001a96:	4b1d      	ldr	r3, [pc, #116]	@ (8001b0c <MX_TIM4_Init+0x94>)
 8001a98:	4a1d      	ldr	r2, [pc, #116]	@ (8001b10 <MX_TIM4_Init+0x98>)
 8001a9a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7999;
 8001a9c:	4b1b      	ldr	r3, [pc, #108]	@ (8001b0c <MX_TIM4_Init+0x94>)
 8001a9e:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8001aa2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aa4:	4b19      	ldr	r3, [pc, #100]	@ (8001b0c <MX_TIM4_Init+0x94>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 99;
 8001aaa:	4b18      	ldr	r3, [pc, #96]	@ (8001b0c <MX_TIM4_Init+0x94>)
 8001aac:	2263      	movs	r2, #99	@ 0x63
 8001aae:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ab0:	4b16      	ldr	r3, [pc, #88]	@ (8001b0c <MX_TIM4_Init+0x94>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ab6:	4b15      	ldr	r3, [pc, #84]	@ (8001b0c <MX_TIM4_Init+0x94>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001abc:	4813      	ldr	r0, [pc, #76]	@ (8001b0c <MX_TIM4_Init+0x94>)
 8001abe:	f003 fc9f 	bl	8005400 <HAL_TIM_Base_Init>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d001      	beq.n	8001acc <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8001ac8:	f000 f986 	bl	8001dd8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001acc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ad0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001ad2:	f107 0310 	add.w	r3, r7, #16
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	480c      	ldr	r0, [pc, #48]	@ (8001b0c <MX_TIM4_Init+0x94>)
 8001ada:	f003 fea3 	bl	8005824 <HAL_TIM_ConfigClockSource>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d001      	beq.n	8001ae8 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001ae4:	f000 f978 	bl	8001dd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001aec:	2300      	movs	r3, #0
 8001aee:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001af0:	1d3b      	adds	r3, r7, #4
 8001af2:	4619      	mov	r1, r3
 8001af4:	4805      	ldr	r0, [pc, #20]	@ (8001b0c <MX_TIM4_Init+0x94>)
 8001af6:	f004 f8ef 	bl	8005cd8 <HAL_TIMEx_MasterConfigSynchronization>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d001      	beq.n	8001b04 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001b00:	f000 f96a 	bl	8001dd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001b04:	bf00      	nop
 8001b06:	3720      	adds	r7, #32
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	20000258 	.word	0x20000258
 8001b10:	40000800 	.word	0x40000800

08001b14 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b084      	sub	sp, #16
 8001b18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b1a:	1d3b      	adds	r3, r7, #4
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	601a      	str	r2, [r3, #0]
 8001b20:	605a      	str	r2, [r3, #4]
 8001b22:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001b24:	4b14      	ldr	r3, [pc, #80]	@ (8001b78 <MX_TIM6_Init+0x64>)
 8001b26:	4a15      	ldr	r2, [pc, #84]	@ (8001b7c <MX_TIM6_Init+0x68>)
 8001b28:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7999;
 8001b2a:	4b13      	ldr	r3, [pc, #76]	@ (8001b78 <MX_TIM6_Init+0x64>)
 8001b2c:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8001b30:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b32:	4b11      	ldr	r3, [pc, #68]	@ (8001b78 <MX_TIM6_Init+0x64>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9;
 8001b38:	4b0f      	ldr	r3, [pc, #60]	@ (8001b78 <MX_TIM6_Init+0x64>)
 8001b3a:	2209      	movs	r2, #9
 8001b3c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b3e:	4b0e      	ldr	r3, [pc, #56]	@ (8001b78 <MX_TIM6_Init+0x64>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001b44:	480c      	ldr	r0, [pc, #48]	@ (8001b78 <MX_TIM6_Init+0x64>)
 8001b46:	f003 fc5b 	bl	8005400 <HAL_TIM_Base_Init>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d001      	beq.n	8001b54 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001b50:	f000 f942 	bl	8001dd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b54:	2300      	movs	r3, #0
 8001b56:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001b5c:	1d3b      	adds	r3, r7, #4
 8001b5e:	4619      	mov	r1, r3
 8001b60:	4805      	ldr	r0, [pc, #20]	@ (8001b78 <MX_TIM6_Init+0x64>)
 8001b62:	f004 f8b9 	bl	8005cd8 <HAL_TIMEx_MasterConfigSynchronization>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d001      	beq.n	8001b70 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001b6c:	f000 f934 	bl	8001dd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001b70:	bf00      	nop
 8001b72:	3710      	adds	r7, #16
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	200002a4 	.word	0x200002a4
 8001b7c:	40001000 	.word	0x40001000

08001b80 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b084      	sub	sp, #16
 8001b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_Init 0 */


  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b86:	1d3b      	adds	r3, r7, #4
 8001b88:	2200      	movs	r2, #0
 8001b8a:	601a      	str	r2, [r3, #0]
 8001b8c:	605a      	str	r2, [r3, #4]
 8001b8e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001b90:	4b17      	ldr	r3, [pc, #92]	@ (8001bf0 <MX_TIM7_Init+0x70>)
 8001b92:	4a18      	ldr	r2, [pc, #96]	@ (8001bf4 <MX_TIM7_Init+0x74>)
 8001b94:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 7999;
 8001b96:	4b16      	ldr	r3, [pc, #88]	@ (8001bf0 <MX_TIM7_Init+0x70>)
 8001b98:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8001b9c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b9e:	4b14      	ldr	r3, [pc, #80]	@ (8001bf0 <MX_TIM7_Init+0x70>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 8001ba4:	4b12      	ldr	r3, [pc, #72]	@ (8001bf0 <MX_TIM7_Init+0x70>)
 8001ba6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001baa:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bac:	4b10      	ldr	r3, [pc, #64]	@ (8001bf0 <MX_TIM7_Init+0x70>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001bb2:	480f      	ldr	r0, [pc, #60]	@ (8001bf0 <MX_TIM7_Init+0x70>)
 8001bb4:	f003 fc24 	bl	8005400 <HAL_TIM_Base_Init>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d001      	beq.n	8001bc2 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8001bbe:	f000 f90b 	bl	8001dd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001bca:	1d3b      	adds	r3, r7, #4
 8001bcc:	4619      	mov	r1, r3
 8001bce:	4808      	ldr	r0, [pc, #32]	@ (8001bf0 <MX_TIM7_Init+0x70>)
 8001bd0:	f004 f882 	bl	8005cd8 <HAL_TIMEx_MasterConfigSynchronization>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d001      	beq.n	8001bde <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 8001bda:	f000 f8fd 	bl	8001dd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */
  htim7.Init.Period = stepInterval;
 8001bde:	4b06      	ldr	r3, [pc, #24]	@ (8001bf8 <MX_TIM7_Init+0x78>)
 8001be0:	881b      	ldrh	r3, [r3, #0]
 8001be2:	461a      	mov	r2, r3
 8001be4:	4b02      	ldr	r3, [pc, #8]	@ (8001bf0 <MX_TIM7_Init+0x70>)
 8001be6:	60da      	str	r2, [r3, #12]
  /* USER CODE END TIM7_Init 2 */

}
 8001be8:	bf00      	nop
 8001bea:	3710      	adds	r7, #16
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	200002f0 	.word	0x200002f0
 8001bf4:	40001400 	.word	0x40001400
 8001bf8:	200004e4 	.word	0x200004e4

08001bfc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001c00:	4b22      	ldr	r3, [pc, #136]	@ (8001c8c <MX_USART1_UART_Init+0x90>)
 8001c02:	4a23      	ldr	r2, [pc, #140]	@ (8001c90 <MX_USART1_UART_Init+0x94>)
 8001c04:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001c06:	4b21      	ldr	r3, [pc, #132]	@ (8001c8c <MX_USART1_UART_Init+0x90>)
 8001c08:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001c0c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c0e:	4b1f      	ldr	r3, [pc, #124]	@ (8001c8c <MX_USART1_UART_Init+0x90>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001c14:	4b1d      	ldr	r3, [pc, #116]	@ (8001c8c <MX_USART1_UART_Init+0x90>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001c1a:	4b1c      	ldr	r3, [pc, #112]	@ (8001c8c <MX_USART1_UART_Init+0x90>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001c20:	4b1a      	ldr	r3, [pc, #104]	@ (8001c8c <MX_USART1_UART_Init+0x90>)
 8001c22:	220c      	movs	r2, #12
 8001c24:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c26:	4b19      	ldr	r3, [pc, #100]	@ (8001c8c <MX_USART1_UART_Init+0x90>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c2c:	4b17      	ldr	r3, [pc, #92]	@ (8001c8c <MX_USART1_UART_Init+0x90>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c32:	4b16      	ldr	r3, [pc, #88]	@ (8001c8c <MX_USART1_UART_Init+0x90>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001c38:	4b14      	ldr	r3, [pc, #80]	@ (8001c8c <MX_USART1_UART_Init+0x90>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c3e:	4b13      	ldr	r3, [pc, #76]	@ (8001c8c <MX_USART1_UART_Init+0x90>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001c44:	4811      	ldr	r0, [pc, #68]	@ (8001c8c <MX_USART1_UART_Init+0x90>)
 8001c46:	f004 f90f 	bl	8005e68 <HAL_UART_Init>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d001      	beq.n	8001c54 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001c50:	f000 f8c2 	bl	8001dd8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c54:	2100      	movs	r1, #0
 8001c56:	480d      	ldr	r0, [pc, #52]	@ (8001c8c <MX_USART1_UART_Init+0x90>)
 8001c58:	f006 fa59 	bl	800810e <HAL_UARTEx_SetTxFifoThreshold>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d001      	beq.n	8001c66 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001c62:	f000 f8b9 	bl	8001dd8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c66:	2100      	movs	r1, #0
 8001c68:	4808      	ldr	r0, [pc, #32]	@ (8001c8c <MX_USART1_UART_Init+0x90>)
 8001c6a:	f006 fa8e 	bl	800818a <HAL_UARTEx_SetRxFifoThreshold>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d001      	beq.n	8001c78 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001c74:	f000 f8b0 	bl	8001dd8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001c78:	4804      	ldr	r0, [pc, #16]	@ (8001c8c <MX_USART1_UART_Init+0x90>)
 8001c7a:	f006 fa0f 	bl	800809c <HAL_UARTEx_DisableFifoMode>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d001      	beq.n	8001c88 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001c84:	f000 f8a8 	bl	8001dd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001c88:	bf00      	nop
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	2000033c 	.word	0x2000033c
 8001c90:	40013800 	.word	0x40013800

08001c94 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c98:	4b22      	ldr	r3, [pc, #136]	@ (8001d24 <MX_USART2_UART_Init+0x90>)
 8001c9a:	4a23      	ldr	r2, [pc, #140]	@ (8001d28 <MX_USART2_UART_Init+0x94>)
 8001c9c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001c9e:	4b21      	ldr	r3, [pc, #132]	@ (8001d24 <MX_USART2_UART_Init+0x90>)
 8001ca0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ca4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001ca6:	4b1f      	ldr	r3, [pc, #124]	@ (8001d24 <MX_USART2_UART_Init+0x90>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001cac:	4b1d      	ldr	r3, [pc, #116]	@ (8001d24 <MX_USART2_UART_Init+0x90>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001cb2:	4b1c      	ldr	r3, [pc, #112]	@ (8001d24 <MX_USART2_UART_Init+0x90>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001cb8:	4b1a      	ldr	r3, [pc, #104]	@ (8001d24 <MX_USART2_UART_Init+0x90>)
 8001cba:	220c      	movs	r2, #12
 8001cbc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cbe:	4b19      	ldr	r3, [pc, #100]	@ (8001d24 <MX_USART2_UART_Init+0x90>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cc4:	4b17      	ldr	r3, [pc, #92]	@ (8001d24 <MX_USART2_UART_Init+0x90>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001cca:	4b16      	ldr	r3, [pc, #88]	@ (8001d24 <MX_USART2_UART_Init+0x90>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001cd0:	4b14      	ldr	r3, [pc, #80]	@ (8001d24 <MX_USART2_UART_Init+0x90>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001cd6:	4b13      	ldr	r3, [pc, #76]	@ (8001d24 <MX_USART2_UART_Init+0x90>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001cdc:	4811      	ldr	r0, [pc, #68]	@ (8001d24 <MX_USART2_UART_Init+0x90>)
 8001cde:	f004 f8c3 	bl	8005e68 <HAL_UART_Init>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d001      	beq.n	8001cec <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001ce8:	f000 f876 	bl	8001dd8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001cec:	2100      	movs	r1, #0
 8001cee:	480d      	ldr	r0, [pc, #52]	@ (8001d24 <MX_USART2_UART_Init+0x90>)
 8001cf0:	f006 fa0d 	bl	800810e <HAL_UARTEx_SetTxFifoThreshold>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d001      	beq.n	8001cfe <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001cfa:	f000 f86d 	bl	8001dd8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001cfe:	2100      	movs	r1, #0
 8001d00:	4808      	ldr	r0, [pc, #32]	@ (8001d24 <MX_USART2_UART_Init+0x90>)
 8001d02:	f006 fa42 	bl	800818a <HAL_UARTEx_SetRxFifoThreshold>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d001      	beq.n	8001d10 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001d0c:	f000 f864 	bl	8001dd8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001d10:	4804      	ldr	r0, [pc, #16]	@ (8001d24 <MX_USART2_UART_Init+0x90>)
 8001d12:	f006 f9c3 	bl	800809c <HAL_UARTEx_DisableFifoMode>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d001      	beq.n	8001d20 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001d1c:	f000 f85c 	bl	8001dd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d20:	bf00      	nop
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	200003d0 	.word	0x200003d0
 8001d28:	40004400 	.word	0x40004400

08001d2c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b088      	sub	sp, #32
 8001d30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d32:	f107 030c 	add.w	r3, r7, #12
 8001d36:	2200      	movs	r2, #0
 8001d38:	601a      	str	r2, [r3, #0]
 8001d3a:	605a      	str	r2, [r3, #4]
 8001d3c:	609a      	str	r2, [r3, #8]
 8001d3e:	60da      	str	r2, [r3, #12]
 8001d40:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d42:	4b23      	ldr	r3, [pc, #140]	@ (8001dd0 <MX_GPIO_Init+0xa4>)
 8001d44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d46:	4a22      	ldr	r2, [pc, #136]	@ (8001dd0 <MX_GPIO_Init+0xa4>)
 8001d48:	f043 0301 	orr.w	r3, r3, #1
 8001d4c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d4e:	4b20      	ldr	r3, [pc, #128]	@ (8001dd0 <MX_GPIO_Init+0xa4>)
 8001d50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d52:	f003 0301 	and.w	r3, r3, #1
 8001d56:	60bb      	str	r3, [r7, #8]
 8001d58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d5a:	4b1d      	ldr	r3, [pc, #116]	@ (8001dd0 <MX_GPIO_Init+0xa4>)
 8001d5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d5e:	4a1c      	ldr	r2, [pc, #112]	@ (8001dd0 <MX_GPIO_Init+0xa4>)
 8001d60:	f043 0302 	orr.w	r3, r3, #2
 8001d64:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d66:	4b1a      	ldr	r3, [pc, #104]	@ (8001dd0 <MX_GPIO_Init+0xa4>)
 8001d68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d6a:	f003 0302 	and.w	r3, r3, #2
 8001d6e:	607b      	str	r3, [r7, #4]
 8001d70:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MDDIR_Pin|MDMS1_Pin|MDEN_Pin|MDSTEP_Pin, GPIO_PIN_RESET);
 8001d72:	2200      	movs	r2, #0
 8001d74:	f44f 51cc 	mov.w	r1, #6528	@ 0x1980
 8001d78:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d7c:	f000 ff5a 	bl	8002c34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MDMS3_Pin|MDMS2_Pin, GPIO_PIN_RESET);
 8001d80:	2200      	movs	r2, #0
 8001d82:	2141      	movs	r1, #65	@ 0x41
 8001d84:	4813      	ldr	r0, [pc, #76]	@ (8001dd4 <MX_GPIO_Init+0xa8>)
 8001d86:	f000 ff55 	bl	8002c34 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : MDDIR_Pin MDMS1_Pin MDEN_Pin MDSTEP_Pin */
  GPIO_InitStruct.Pin = MDDIR_Pin|MDMS1_Pin|MDEN_Pin|MDSTEP_Pin;
 8001d8a:	f44f 53cc 	mov.w	r3, #6528	@ 0x1980
 8001d8e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d90:	2301      	movs	r3, #1
 8001d92:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d94:	2300      	movs	r3, #0
 8001d96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d9c:	f107 030c 	add.w	r3, r7, #12
 8001da0:	4619      	mov	r1, r3
 8001da2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001da6:	f000 fdc3 	bl	8002930 <HAL_GPIO_Init>

  /*Configure GPIO pins : MDMS3_Pin MDMS2_Pin */
  GPIO_InitStruct.Pin = MDMS3_Pin|MDMS2_Pin;
 8001daa:	2341      	movs	r3, #65	@ 0x41
 8001dac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dae:	2301      	movs	r3, #1
 8001db0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db2:	2300      	movs	r3, #0
 8001db4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001db6:	2300      	movs	r3, #0
 8001db8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dba:	f107 030c 	add.w	r3, r7, #12
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	4804      	ldr	r0, [pc, #16]	@ (8001dd4 <MX_GPIO_Init+0xa8>)
 8001dc2:	f000 fdb5 	bl	8002930 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001dc6:	bf00      	nop
 8001dc8:	3720      	adds	r7, #32
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	40021000 	.word	0x40021000
 8001dd4:	48000400 	.word	0x48000400

08001dd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ddc:	b672      	cpsid	i
}
 8001dde:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  printf("Error\r\n");
 8001de0:	4801      	ldr	r0, [pc, #4]	@ (8001de8 <Error_Handler+0x10>)
 8001de2:	f008 f861 	bl	8009ea8 <puts>
 8001de6:	e7fb      	b.n	8001de0 <Error_Handler+0x8>
 8001de8:	0800cd10 	.word	0x0800cd10

08001dec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b082      	sub	sp, #8
 8001df0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001df2:	4b0f      	ldr	r3, [pc, #60]	@ (8001e30 <HAL_MspInit+0x44>)
 8001df4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001df6:	4a0e      	ldr	r2, [pc, #56]	@ (8001e30 <HAL_MspInit+0x44>)
 8001df8:	f043 0301 	orr.w	r3, r3, #1
 8001dfc:	6613      	str	r3, [r2, #96]	@ 0x60
 8001dfe:	4b0c      	ldr	r3, [pc, #48]	@ (8001e30 <HAL_MspInit+0x44>)
 8001e00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e02:	f003 0301 	and.w	r3, r3, #1
 8001e06:	607b      	str	r3, [r7, #4]
 8001e08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e0a:	4b09      	ldr	r3, [pc, #36]	@ (8001e30 <HAL_MspInit+0x44>)
 8001e0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e0e:	4a08      	ldr	r2, [pc, #32]	@ (8001e30 <HAL_MspInit+0x44>)
 8001e10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e14:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e16:	4b06      	ldr	r3, [pc, #24]	@ (8001e30 <HAL_MspInit+0x44>)
 8001e18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e1e:	603b      	str	r3, [r7, #0]
 8001e20:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001e22:	f002 fbbf 	bl	80045a4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e26:	bf00      	nop
 8001e28:	3708      	adds	r7, #8
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	40021000 	.word	0x40021000

08001e34 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b09c      	sub	sp, #112	@ 0x70
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e3c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001e40:	2200      	movs	r2, #0
 8001e42:	601a      	str	r2, [r3, #0]
 8001e44:	605a      	str	r2, [r3, #4]
 8001e46:	609a      	str	r2, [r3, #8]
 8001e48:	60da      	str	r2, [r3, #12]
 8001e4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e4c:	f107 0318 	add.w	r3, r7, #24
 8001e50:	2244      	movs	r2, #68	@ 0x44
 8001e52:	2100      	movs	r1, #0
 8001e54:	4618      	mov	r0, r3
 8001e56:	f008 f9e3 	bl	800a220 <memset>
  if(hi2c->Instance==I2C1)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a35      	ldr	r2, [pc, #212]	@ (8001f34 <HAL_I2C_MspInit+0x100>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d163      	bne.n	8001f2c <HAL_I2C_MspInit+0xf8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001e64:	2340      	movs	r3, #64	@ 0x40
 8001e66:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e6c:	f107 0318 	add.w	r3, r7, #24
 8001e70:	4618      	mov	r0, r3
 8001e72:	f003 f8d5 	bl	8005020 <HAL_RCCEx_PeriphCLKConfig>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d001      	beq.n	8001e80 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001e7c:	f7ff ffac 	bl	8001dd8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e80:	4b2d      	ldr	r3, [pc, #180]	@ (8001f38 <HAL_I2C_MspInit+0x104>)
 8001e82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e84:	4a2c      	ldr	r2, [pc, #176]	@ (8001f38 <HAL_I2C_MspInit+0x104>)
 8001e86:	f043 0301 	orr.w	r3, r3, #1
 8001e8a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e8c:	4b2a      	ldr	r3, [pc, #168]	@ (8001f38 <HAL_I2C_MspInit+0x104>)
 8001e8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e90:	f003 0301 	and.w	r3, r3, #1
 8001e94:	617b      	str	r3, [r7, #20]
 8001e96:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e98:	4b27      	ldr	r3, [pc, #156]	@ (8001f38 <HAL_I2C_MspInit+0x104>)
 8001e9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e9c:	4a26      	ldr	r2, [pc, #152]	@ (8001f38 <HAL_I2C_MspInit+0x104>)
 8001e9e:	f043 0302 	orr.w	r3, r3, #2
 8001ea2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ea4:	4b24      	ldr	r3, [pc, #144]	@ (8001f38 <HAL_I2C_MspInit+0x104>)
 8001ea6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ea8:	f003 0302 	and.w	r3, r3, #2
 8001eac:	613b      	str	r3, [r7, #16]
 8001eae:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001eb0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001eb4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001eb6:	2312      	movs	r3, #18
 8001eb8:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ec2:	2304      	movs	r3, #4
 8001ec4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ec6:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001eca:	4619      	mov	r1, r3
 8001ecc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ed0:	f000 fd2e 	bl	8002930 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001ed4:	2380      	movs	r3, #128	@ 0x80
 8001ed6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ed8:	2312      	movs	r3, #18
 8001eda:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001edc:	2300      	movs	r3, #0
 8001ede:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ee4:	2304      	movs	r3, #4
 8001ee6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ee8:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001eec:	4619      	mov	r1, r3
 8001eee:	4813      	ldr	r0, [pc, #76]	@ (8001f3c <HAL_I2C_MspInit+0x108>)
 8001ef0:	f000 fd1e 	bl	8002930 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ef4:	4b10      	ldr	r3, [pc, #64]	@ (8001f38 <HAL_I2C_MspInit+0x104>)
 8001ef6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ef8:	4a0f      	ldr	r2, [pc, #60]	@ (8001f38 <HAL_I2C_MspInit+0x104>)
 8001efa:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001efe:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f00:	4b0d      	ldr	r3, [pc, #52]	@ (8001f38 <HAL_I2C_MspInit+0x104>)
 8001f02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f04:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f08:	60fb      	str	r3, [r7, #12]
 8001f0a:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	2100      	movs	r1, #0
 8001f10:	201f      	movs	r0, #31
 8001f12:	f000 fbfa 	bl	800270a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001f16:	201f      	movs	r0, #31
 8001f18:	f000 fc11 	bl	800273e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	2100      	movs	r1, #0
 8001f20:	2020      	movs	r0, #32
 8001f22:	f000 fbf2 	bl	800270a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001f26:	2020      	movs	r0, #32
 8001f28:	f000 fc09 	bl	800273e <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001f2c:	bf00      	nop
 8001f2e:	3770      	adds	r7, #112	@ 0x70
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	40005400 	.word	0x40005400
 8001f38:	40021000 	.word	0x40021000
 8001f3c:	48000400 	.word	0x48000400

08001f40 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b086      	sub	sp, #24
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a27      	ldr	r2, [pc, #156]	@ (8001fec <HAL_TIM_Base_MspInit+0xac>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d114      	bne.n	8001f7c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001f52:	4b27      	ldr	r3, [pc, #156]	@ (8001ff0 <HAL_TIM_Base_MspInit+0xb0>)
 8001f54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f56:	4a26      	ldr	r2, [pc, #152]	@ (8001ff0 <HAL_TIM_Base_MspInit+0xb0>)
 8001f58:	f043 0304 	orr.w	r3, r3, #4
 8001f5c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f5e:	4b24      	ldr	r3, [pc, #144]	@ (8001ff0 <HAL_TIM_Base_MspInit+0xb0>)
 8001f60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f62:	f003 0304 	and.w	r3, r3, #4
 8001f66:	617b      	str	r3, [r7, #20]
 8001f68:	697b      	ldr	r3, [r7, #20]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	2100      	movs	r1, #0
 8001f6e:	201e      	movs	r0, #30
 8001f70:	f000 fbcb 	bl	800270a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001f74:	201e      	movs	r0, #30
 8001f76:	f000 fbe2 	bl	800273e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8001f7a:	e032      	b.n	8001fe2 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM6)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a1c      	ldr	r2, [pc, #112]	@ (8001ff4 <HAL_TIM_Base_MspInit+0xb4>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d114      	bne.n	8001fb0 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001f86:	4b1a      	ldr	r3, [pc, #104]	@ (8001ff0 <HAL_TIM_Base_MspInit+0xb0>)
 8001f88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f8a:	4a19      	ldr	r2, [pc, #100]	@ (8001ff0 <HAL_TIM_Base_MspInit+0xb0>)
 8001f8c:	f043 0310 	orr.w	r3, r3, #16
 8001f90:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f92:	4b17      	ldr	r3, [pc, #92]	@ (8001ff0 <HAL_TIM_Base_MspInit+0xb0>)
 8001f94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f96:	f003 0310 	and.w	r3, r3, #16
 8001f9a:	613b      	str	r3, [r7, #16]
 8001f9c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 2, 0);
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	2102      	movs	r1, #2
 8001fa2:	2036      	movs	r0, #54	@ 0x36
 8001fa4:	f000 fbb1 	bl	800270a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001fa8:	2036      	movs	r0, #54	@ 0x36
 8001faa:	f000 fbc8 	bl	800273e <HAL_NVIC_EnableIRQ>
}
 8001fae:	e018      	b.n	8001fe2 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM7)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a10      	ldr	r2, [pc, #64]	@ (8001ff8 <HAL_TIM_Base_MspInit+0xb8>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d113      	bne.n	8001fe2 <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001fba:	4b0d      	ldr	r3, [pc, #52]	@ (8001ff0 <HAL_TIM_Base_MspInit+0xb0>)
 8001fbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fbe:	4a0c      	ldr	r2, [pc, #48]	@ (8001ff0 <HAL_TIM_Base_MspInit+0xb0>)
 8001fc0:	f043 0320 	orr.w	r3, r3, #32
 8001fc4:	6593      	str	r3, [r2, #88]	@ 0x58
 8001fc6:	4b0a      	ldr	r3, [pc, #40]	@ (8001ff0 <HAL_TIM_Base_MspInit+0xb0>)
 8001fc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fca:	f003 0320 	and.w	r3, r3, #32
 8001fce:	60fb      	str	r3, [r7, #12]
 8001fd0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 1, 0);
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	2101      	movs	r1, #1
 8001fd6:	2037      	movs	r0, #55	@ 0x37
 8001fd8:	f000 fb97 	bl	800270a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001fdc:	2037      	movs	r0, #55	@ 0x37
 8001fde:	f000 fbae 	bl	800273e <HAL_NVIC_EnableIRQ>
}
 8001fe2:	bf00      	nop
 8001fe4:	3718      	adds	r7, #24
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	40000800 	.word	0x40000800
 8001ff0:	40021000 	.word	0x40021000
 8001ff4:	40001000 	.word	0x40001000
 8001ff8:	40001400 	.word	0x40001400

08001ffc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b09c      	sub	sp, #112	@ 0x70
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002004:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002008:	2200      	movs	r2, #0
 800200a:	601a      	str	r2, [r3, #0]
 800200c:	605a      	str	r2, [r3, #4]
 800200e:	609a      	str	r2, [r3, #8]
 8002010:	60da      	str	r2, [r3, #12]
 8002012:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002014:	f107 0318 	add.w	r3, r7, #24
 8002018:	2244      	movs	r2, #68	@ 0x44
 800201a:	2100      	movs	r1, #0
 800201c:	4618      	mov	r0, r3
 800201e:	f008 f8ff 	bl	800a220 <memset>
  if(huart->Instance==USART1)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a46      	ldr	r2, [pc, #280]	@ (8002140 <HAL_UART_MspInit+0x144>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d140      	bne.n	80020ae <HAL_UART_MspInit+0xb2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800202c:	2301      	movs	r3, #1
 800202e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002030:	2300      	movs	r3, #0
 8002032:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002034:	f107 0318 	add.w	r3, r7, #24
 8002038:	4618      	mov	r0, r3
 800203a:	f002 fff1 	bl	8005020 <HAL_RCCEx_PeriphCLKConfig>
 800203e:	4603      	mov	r3, r0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d001      	beq.n	8002048 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002044:	f7ff fec8 	bl	8001dd8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002048:	4b3e      	ldr	r3, [pc, #248]	@ (8002144 <HAL_UART_MspInit+0x148>)
 800204a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800204c:	4a3d      	ldr	r2, [pc, #244]	@ (8002144 <HAL_UART_MspInit+0x148>)
 800204e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002052:	6613      	str	r3, [r2, #96]	@ 0x60
 8002054:	4b3b      	ldr	r3, [pc, #236]	@ (8002144 <HAL_UART_MspInit+0x148>)
 8002056:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002058:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800205c:	617b      	str	r3, [r7, #20]
 800205e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002060:	4b38      	ldr	r3, [pc, #224]	@ (8002144 <HAL_UART_MspInit+0x148>)
 8002062:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002064:	4a37      	ldr	r2, [pc, #220]	@ (8002144 <HAL_UART_MspInit+0x148>)
 8002066:	f043 0301 	orr.w	r3, r3, #1
 800206a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800206c:	4b35      	ldr	r3, [pc, #212]	@ (8002144 <HAL_UART_MspInit+0x148>)
 800206e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002070:	f003 0301 	and.w	r3, r3, #1
 8002074:	613b      	str	r3, [r7, #16]
 8002076:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002078:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800207c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800207e:	2302      	movs	r3, #2
 8002080:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002082:	2300      	movs	r3, #0
 8002084:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002086:	2300      	movs	r3, #0
 8002088:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800208a:	2307      	movs	r3, #7
 800208c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800208e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002092:	4619      	mov	r1, r3
 8002094:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002098:	f000 fc4a 	bl	8002930 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800209c:	2200      	movs	r2, #0
 800209e:	2100      	movs	r1, #0
 80020a0:	2025      	movs	r0, #37	@ 0x25
 80020a2:	f000 fb32 	bl	800270a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80020a6:	2025      	movs	r0, #37	@ 0x25
 80020a8:	f000 fb49 	bl	800273e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80020ac:	e043      	b.n	8002136 <HAL_UART_MspInit+0x13a>
  else if(huart->Instance==USART2)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a25      	ldr	r2, [pc, #148]	@ (8002148 <HAL_UART_MspInit+0x14c>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d13e      	bne.n	8002136 <HAL_UART_MspInit+0x13a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80020b8:	2302      	movs	r3, #2
 80020ba:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80020bc:	2300      	movs	r3, #0
 80020be:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020c0:	f107 0318 	add.w	r3, r7, #24
 80020c4:	4618      	mov	r0, r3
 80020c6:	f002 ffab 	bl	8005020 <HAL_RCCEx_PeriphCLKConfig>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d001      	beq.n	80020d4 <HAL_UART_MspInit+0xd8>
      Error_Handler();
 80020d0:	f7ff fe82 	bl	8001dd8 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80020d4:	4b1b      	ldr	r3, [pc, #108]	@ (8002144 <HAL_UART_MspInit+0x148>)
 80020d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020d8:	4a1a      	ldr	r2, [pc, #104]	@ (8002144 <HAL_UART_MspInit+0x148>)
 80020da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80020de:	6593      	str	r3, [r2, #88]	@ 0x58
 80020e0:	4b18      	ldr	r3, [pc, #96]	@ (8002144 <HAL_UART_MspInit+0x148>)
 80020e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020e8:	60fb      	str	r3, [r7, #12]
 80020ea:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020ec:	4b15      	ldr	r3, [pc, #84]	@ (8002144 <HAL_UART_MspInit+0x148>)
 80020ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020f0:	4a14      	ldr	r2, [pc, #80]	@ (8002144 <HAL_UART_MspInit+0x148>)
 80020f2:	f043 0301 	orr.w	r3, r3, #1
 80020f6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020f8:	4b12      	ldr	r3, [pc, #72]	@ (8002144 <HAL_UART_MspInit+0x148>)
 80020fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020fc:	f003 0301 	and.w	r3, r3, #1
 8002100:	60bb      	str	r3, [r7, #8]
 8002102:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002104:	230c      	movs	r3, #12
 8002106:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002108:	2302      	movs	r3, #2
 800210a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210c:	2300      	movs	r3, #0
 800210e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002110:	2300      	movs	r3, #0
 8002112:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002114:	2307      	movs	r3, #7
 8002116:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002118:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800211c:	4619      	mov	r1, r3
 800211e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002122:	f000 fc05 	bl	8002930 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002126:	2200      	movs	r2, #0
 8002128:	2100      	movs	r1, #0
 800212a:	2026      	movs	r0, #38	@ 0x26
 800212c:	f000 faed 	bl	800270a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002130:	2026      	movs	r0, #38	@ 0x26
 8002132:	f000 fb04 	bl	800273e <HAL_NVIC_EnableIRQ>
}
 8002136:	bf00      	nop
 8002138:	3770      	adds	r7, #112	@ 0x70
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	40013800 	.word	0x40013800
 8002144:	40021000 	.word	0x40021000
 8002148:	40004400 	.word	0x40004400

0800214c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800214c:	b480      	push	{r7}
 800214e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002150:	bf00      	nop
 8002152:	e7fd      	b.n	8002150 <NMI_Handler+0x4>

08002154 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002154:	b480      	push	{r7}
 8002156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002158:	bf00      	nop
 800215a:	e7fd      	b.n	8002158 <HardFault_Handler+0x4>

0800215c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002160:	bf00      	nop
 8002162:	e7fd      	b.n	8002160 <MemManage_Handler+0x4>

08002164 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002164:	b480      	push	{r7}
 8002166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002168:	bf00      	nop
 800216a:	e7fd      	b.n	8002168 <BusFault_Handler+0x4>

0800216c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800216c:	b480      	push	{r7}
 800216e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002170:	bf00      	nop
 8002172:	e7fd      	b.n	8002170 <UsageFault_Handler+0x4>

08002174 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002178:	bf00      	nop
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr

08002182 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002182:	b480      	push	{r7}
 8002184:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002186:	bf00      	nop
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr

08002190 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002190:	b480      	push	{r7}
 8002192:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002194:	bf00      	nop
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr

0800219e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800219e:	b580      	push	{r7, lr}
 80021a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021a2:	f000 f981 	bl	80024a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021a6:	bf00      	nop
 80021a8:	bd80      	pop	{r7, pc}
	...

080021ac <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80021b0:	4802      	ldr	r0, [pc, #8]	@ (80021bc <TIM4_IRQHandler+0x10>)
 80021b2:	f003 f9e7 	bl	8005584 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80021b6:	bf00      	nop
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	20000258 	.word	0x20000258

080021c0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80021c4:	4802      	ldr	r0, [pc, #8]	@ (80021d0 <I2C1_EV_IRQHandler+0x10>)
 80021c6:	f001 f817 	bl	80031f8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80021ca:	bf00      	nop
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	20000204 	.word	0x20000204

080021d4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80021d8:	4802      	ldr	r0, [pc, #8]	@ (80021e4 <I2C1_ER_IRQHandler+0x10>)
 80021da:	f001 f827 	bl	800322c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80021de:	bf00      	nop
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	20000204 	.word	0x20000204

080021e8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80021ec:	4802      	ldr	r0, [pc, #8]	@ (80021f8 <USART1_IRQHandler+0x10>)
 80021ee:	f004 f873 	bl	80062d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80021f2:	bf00      	nop
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	2000033c 	.word	0x2000033c

080021fc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002200:	4802      	ldr	r0, [pc, #8]	@ (800220c <USART2_IRQHandler+0x10>)
 8002202:	f004 f869 	bl	80062d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002206:	bf00      	nop
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	200003d0 	.word	0x200003d0

08002210 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002214:	4802      	ldr	r0, [pc, #8]	@ (8002220 <TIM6_DAC_IRQHandler+0x10>)
 8002216:	f003 f9b5 	bl	8005584 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800221a:	bf00      	nop
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	200002a4 	.word	0x200002a4

08002224 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002228:	4802      	ldr	r0, [pc, #8]	@ (8002234 <TIM7_IRQHandler+0x10>)
 800222a:	f003 f9ab 	bl	8005584 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800222e:	bf00      	nop
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	200002f0 	.word	0x200002f0

08002238 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002238:	b480      	push	{r7}
 800223a:	af00      	add	r7, sp, #0
  return 1;
 800223c:	2301      	movs	r3, #1
}
 800223e:	4618      	mov	r0, r3
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr

08002248 <_kill>:

int _kill(int pid, int sig)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b082      	sub	sp, #8
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
 8002250:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002252:	f008 f849 	bl	800a2e8 <__errno>
 8002256:	4603      	mov	r3, r0
 8002258:	2216      	movs	r2, #22
 800225a:	601a      	str	r2, [r3, #0]
  return -1;
 800225c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002260:	4618      	mov	r0, r3
 8002262:	3708      	adds	r7, #8
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}

08002268 <_exit>:

void _exit (int status)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b082      	sub	sp, #8
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002270:	f04f 31ff 	mov.w	r1, #4294967295
 8002274:	6878      	ldr	r0, [r7, #4]
 8002276:	f7ff ffe7 	bl	8002248 <_kill>
  while (1) {}    /* Make sure we hang here */
 800227a:	bf00      	nop
 800227c:	e7fd      	b.n	800227a <_exit+0x12>

0800227e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800227e:	b580      	push	{r7, lr}
 8002280:	b086      	sub	sp, #24
 8002282:	af00      	add	r7, sp, #0
 8002284:	60f8      	str	r0, [r7, #12]
 8002286:	60b9      	str	r1, [r7, #8]
 8002288:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800228a:	2300      	movs	r3, #0
 800228c:	617b      	str	r3, [r7, #20]
 800228e:	e00a      	b.n	80022a6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002290:	f3af 8000 	nop.w
 8002294:	4601      	mov	r1, r0
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	1c5a      	adds	r2, r3, #1
 800229a:	60ba      	str	r2, [r7, #8]
 800229c:	b2ca      	uxtb	r2, r1
 800229e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	3301      	adds	r3, #1
 80022a4:	617b      	str	r3, [r7, #20]
 80022a6:	697a      	ldr	r2, [r7, #20]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	429a      	cmp	r2, r3
 80022ac:	dbf0      	blt.n	8002290 <_read+0x12>
  }

  return len;
 80022ae:	687b      	ldr	r3, [r7, #4]
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	3718      	adds	r7, #24
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}

080022b8 <_close>:
  }
  return len;
}

int _close(int file)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b083      	sub	sp, #12
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80022c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	370c      	adds	r7, #12
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr

080022d0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
 80022d8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80022e0:	605a      	str	r2, [r3, #4]
  return 0;
 80022e2:	2300      	movs	r3, #0
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	370c      	adds	r7, #12
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr

080022f0 <_isatty>:

int _isatty(int file)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b083      	sub	sp, #12
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80022f8:	2301      	movs	r3, #1
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	370c      	adds	r7, #12
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr

08002306 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002306:	b480      	push	{r7}
 8002308:	b085      	sub	sp, #20
 800230a:	af00      	add	r7, sp, #0
 800230c:	60f8      	str	r0, [r7, #12]
 800230e:	60b9      	str	r1, [r7, #8]
 8002310:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002312:	2300      	movs	r3, #0
}
 8002314:	4618      	mov	r0, r3
 8002316:	3714      	adds	r7, #20
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr

08002320 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b086      	sub	sp, #24
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002328:	4a14      	ldr	r2, [pc, #80]	@ (800237c <_sbrk+0x5c>)
 800232a:	4b15      	ldr	r3, [pc, #84]	@ (8002380 <_sbrk+0x60>)
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002334:	4b13      	ldr	r3, [pc, #76]	@ (8002384 <_sbrk+0x64>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d102      	bne.n	8002342 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800233c:	4b11      	ldr	r3, [pc, #68]	@ (8002384 <_sbrk+0x64>)
 800233e:	4a12      	ldr	r2, [pc, #72]	@ (8002388 <_sbrk+0x68>)
 8002340:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002342:	4b10      	ldr	r3, [pc, #64]	@ (8002384 <_sbrk+0x64>)
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	4413      	add	r3, r2
 800234a:	693a      	ldr	r2, [r7, #16]
 800234c:	429a      	cmp	r2, r3
 800234e:	d207      	bcs.n	8002360 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002350:	f007 ffca 	bl	800a2e8 <__errno>
 8002354:	4603      	mov	r3, r0
 8002356:	220c      	movs	r2, #12
 8002358:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800235a:	f04f 33ff 	mov.w	r3, #4294967295
 800235e:	e009      	b.n	8002374 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002360:	4b08      	ldr	r3, [pc, #32]	@ (8002384 <_sbrk+0x64>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002366:	4b07      	ldr	r3, [pc, #28]	@ (8002384 <_sbrk+0x64>)
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	4413      	add	r3, r2
 800236e:	4a05      	ldr	r2, [pc, #20]	@ (8002384 <_sbrk+0x64>)
 8002370:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002372:	68fb      	ldr	r3, [r7, #12]
}
 8002374:	4618      	mov	r0, r3
 8002376:	3718      	adds	r7, #24
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}
 800237c:	20008000 	.word	0x20008000
 8002380:	00000400 	.word	0x00000400
 8002384:	20000560 	.word	0x20000560
 8002388:	200006b8 	.word	0x200006b8

0800238c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800238c:	b480      	push	{r7}
 800238e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002390:	4b06      	ldr	r3, [pc, #24]	@ (80023ac <SystemInit+0x20>)
 8002392:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002396:	4a05      	ldr	r2, [pc, #20]	@ (80023ac <SystemInit+0x20>)
 8002398:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800239c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023a0:	bf00      	nop
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr
 80023aa:	bf00      	nop
 80023ac:	e000ed00 	.word	0xe000ed00

080023b0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80023b0:	480d      	ldr	r0, [pc, #52]	@ (80023e8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80023b2:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80023b4:	f7ff ffea 	bl	800238c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80023b8:	480c      	ldr	r0, [pc, #48]	@ (80023ec <LoopForever+0x6>)
  ldr r1, =_edata
 80023ba:	490d      	ldr	r1, [pc, #52]	@ (80023f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80023bc:	4a0d      	ldr	r2, [pc, #52]	@ (80023f4 <LoopForever+0xe>)
  movs r3, #0
 80023be:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80023c0:	e002      	b.n	80023c8 <LoopCopyDataInit>

080023c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023c6:	3304      	adds	r3, #4

080023c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023cc:	d3f9      	bcc.n	80023c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023ce:	4a0a      	ldr	r2, [pc, #40]	@ (80023f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80023d0:	4c0a      	ldr	r4, [pc, #40]	@ (80023fc <LoopForever+0x16>)
  movs r3, #0
 80023d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023d4:	e001      	b.n	80023da <LoopFillZerobss>

080023d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023d8:	3204      	adds	r2, #4

080023da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023dc:	d3fb      	bcc.n	80023d6 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 80023de:	f007 ff89 	bl	800a2f4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80023e2:	f7ff fa39 	bl	8001858 <main>

080023e6 <LoopForever>:

LoopForever:
    b LoopForever
 80023e6:	e7fe      	b.n	80023e6 <LoopForever>
  ldr   r0, =_estack
 80023e8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80023ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023f0:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 80023f4:	0800d198 	.word	0x0800d198
  ldr r2, =_sbss
 80023f8:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 80023fc:	200006b4 	.word	0x200006b4

08002400 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002400:	e7fe      	b.n	8002400 <ADC1_2_IRQHandler>

08002402 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002402:	b580      	push	{r7, lr}
 8002404:	b082      	sub	sp, #8
 8002406:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002408:	2300      	movs	r3, #0
 800240a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800240c:	2003      	movs	r0, #3
 800240e:	f000 f971 	bl	80026f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002412:	200f      	movs	r0, #15
 8002414:	f000 f80e 	bl	8002434 <HAL_InitTick>
 8002418:	4603      	mov	r3, r0
 800241a:	2b00      	cmp	r3, #0
 800241c:	d002      	beq.n	8002424 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	71fb      	strb	r3, [r7, #7]
 8002422:	e001      	b.n	8002428 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002424:	f7ff fce2 	bl	8001dec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002428:	79fb      	ldrb	r3, [r7, #7]

}
 800242a:	4618      	mov	r0, r3
 800242c:	3708      	adds	r7, #8
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
	...

08002434 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b084      	sub	sp, #16
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800243c:	2300      	movs	r3, #0
 800243e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002440:	4b16      	ldr	r3, [pc, #88]	@ (800249c <HAL_InitTick+0x68>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d022      	beq.n	800248e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002448:	4b15      	ldr	r3, [pc, #84]	@ (80024a0 <HAL_InitTick+0x6c>)
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	4b13      	ldr	r3, [pc, #76]	@ (800249c <HAL_InitTick+0x68>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002454:	fbb1 f3f3 	udiv	r3, r1, r3
 8002458:	fbb2 f3f3 	udiv	r3, r2, r3
 800245c:	4618      	mov	r0, r3
 800245e:	f000 f980 	bl	8002762 <HAL_SYSTICK_Config>
 8002462:	4603      	mov	r3, r0
 8002464:	2b00      	cmp	r3, #0
 8002466:	d10f      	bne.n	8002488 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2b0f      	cmp	r3, #15
 800246c:	d809      	bhi.n	8002482 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800246e:	2200      	movs	r2, #0
 8002470:	6879      	ldr	r1, [r7, #4]
 8002472:	f04f 30ff 	mov.w	r0, #4294967295
 8002476:	f000 f948 	bl	800270a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800247a:	4a0a      	ldr	r2, [pc, #40]	@ (80024a4 <HAL_InitTick+0x70>)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6013      	str	r3, [r2, #0]
 8002480:	e007      	b.n	8002492 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	73fb      	strb	r3, [r7, #15]
 8002486:	e004      	b.n	8002492 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	73fb      	strb	r3, [r7, #15]
 800248c:	e001      	b.n	8002492 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002492:	7bfb      	ldrb	r3, [r7, #15]
}
 8002494:	4618      	mov	r0, r3
 8002496:	3710      	adds	r7, #16
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}
 800249c:	20000018 	.word	0x20000018
 80024a0:	20000010 	.word	0x20000010
 80024a4:	20000014 	.word	0x20000014

080024a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024a8:	b480      	push	{r7}
 80024aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024ac:	4b05      	ldr	r3, [pc, #20]	@ (80024c4 <HAL_IncTick+0x1c>)
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	4b05      	ldr	r3, [pc, #20]	@ (80024c8 <HAL_IncTick+0x20>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4413      	add	r3, r2
 80024b6:	4a03      	ldr	r2, [pc, #12]	@ (80024c4 <HAL_IncTick+0x1c>)
 80024b8:	6013      	str	r3, [r2, #0]
}
 80024ba:	bf00      	nop
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr
 80024c4:	20000564 	.word	0x20000564
 80024c8:	20000018 	.word	0x20000018

080024cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024cc:	b480      	push	{r7}
 80024ce:	af00      	add	r7, sp, #0
  return uwTick;
 80024d0:	4b03      	ldr	r3, [pc, #12]	@ (80024e0 <HAL_GetTick+0x14>)
 80024d2:	681b      	ldr	r3, [r3, #0]
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr
 80024de:	bf00      	nop
 80024e0:	20000564 	.word	0x20000564

080024e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b084      	sub	sp, #16
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024ec:	f7ff ffee 	bl	80024cc <HAL_GetTick>
 80024f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024fc:	d004      	beq.n	8002508 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80024fe:	4b09      	ldr	r3, [pc, #36]	@ (8002524 <HAL_Delay+0x40>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	68fa      	ldr	r2, [r7, #12]
 8002504:	4413      	add	r3, r2
 8002506:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002508:	bf00      	nop
 800250a:	f7ff ffdf 	bl	80024cc <HAL_GetTick>
 800250e:	4602      	mov	r2, r0
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	1ad3      	subs	r3, r2, r3
 8002514:	68fa      	ldr	r2, [r7, #12]
 8002516:	429a      	cmp	r2, r3
 8002518:	d8f7      	bhi.n	800250a <HAL_Delay+0x26>
  {
  }
}
 800251a:	bf00      	nop
 800251c:	bf00      	nop
 800251e:	3710      	adds	r7, #16
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}
 8002524:	20000018 	.word	0x20000018

08002528 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002528:	b480      	push	{r7}
 800252a:	b085      	sub	sp, #20
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	f003 0307 	and.w	r3, r3, #7
 8002536:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002538:	4b0c      	ldr	r3, [pc, #48]	@ (800256c <__NVIC_SetPriorityGrouping+0x44>)
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800253e:	68ba      	ldr	r2, [r7, #8]
 8002540:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002544:	4013      	ands	r3, r2
 8002546:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002550:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002554:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002558:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800255a:	4a04      	ldr	r2, [pc, #16]	@ (800256c <__NVIC_SetPriorityGrouping+0x44>)
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	60d3      	str	r3, [r2, #12]
}
 8002560:	bf00      	nop
 8002562:	3714      	adds	r7, #20
 8002564:	46bd      	mov	sp, r7
 8002566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256a:	4770      	bx	lr
 800256c:	e000ed00 	.word	0xe000ed00

08002570 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002570:	b480      	push	{r7}
 8002572:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002574:	4b04      	ldr	r3, [pc, #16]	@ (8002588 <__NVIC_GetPriorityGrouping+0x18>)
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	0a1b      	lsrs	r3, r3, #8
 800257a:	f003 0307 	and.w	r3, r3, #7
}
 800257e:	4618      	mov	r0, r3
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr
 8002588:	e000ed00 	.word	0xe000ed00

0800258c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800258c:	b480      	push	{r7}
 800258e:	b083      	sub	sp, #12
 8002590:	af00      	add	r7, sp, #0
 8002592:	4603      	mov	r3, r0
 8002594:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002596:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800259a:	2b00      	cmp	r3, #0
 800259c:	db0b      	blt.n	80025b6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800259e:	79fb      	ldrb	r3, [r7, #7]
 80025a0:	f003 021f 	and.w	r2, r3, #31
 80025a4:	4907      	ldr	r1, [pc, #28]	@ (80025c4 <__NVIC_EnableIRQ+0x38>)
 80025a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025aa:	095b      	lsrs	r3, r3, #5
 80025ac:	2001      	movs	r0, #1
 80025ae:	fa00 f202 	lsl.w	r2, r0, r2
 80025b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80025b6:	bf00      	nop
 80025b8:	370c      	adds	r7, #12
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr
 80025c2:	bf00      	nop
 80025c4:	e000e100 	.word	0xe000e100

080025c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b083      	sub	sp, #12
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	4603      	mov	r3, r0
 80025d0:	6039      	str	r1, [r7, #0]
 80025d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	db0a      	blt.n	80025f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	b2da      	uxtb	r2, r3
 80025e0:	490c      	ldr	r1, [pc, #48]	@ (8002614 <__NVIC_SetPriority+0x4c>)
 80025e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025e6:	0112      	lsls	r2, r2, #4
 80025e8:	b2d2      	uxtb	r2, r2
 80025ea:	440b      	add	r3, r1
 80025ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025f0:	e00a      	b.n	8002608 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	b2da      	uxtb	r2, r3
 80025f6:	4908      	ldr	r1, [pc, #32]	@ (8002618 <__NVIC_SetPriority+0x50>)
 80025f8:	79fb      	ldrb	r3, [r7, #7]
 80025fa:	f003 030f 	and.w	r3, r3, #15
 80025fe:	3b04      	subs	r3, #4
 8002600:	0112      	lsls	r2, r2, #4
 8002602:	b2d2      	uxtb	r2, r2
 8002604:	440b      	add	r3, r1
 8002606:	761a      	strb	r2, [r3, #24]
}
 8002608:	bf00      	nop
 800260a:	370c      	adds	r7, #12
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr
 8002614:	e000e100 	.word	0xe000e100
 8002618:	e000ed00 	.word	0xe000ed00

0800261c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800261c:	b480      	push	{r7}
 800261e:	b089      	sub	sp, #36	@ 0x24
 8002620:	af00      	add	r7, sp, #0
 8002622:	60f8      	str	r0, [r7, #12]
 8002624:	60b9      	str	r1, [r7, #8]
 8002626:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	f003 0307 	and.w	r3, r3, #7
 800262e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	f1c3 0307 	rsb	r3, r3, #7
 8002636:	2b04      	cmp	r3, #4
 8002638:	bf28      	it	cs
 800263a:	2304      	movcs	r3, #4
 800263c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	3304      	adds	r3, #4
 8002642:	2b06      	cmp	r3, #6
 8002644:	d902      	bls.n	800264c <NVIC_EncodePriority+0x30>
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	3b03      	subs	r3, #3
 800264a:	e000      	b.n	800264e <NVIC_EncodePriority+0x32>
 800264c:	2300      	movs	r3, #0
 800264e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002650:	f04f 32ff 	mov.w	r2, #4294967295
 8002654:	69bb      	ldr	r3, [r7, #24]
 8002656:	fa02 f303 	lsl.w	r3, r2, r3
 800265a:	43da      	mvns	r2, r3
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	401a      	ands	r2, r3
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002664:	f04f 31ff 	mov.w	r1, #4294967295
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	fa01 f303 	lsl.w	r3, r1, r3
 800266e:	43d9      	mvns	r1, r3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002674:	4313      	orrs	r3, r2
         );
}
 8002676:	4618      	mov	r0, r3
 8002678:	3724      	adds	r7, #36	@ 0x24
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr
	...

08002684 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8002684:	b480      	push	{r7}
 8002686:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002688:	f3bf 8f4f 	dsb	sy
}
 800268c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800268e:	4b06      	ldr	r3, [pc, #24]	@ (80026a8 <__NVIC_SystemReset+0x24>)
 8002690:	68db      	ldr	r3, [r3, #12]
 8002692:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002696:	4904      	ldr	r1, [pc, #16]	@ (80026a8 <__NVIC_SystemReset+0x24>)
 8002698:	4b04      	ldr	r3, [pc, #16]	@ (80026ac <__NVIC_SystemReset+0x28>)
 800269a:	4313      	orrs	r3, r2
 800269c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800269e:	f3bf 8f4f 	dsb	sy
}
 80026a2:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80026a4:	bf00      	nop
 80026a6:	e7fd      	b.n	80026a4 <__NVIC_SystemReset+0x20>
 80026a8:	e000ed00 	.word	0xe000ed00
 80026ac:	05fa0004 	.word	0x05fa0004

080026b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b082      	sub	sp, #8
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	3b01      	subs	r3, #1
 80026bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80026c0:	d301      	bcc.n	80026c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026c2:	2301      	movs	r3, #1
 80026c4:	e00f      	b.n	80026e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026c6:	4a0a      	ldr	r2, [pc, #40]	@ (80026f0 <SysTick_Config+0x40>)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	3b01      	subs	r3, #1
 80026cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026ce:	210f      	movs	r1, #15
 80026d0:	f04f 30ff 	mov.w	r0, #4294967295
 80026d4:	f7ff ff78 	bl	80025c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026d8:	4b05      	ldr	r3, [pc, #20]	@ (80026f0 <SysTick_Config+0x40>)
 80026da:	2200      	movs	r2, #0
 80026dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026de:	4b04      	ldr	r3, [pc, #16]	@ (80026f0 <SysTick_Config+0x40>)
 80026e0:	2207      	movs	r2, #7
 80026e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026e4:	2300      	movs	r3, #0
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3708      	adds	r7, #8
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	e000e010 	.word	0xe000e010

080026f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b082      	sub	sp, #8
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026fc:	6878      	ldr	r0, [r7, #4]
 80026fe:	f7ff ff13 	bl	8002528 <__NVIC_SetPriorityGrouping>
}
 8002702:	bf00      	nop
 8002704:	3708      	adds	r7, #8
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}

0800270a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800270a:	b580      	push	{r7, lr}
 800270c:	b086      	sub	sp, #24
 800270e:	af00      	add	r7, sp, #0
 8002710:	4603      	mov	r3, r0
 8002712:	60b9      	str	r1, [r7, #8]
 8002714:	607a      	str	r2, [r7, #4]
 8002716:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002718:	f7ff ff2a 	bl	8002570 <__NVIC_GetPriorityGrouping>
 800271c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800271e:	687a      	ldr	r2, [r7, #4]
 8002720:	68b9      	ldr	r1, [r7, #8]
 8002722:	6978      	ldr	r0, [r7, #20]
 8002724:	f7ff ff7a 	bl	800261c <NVIC_EncodePriority>
 8002728:	4602      	mov	r2, r0
 800272a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800272e:	4611      	mov	r1, r2
 8002730:	4618      	mov	r0, r3
 8002732:	f7ff ff49 	bl	80025c8 <__NVIC_SetPriority>
}
 8002736:	bf00      	nop
 8002738:	3718      	adds	r7, #24
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}

0800273e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800273e:	b580      	push	{r7, lr}
 8002740:	b082      	sub	sp, #8
 8002742:	af00      	add	r7, sp, #0
 8002744:	4603      	mov	r3, r0
 8002746:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002748:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800274c:	4618      	mov	r0, r3
 800274e:	f7ff ff1d 	bl	800258c <__NVIC_EnableIRQ>
}
 8002752:	bf00      	nop
 8002754:	3708      	adds	r7, #8
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}

0800275a <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800275a:	b580      	push	{r7, lr}
 800275c:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800275e:	f7ff ff91 	bl	8002684 <__NVIC_SystemReset>

08002762 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002762:	b580      	push	{r7, lr}
 8002764:	b082      	sub	sp, #8
 8002766:	af00      	add	r7, sp, #0
 8002768:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	f7ff ffa0 	bl	80026b0 <SysTick_Config>
 8002770:	4603      	mov	r3, r0
}
 8002772:	4618      	mov	r0, r3
 8002774:	3708      	adds	r7, #8
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}

0800277a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800277a:	b480      	push	{r7}
 800277c:	b085      	sub	sp, #20
 800277e:	af00      	add	r7, sp, #0
 8002780:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002782:	2300      	movs	r3, #0
 8002784:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800278c:	b2db      	uxtb	r3, r3
 800278e:	2b02      	cmp	r3, #2
 8002790:	d005      	beq.n	800279e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2204      	movs	r2, #4
 8002796:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	73fb      	strb	r3, [r7, #15]
 800279c:	e037      	b.n	800280e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f022 020e 	bic.w	r2, r2, #14
 80027ac:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027b8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80027bc:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f022 0201 	bic.w	r2, r2, #1
 80027cc:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027d2:	f003 021f 	and.w	r2, r3, #31
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027da:	2101      	movs	r1, #1
 80027dc:	fa01 f202 	lsl.w	r2, r1, r2
 80027e0:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027e6:	687a      	ldr	r2, [r7, #4]
 80027e8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80027ea:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d00c      	beq.n	800280e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027fe:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002802:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002808:	687a      	ldr	r2, [r7, #4]
 800280a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800280c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2201      	movs	r2, #1
 8002812:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2200      	movs	r2, #0
 800281a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800281e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002820:	4618      	mov	r0, r3
 8002822:	3714      	adds	r7, #20
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr

0800282c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b084      	sub	sp, #16
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002834:	2300      	movs	r3, #0
 8002836:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800283e:	b2db      	uxtb	r3, r3
 8002840:	2b02      	cmp	r3, #2
 8002842:	d00d      	beq.n	8002860 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2204      	movs	r2, #4
 8002848:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2201      	movs	r2, #1
 800284e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2200      	movs	r2, #0
 8002856:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	73fb      	strb	r3, [r7, #15]
 800285e:	e047      	b.n	80028f0 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f022 020e 	bic.w	r2, r2, #14
 800286e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f022 0201 	bic.w	r2, r2, #1
 800287e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800288a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800288e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002894:	f003 021f 	and.w	r2, r3, #31
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800289c:	2101      	movs	r1, #1
 800289e:	fa01 f202 	lsl.w	r2, r1, r2
 80028a2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028a8:	687a      	ldr	r2, [r7, #4]
 80028aa:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80028ac:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d00c      	beq.n	80028d0 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028c0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80028c4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028ca:	687a      	ldr	r2, [r7, #4]
 80028cc:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80028ce:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2201      	movs	r2, #1
 80028d4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2200      	movs	r2, #0
 80028dc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d003      	beq.n	80028f0 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028ec:	6878      	ldr	r0, [r7, #4]
 80028ee:	4798      	blx	r3
    }
  }
  return status;
 80028f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3710      	adds	r7, #16
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}

080028fa <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80028fa:	b480      	push	{r7}
 80028fc:	b083      	sub	sp, #12
 80028fe:	af00      	add	r7, sp, #0
 8002900:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002908:	b2db      	uxtb	r3, r3
}
 800290a:	4618      	mov	r0, r3
 800290c:	370c      	adds	r7, #12
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr

08002916 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002916:	b480      	push	{r7}
 8002918:	b083      	sub	sp, #12
 800291a:	af00      	add	r7, sp, #0
 800291c:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 8002922:	4618      	mov	r0, r3
 8002924:	370c      	adds	r7, #12
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr
	...

08002930 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002930:	b480      	push	{r7}
 8002932:	b087      	sub	sp, #28
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
 8002938:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800293a:	2300      	movs	r3, #0
 800293c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800293e:	e15a      	b.n	8002bf6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	2101      	movs	r1, #1
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	fa01 f303 	lsl.w	r3, r1, r3
 800294c:	4013      	ands	r3, r2
 800294e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	2b00      	cmp	r3, #0
 8002954:	f000 814c 	beq.w	8002bf0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	f003 0303 	and.w	r3, r3, #3
 8002960:	2b01      	cmp	r3, #1
 8002962:	d005      	beq.n	8002970 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800296c:	2b02      	cmp	r3, #2
 800296e:	d130      	bne.n	80029d2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	005b      	lsls	r3, r3, #1
 800297a:	2203      	movs	r2, #3
 800297c:	fa02 f303 	lsl.w	r3, r2, r3
 8002980:	43db      	mvns	r3, r3
 8002982:	693a      	ldr	r2, [r7, #16]
 8002984:	4013      	ands	r3, r2
 8002986:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	68da      	ldr	r2, [r3, #12]
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	005b      	lsls	r3, r3, #1
 8002990:	fa02 f303 	lsl.w	r3, r2, r3
 8002994:	693a      	ldr	r2, [r7, #16]
 8002996:	4313      	orrs	r3, r2
 8002998:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	693a      	ldr	r2, [r7, #16]
 800299e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80029a6:	2201      	movs	r2, #1
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	fa02 f303 	lsl.w	r3, r2, r3
 80029ae:	43db      	mvns	r3, r3
 80029b0:	693a      	ldr	r2, [r7, #16]
 80029b2:	4013      	ands	r3, r2
 80029b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	091b      	lsrs	r3, r3, #4
 80029bc:	f003 0201 	and.w	r2, r3, #1
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	fa02 f303 	lsl.w	r3, r2, r3
 80029c6:	693a      	ldr	r2, [r7, #16]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	693a      	ldr	r2, [r7, #16]
 80029d0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	f003 0303 	and.w	r3, r3, #3
 80029da:	2b03      	cmp	r3, #3
 80029dc:	d017      	beq.n	8002a0e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	68db      	ldr	r3, [r3, #12]
 80029e2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	005b      	lsls	r3, r3, #1
 80029e8:	2203      	movs	r2, #3
 80029ea:	fa02 f303 	lsl.w	r3, r2, r3
 80029ee:	43db      	mvns	r3, r3
 80029f0:	693a      	ldr	r2, [r7, #16]
 80029f2:	4013      	ands	r3, r2
 80029f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	689a      	ldr	r2, [r3, #8]
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	005b      	lsls	r3, r3, #1
 80029fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002a02:	693a      	ldr	r2, [r7, #16]
 8002a04:	4313      	orrs	r3, r2
 8002a06:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	693a      	ldr	r2, [r7, #16]
 8002a0c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	f003 0303 	and.w	r3, r3, #3
 8002a16:	2b02      	cmp	r3, #2
 8002a18:	d123      	bne.n	8002a62 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	08da      	lsrs	r2, r3, #3
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	3208      	adds	r2, #8
 8002a22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a26:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	f003 0307 	and.w	r3, r3, #7
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	220f      	movs	r2, #15
 8002a32:	fa02 f303 	lsl.w	r3, r2, r3
 8002a36:	43db      	mvns	r3, r3
 8002a38:	693a      	ldr	r2, [r7, #16]
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	691a      	ldr	r2, [r3, #16]
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	f003 0307 	and.w	r3, r3, #7
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4e:	693a      	ldr	r2, [r7, #16]
 8002a50:	4313      	orrs	r3, r2
 8002a52:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	08da      	lsrs	r2, r3, #3
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	3208      	adds	r2, #8
 8002a5c:	6939      	ldr	r1, [r7, #16]
 8002a5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	005b      	lsls	r3, r3, #1
 8002a6c:	2203      	movs	r2, #3
 8002a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a72:	43db      	mvns	r3, r3
 8002a74:	693a      	ldr	r2, [r7, #16]
 8002a76:	4013      	ands	r3, r2
 8002a78:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	f003 0203 	and.w	r2, r3, #3
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	005b      	lsls	r3, r3, #1
 8002a86:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8a:	693a      	ldr	r2, [r7, #16]
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	693a      	ldr	r2, [r7, #16]
 8002a94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	f000 80a6 	beq.w	8002bf0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002aa4:	4b5b      	ldr	r3, [pc, #364]	@ (8002c14 <HAL_GPIO_Init+0x2e4>)
 8002aa6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002aa8:	4a5a      	ldr	r2, [pc, #360]	@ (8002c14 <HAL_GPIO_Init+0x2e4>)
 8002aaa:	f043 0301 	orr.w	r3, r3, #1
 8002aae:	6613      	str	r3, [r2, #96]	@ 0x60
 8002ab0:	4b58      	ldr	r3, [pc, #352]	@ (8002c14 <HAL_GPIO_Init+0x2e4>)
 8002ab2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ab4:	f003 0301 	and.w	r3, r3, #1
 8002ab8:	60bb      	str	r3, [r7, #8]
 8002aba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002abc:	4a56      	ldr	r2, [pc, #344]	@ (8002c18 <HAL_GPIO_Init+0x2e8>)
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	089b      	lsrs	r3, r3, #2
 8002ac2:	3302      	adds	r3, #2
 8002ac4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ac8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	f003 0303 	and.w	r3, r3, #3
 8002ad0:	009b      	lsls	r3, r3, #2
 8002ad2:	220f      	movs	r2, #15
 8002ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad8:	43db      	mvns	r3, r3
 8002ada:	693a      	ldr	r2, [r7, #16]
 8002adc:	4013      	ands	r3, r2
 8002ade:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002ae6:	d01f      	beq.n	8002b28 <HAL_GPIO_Init+0x1f8>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	4a4c      	ldr	r2, [pc, #304]	@ (8002c1c <HAL_GPIO_Init+0x2ec>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d019      	beq.n	8002b24 <HAL_GPIO_Init+0x1f4>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	4a4b      	ldr	r2, [pc, #300]	@ (8002c20 <HAL_GPIO_Init+0x2f0>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d013      	beq.n	8002b20 <HAL_GPIO_Init+0x1f0>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	4a4a      	ldr	r2, [pc, #296]	@ (8002c24 <HAL_GPIO_Init+0x2f4>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d00d      	beq.n	8002b1c <HAL_GPIO_Init+0x1ec>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	4a49      	ldr	r2, [pc, #292]	@ (8002c28 <HAL_GPIO_Init+0x2f8>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d007      	beq.n	8002b18 <HAL_GPIO_Init+0x1e8>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	4a48      	ldr	r2, [pc, #288]	@ (8002c2c <HAL_GPIO_Init+0x2fc>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d101      	bne.n	8002b14 <HAL_GPIO_Init+0x1e4>
 8002b10:	2305      	movs	r3, #5
 8002b12:	e00a      	b.n	8002b2a <HAL_GPIO_Init+0x1fa>
 8002b14:	2306      	movs	r3, #6
 8002b16:	e008      	b.n	8002b2a <HAL_GPIO_Init+0x1fa>
 8002b18:	2304      	movs	r3, #4
 8002b1a:	e006      	b.n	8002b2a <HAL_GPIO_Init+0x1fa>
 8002b1c:	2303      	movs	r3, #3
 8002b1e:	e004      	b.n	8002b2a <HAL_GPIO_Init+0x1fa>
 8002b20:	2302      	movs	r3, #2
 8002b22:	e002      	b.n	8002b2a <HAL_GPIO_Init+0x1fa>
 8002b24:	2301      	movs	r3, #1
 8002b26:	e000      	b.n	8002b2a <HAL_GPIO_Init+0x1fa>
 8002b28:	2300      	movs	r3, #0
 8002b2a:	697a      	ldr	r2, [r7, #20]
 8002b2c:	f002 0203 	and.w	r2, r2, #3
 8002b30:	0092      	lsls	r2, r2, #2
 8002b32:	4093      	lsls	r3, r2
 8002b34:	693a      	ldr	r2, [r7, #16]
 8002b36:	4313      	orrs	r3, r2
 8002b38:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b3a:	4937      	ldr	r1, [pc, #220]	@ (8002c18 <HAL_GPIO_Init+0x2e8>)
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	089b      	lsrs	r3, r3, #2
 8002b40:	3302      	adds	r3, #2
 8002b42:	693a      	ldr	r2, [r7, #16]
 8002b44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002b48:	4b39      	ldr	r3, [pc, #228]	@ (8002c30 <HAL_GPIO_Init+0x300>)
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	43db      	mvns	r3, r3
 8002b52:	693a      	ldr	r2, [r7, #16]
 8002b54:	4013      	ands	r3, r2
 8002b56:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d003      	beq.n	8002b6c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002b64:	693a      	ldr	r2, [r7, #16]
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002b6c:	4a30      	ldr	r2, [pc, #192]	@ (8002c30 <HAL_GPIO_Init+0x300>)
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002b72:	4b2f      	ldr	r3, [pc, #188]	@ (8002c30 <HAL_GPIO_Init+0x300>)
 8002b74:	68db      	ldr	r3, [r3, #12]
 8002b76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	43db      	mvns	r3, r3
 8002b7c:	693a      	ldr	r2, [r7, #16]
 8002b7e:	4013      	ands	r3, r2
 8002b80:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d003      	beq.n	8002b96 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002b8e:	693a      	ldr	r2, [r7, #16]
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	4313      	orrs	r3, r2
 8002b94:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002b96:	4a26      	ldr	r2, [pc, #152]	@ (8002c30 <HAL_GPIO_Init+0x300>)
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002b9c:	4b24      	ldr	r3, [pc, #144]	@ (8002c30 <HAL_GPIO_Init+0x300>)
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	43db      	mvns	r3, r3
 8002ba6:	693a      	ldr	r2, [r7, #16]
 8002ba8:	4013      	ands	r3, r2
 8002baa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d003      	beq.n	8002bc0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002bb8:	693a      	ldr	r2, [r7, #16]
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002bc0:	4a1b      	ldr	r2, [pc, #108]	@ (8002c30 <HAL_GPIO_Init+0x300>)
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002bc6:	4b1a      	ldr	r3, [pc, #104]	@ (8002c30 <HAL_GPIO_Init+0x300>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	43db      	mvns	r3, r3
 8002bd0:	693a      	ldr	r2, [r7, #16]
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d003      	beq.n	8002bea <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002be2:	693a      	ldr	r2, [r7, #16]
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	4313      	orrs	r3, r2
 8002be8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002bea:	4a11      	ldr	r2, [pc, #68]	@ (8002c30 <HAL_GPIO_Init+0x300>)
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	3301      	adds	r3, #1
 8002bf4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	fa22 f303 	lsr.w	r3, r2, r3
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	f47f ae9d 	bne.w	8002940 <HAL_GPIO_Init+0x10>
  }
}
 8002c06:	bf00      	nop
 8002c08:	bf00      	nop
 8002c0a:	371c      	adds	r7, #28
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c12:	4770      	bx	lr
 8002c14:	40021000 	.word	0x40021000
 8002c18:	40010000 	.word	0x40010000
 8002c1c:	48000400 	.word	0x48000400
 8002c20:	48000800 	.word	0x48000800
 8002c24:	48000c00 	.word	0x48000c00
 8002c28:	48001000 	.word	0x48001000
 8002c2c:	48001400 	.word	0x48001400
 8002c30:	40010400 	.word	0x40010400

08002c34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b083      	sub	sp, #12
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
 8002c3c:	460b      	mov	r3, r1
 8002c3e:	807b      	strh	r3, [r7, #2]
 8002c40:	4613      	mov	r3, r2
 8002c42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002c44:	787b      	ldrb	r3, [r7, #1]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d003      	beq.n	8002c52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002c4a:	887a      	ldrh	r2, [r7, #2]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002c50:	e002      	b.n	8002c58 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002c52:	887a      	ldrh	r2, [r7, #2]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002c58:	bf00      	nop
 8002c5a:	370c      	adds	r7, #12
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr

08002c64 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b082      	sub	sp, #8
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d101      	bne.n	8002c76 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e08d      	b.n	8002d92 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d106      	bne.n	8002c90 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2200      	movs	r2, #0
 8002c86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f7ff f8d2 	bl	8001e34 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2224      	movs	r2, #36	@ 0x24
 8002c94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f022 0201 	bic.w	r2, r2, #1
 8002ca6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	685a      	ldr	r2, [r3, #4]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002cb4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	689a      	ldr	r2, [r3, #8]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002cc4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	68db      	ldr	r3, [r3, #12]
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d107      	bne.n	8002cde <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	689a      	ldr	r2, [r3, #8]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002cda:	609a      	str	r2, [r3, #8]
 8002cdc:	e006      	b.n	8002cec <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	689a      	ldr	r2, [r3, #8]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002cea:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	68db      	ldr	r3, [r3, #12]
 8002cf0:	2b02      	cmp	r3, #2
 8002cf2:	d108      	bne.n	8002d06 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	685a      	ldr	r2, [r3, #4]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002d02:	605a      	str	r2, [r3, #4]
 8002d04:	e007      	b.n	8002d16 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	685a      	ldr	r2, [r3, #4]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002d14:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	687a      	ldr	r2, [r7, #4]
 8002d1e:	6812      	ldr	r2, [r2, #0]
 8002d20:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002d24:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002d28:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	68da      	ldr	r2, [r3, #12]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002d38:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	691a      	ldr	r2, [r3, #16]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	695b      	ldr	r3, [r3, #20]
 8002d42:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	699b      	ldr	r3, [r3, #24]
 8002d4a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	430a      	orrs	r2, r1
 8002d52:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	69d9      	ldr	r1, [r3, #28]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6a1a      	ldr	r2, [r3, #32]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	430a      	orrs	r2, r1
 8002d62:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f042 0201 	orr.w	r2, r2, #1
 8002d72:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2200      	movs	r2, #0
 8002d78:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2220      	movs	r2, #32
 8002d7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2200      	movs	r2, #0
 8002d86:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002d90:	2300      	movs	r3, #0
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3708      	adds	r7, #8
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}
	...

08002d9c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b088      	sub	sp, #32
 8002da0:	af02      	add	r7, sp, #8
 8002da2:	60f8      	str	r0, [r7, #12]
 8002da4:	4608      	mov	r0, r1
 8002da6:	4611      	mov	r1, r2
 8002da8:	461a      	mov	r2, r3
 8002daa:	4603      	mov	r3, r0
 8002dac:	817b      	strh	r3, [r7, #10]
 8002dae:	460b      	mov	r3, r1
 8002db0:	813b      	strh	r3, [r7, #8]
 8002db2:	4613      	mov	r3, r2
 8002db4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	2b20      	cmp	r3, #32
 8002dc0:	f040 80f9 	bne.w	8002fb6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002dc4:	6a3b      	ldr	r3, [r7, #32]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d002      	beq.n	8002dd0 <HAL_I2C_Mem_Write+0x34>
 8002dca:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d105      	bne.n	8002ddc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002dd6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e0ed      	b.n	8002fb8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d101      	bne.n	8002dea <HAL_I2C_Mem_Write+0x4e>
 8002de6:	2302      	movs	r3, #2
 8002de8:	e0e6      	b.n	8002fb8 <HAL_I2C_Mem_Write+0x21c>
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2201      	movs	r2, #1
 8002dee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002df2:	f7ff fb6b 	bl	80024cc <HAL_GetTick>
 8002df6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	9300      	str	r3, [sp, #0]
 8002dfc:	2319      	movs	r3, #25
 8002dfe:	2201      	movs	r2, #1
 8002e00:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002e04:	68f8      	ldr	r0, [r7, #12]
 8002e06:	f001 f83e 	bl	8003e86 <I2C_WaitOnFlagUntilTimeout>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d001      	beq.n	8002e14 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	e0d1      	b.n	8002fb8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2221      	movs	r2, #33	@ 0x21
 8002e18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2240      	movs	r2, #64	@ 0x40
 8002e20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2200      	movs	r2, #0
 8002e28:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	6a3a      	ldr	r2, [r7, #32]
 8002e2e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002e34:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002e3c:	88f8      	ldrh	r0, [r7, #6]
 8002e3e:	893a      	ldrh	r2, [r7, #8]
 8002e40:	8979      	ldrh	r1, [r7, #10]
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	9301      	str	r3, [sp, #4]
 8002e46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e48:	9300      	str	r3, [sp, #0]
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	68f8      	ldr	r0, [r7, #12]
 8002e4e:	f000 fb81 	bl	8003554 <I2C_RequestMemoryWrite>
 8002e52:	4603      	mov	r3, r0
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d005      	beq.n	8002e64 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	e0a9      	b.n	8002fb8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e68:	b29b      	uxth	r3, r3
 8002e6a:	2bff      	cmp	r3, #255	@ 0xff
 8002e6c:	d90e      	bls.n	8002e8c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	22ff      	movs	r2, #255	@ 0xff
 8002e72:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e78:	b2da      	uxtb	r2, r3
 8002e7a:	8979      	ldrh	r1, [r7, #10]
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	9300      	str	r3, [sp, #0]
 8002e80:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002e84:	68f8      	ldr	r0, [r7, #12]
 8002e86:	f001 f9c1 	bl	800420c <I2C_TransferConfig>
 8002e8a:	e00f      	b.n	8002eac <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e90:	b29a      	uxth	r2, r3
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e9a:	b2da      	uxtb	r2, r3
 8002e9c:	8979      	ldrh	r1, [r7, #10]
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	9300      	str	r3, [sp, #0]
 8002ea2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002ea6:	68f8      	ldr	r0, [r7, #12]
 8002ea8:	f001 f9b0 	bl	800420c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002eac:	697a      	ldr	r2, [r7, #20]
 8002eae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002eb0:	68f8      	ldr	r0, [r7, #12]
 8002eb2:	f001 f841 	bl	8003f38 <I2C_WaitOnTXISFlagUntilTimeout>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d001      	beq.n	8002ec0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	e07b      	b.n	8002fb8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ec4:	781a      	ldrb	r2, [r3, #0]
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ed0:	1c5a      	adds	r2, r3, #1
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002eda:	b29b      	uxth	r3, r3
 8002edc:	3b01      	subs	r3, #1
 8002ede:	b29a      	uxth	r2, r3
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ee8:	3b01      	subs	r3, #1
 8002eea:	b29a      	uxth	r2, r3
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ef4:	b29b      	uxth	r3, r3
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d034      	beq.n	8002f64 <HAL_I2C_Mem_Write+0x1c8>
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d130      	bne.n	8002f64 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	9300      	str	r3, [sp, #0]
 8002f06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f08:	2200      	movs	r2, #0
 8002f0a:	2180      	movs	r1, #128	@ 0x80
 8002f0c:	68f8      	ldr	r0, [r7, #12]
 8002f0e:	f000 ffba 	bl	8003e86 <I2C_WaitOnFlagUntilTimeout>
 8002f12:	4603      	mov	r3, r0
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d001      	beq.n	8002f1c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e04d      	b.n	8002fb8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f20:	b29b      	uxth	r3, r3
 8002f22:	2bff      	cmp	r3, #255	@ 0xff
 8002f24:	d90e      	bls.n	8002f44 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	22ff      	movs	r2, #255	@ 0xff
 8002f2a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f30:	b2da      	uxtb	r2, r3
 8002f32:	8979      	ldrh	r1, [r7, #10]
 8002f34:	2300      	movs	r3, #0
 8002f36:	9300      	str	r3, [sp, #0]
 8002f38:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002f3c:	68f8      	ldr	r0, [r7, #12]
 8002f3e:	f001 f965 	bl	800420c <I2C_TransferConfig>
 8002f42:	e00f      	b.n	8002f64 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f48:	b29a      	uxth	r2, r3
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f52:	b2da      	uxtb	r2, r3
 8002f54:	8979      	ldrh	r1, [r7, #10]
 8002f56:	2300      	movs	r3, #0
 8002f58:	9300      	str	r3, [sp, #0]
 8002f5a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002f5e:	68f8      	ldr	r0, [r7, #12]
 8002f60:	f001 f954 	bl	800420c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f68:	b29b      	uxth	r3, r3
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d19e      	bne.n	8002eac <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f6e:	697a      	ldr	r2, [r7, #20]
 8002f70:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002f72:	68f8      	ldr	r0, [r7, #12]
 8002f74:	f001 f827 	bl	8003fc6 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d001      	beq.n	8002f82 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e01a      	b.n	8002fb8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	2220      	movs	r2, #32
 8002f88:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	6859      	ldr	r1, [r3, #4]
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	4b0a      	ldr	r3, [pc, #40]	@ (8002fc0 <HAL_I2C_Mem_Write+0x224>)
 8002f96:	400b      	ands	r3, r1
 8002f98:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2220      	movs	r2, #32
 8002f9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2200      	movs	r2, #0
 8002fae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	e000      	b.n	8002fb8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002fb6:	2302      	movs	r3, #2
  }
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	3718      	adds	r7, #24
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}
 8002fc0:	fe00e800 	.word	0xfe00e800

08002fc4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b088      	sub	sp, #32
 8002fc8:	af02      	add	r7, sp, #8
 8002fca:	60f8      	str	r0, [r7, #12]
 8002fcc:	4608      	mov	r0, r1
 8002fce:	4611      	mov	r1, r2
 8002fd0:	461a      	mov	r2, r3
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	817b      	strh	r3, [r7, #10]
 8002fd6:	460b      	mov	r3, r1
 8002fd8:	813b      	strh	r3, [r7, #8]
 8002fda:	4613      	mov	r3, r2
 8002fdc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	2b20      	cmp	r3, #32
 8002fe8:	f040 80fd 	bne.w	80031e6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fec:	6a3b      	ldr	r3, [r7, #32]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d002      	beq.n	8002ff8 <HAL_I2C_Mem_Read+0x34>
 8002ff2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d105      	bne.n	8003004 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ffe:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e0f1      	b.n	80031e8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800300a:	2b01      	cmp	r3, #1
 800300c:	d101      	bne.n	8003012 <HAL_I2C_Mem_Read+0x4e>
 800300e:	2302      	movs	r3, #2
 8003010:	e0ea      	b.n	80031e8 <HAL_I2C_Mem_Read+0x224>
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2201      	movs	r2, #1
 8003016:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800301a:	f7ff fa57 	bl	80024cc <HAL_GetTick>
 800301e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	9300      	str	r3, [sp, #0]
 8003024:	2319      	movs	r3, #25
 8003026:	2201      	movs	r2, #1
 8003028:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800302c:	68f8      	ldr	r0, [r7, #12]
 800302e:	f000 ff2a 	bl	8003e86 <I2C_WaitOnFlagUntilTimeout>
 8003032:	4603      	mov	r3, r0
 8003034:	2b00      	cmp	r3, #0
 8003036:	d001      	beq.n	800303c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	e0d5      	b.n	80031e8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2222      	movs	r2, #34	@ 0x22
 8003040:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2240      	movs	r2, #64	@ 0x40
 8003048:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2200      	movs	r2, #0
 8003050:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	6a3a      	ldr	r2, [r7, #32]
 8003056:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800305c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2200      	movs	r2, #0
 8003062:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003064:	88f8      	ldrh	r0, [r7, #6]
 8003066:	893a      	ldrh	r2, [r7, #8]
 8003068:	8979      	ldrh	r1, [r7, #10]
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	9301      	str	r3, [sp, #4]
 800306e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003070:	9300      	str	r3, [sp, #0]
 8003072:	4603      	mov	r3, r0
 8003074:	68f8      	ldr	r0, [r7, #12]
 8003076:	f000 fac1 	bl	80035fc <I2C_RequestMemoryRead>
 800307a:	4603      	mov	r3, r0
 800307c:	2b00      	cmp	r3, #0
 800307e:	d005      	beq.n	800308c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2200      	movs	r2, #0
 8003084:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	e0ad      	b.n	80031e8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003090:	b29b      	uxth	r3, r3
 8003092:	2bff      	cmp	r3, #255	@ 0xff
 8003094:	d90e      	bls.n	80030b4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	22ff      	movs	r2, #255	@ 0xff
 800309a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030a0:	b2da      	uxtb	r2, r3
 80030a2:	8979      	ldrh	r1, [r7, #10]
 80030a4:	4b52      	ldr	r3, [pc, #328]	@ (80031f0 <HAL_I2C_Mem_Read+0x22c>)
 80030a6:	9300      	str	r3, [sp, #0]
 80030a8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80030ac:	68f8      	ldr	r0, [r7, #12]
 80030ae:	f001 f8ad 	bl	800420c <I2C_TransferConfig>
 80030b2:	e00f      	b.n	80030d4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030b8:	b29a      	uxth	r2, r3
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030c2:	b2da      	uxtb	r2, r3
 80030c4:	8979      	ldrh	r1, [r7, #10]
 80030c6:	4b4a      	ldr	r3, [pc, #296]	@ (80031f0 <HAL_I2C_Mem_Read+0x22c>)
 80030c8:	9300      	str	r3, [sp, #0]
 80030ca:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80030ce:	68f8      	ldr	r0, [r7, #12]
 80030d0:	f001 f89c 	bl	800420c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	9300      	str	r3, [sp, #0]
 80030d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030da:	2200      	movs	r2, #0
 80030dc:	2104      	movs	r1, #4
 80030de:	68f8      	ldr	r0, [r7, #12]
 80030e0:	f000 fed1 	bl	8003e86 <I2C_WaitOnFlagUntilTimeout>
 80030e4:	4603      	mov	r3, r0
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d001      	beq.n	80030ee <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e07c      	b.n	80031e8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030f8:	b2d2      	uxtb	r2, r2
 80030fa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003100:	1c5a      	adds	r2, r3, #1
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800310a:	3b01      	subs	r3, #1
 800310c:	b29a      	uxth	r2, r3
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003116:	b29b      	uxth	r3, r3
 8003118:	3b01      	subs	r3, #1
 800311a:	b29a      	uxth	r2, r3
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003124:	b29b      	uxth	r3, r3
 8003126:	2b00      	cmp	r3, #0
 8003128:	d034      	beq.n	8003194 <HAL_I2C_Mem_Read+0x1d0>
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800312e:	2b00      	cmp	r3, #0
 8003130:	d130      	bne.n	8003194 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	9300      	str	r3, [sp, #0]
 8003136:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003138:	2200      	movs	r2, #0
 800313a:	2180      	movs	r1, #128	@ 0x80
 800313c:	68f8      	ldr	r0, [r7, #12]
 800313e:	f000 fea2 	bl	8003e86 <I2C_WaitOnFlagUntilTimeout>
 8003142:	4603      	mov	r3, r0
 8003144:	2b00      	cmp	r3, #0
 8003146:	d001      	beq.n	800314c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003148:	2301      	movs	r3, #1
 800314a:	e04d      	b.n	80031e8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003150:	b29b      	uxth	r3, r3
 8003152:	2bff      	cmp	r3, #255	@ 0xff
 8003154:	d90e      	bls.n	8003174 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	22ff      	movs	r2, #255	@ 0xff
 800315a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003160:	b2da      	uxtb	r2, r3
 8003162:	8979      	ldrh	r1, [r7, #10]
 8003164:	2300      	movs	r3, #0
 8003166:	9300      	str	r3, [sp, #0]
 8003168:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800316c:	68f8      	ldr	r0, [r7, #12]
 800316e:	f001 f84d 	bl	800420c <I2C_TransferConfig>
 8003172:	e00f      	b.n	8003194 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003178:	b29a      	uxth	r2, r3
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003182:	b2da      	uxtb	r2, r3
 8003184:	8979      	ldrh	r1, [r7, #10]
 8003186:	2300      	movs	r3, #0
 8003188:	9300      	str	r3, [sp, #0]
 800318a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800318e:	68f8      	ldr	r0, [r7, #12]
 8003190:	f001 f83c 	bl	800420c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003198:	b29b      	uxth	r3, r3
 800319a:	2b00      	cmp	r3, #0
 800319c:	d19a      	bne.n	80030d4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800319e:	697a      	ldr	r2, [r7, #20]
 80031a0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80031a2:	68f8      	ldr	r0, [r7, #12]
 80031a4:	f000 ff0f 	bl	8003fc6 <I2C_WaitOnSTOPFlagUntilTimeout>
 80031a8:	4603      	mov	r3, r0
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d001      	beq.n	80031b2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e01a      	b.n	80031e8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	2220      	movs	r2, #32
 80031b8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	6859      	ldr	r1, [r3, #4]
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	4b0b      	ldr	r3, [pc, #44]	@ (80031f4 <HAL_I2C_Mem_Read+0x230>)
 80031c6:	400b      	ands	r3, r1
 80031c8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2220      	movs	r2, #32
 80031ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2200      	movs	r2, #0
 80031d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2200      	movs	r2, #0
 80031de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80031e2:	2300      	movs	r3, #0
 80031e4:	e000      	b.n	80031e8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80031e6:	2302      	movs	r3, #2
  }
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	3718      	adds	r7, #24
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}
 80031f0:	80002400 	.word	0x80002400
 80031f4:	fe00e800 	.word	0xfe00e800

080031f8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b084      	sub	sp, #16
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	699b      	ldr	r3, [r3, #24]
 8003206:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003214:	2b00      	cmp	r3, #0
 8003216:	d005      	beq.n	8003224 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800321c:	68ba      	ldr	r2, [r7, #8]
 800321e:	68f9      	ldr	r1, [r7, #12]
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	4798      	blx	r3
  }
}
 8003224:	bf00      	nop
 8003226:	3710      	adds	r7, #16
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}

0800322c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b086      	sub	sp, #24
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	699b      	ldr	r3, [r3, #24]
 800323a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800324a:	2b00      	cmp	r3, #0
 800324c:	d00f      	beq.n	800326e <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003254:	2b00      	cmp	r3, #0
 8003256:	d00a      	beq.n	800326e <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800325c:	f043 0201 	orr.w	r2, r3, #1
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800326c:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003274:	2b00      	cmp	r3, #0
 8003276:	d00f      	beq.n	8003298 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800327e:	2b00      	cmp	r3, #0
 8003280:	d00a      	beq.n	8003298 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003286:	f043 0208 	orr.w	r2, r3, #8
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003296:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d00f      	beq.n	80032c2 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d00a      	beq.n	80032c2 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032b0:	f043 0202 	orr.w	r2, r3, #2
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80032c0:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032c6:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	f003 030b 	and.w	r3, r3, #11
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d003      	beq.n	80032da <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 80032d2:	68f9      	ldr	r1, [r7, #12]
 80032d4:	6878      	ldr	r0, [r7, #4]
 80032d6:	f000 fc7d 	bl	8003bd4 <I2C_ITError>
  }
}
 80032da:	bf00      	nop
 80032dc:	3718      	adds	r7, #24
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}

080032e2 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80032e2:	b480      	push	{r7}
 80032e4:	b083      	sub	sp, #12
 80032e6:	af00      	add	r7, sp, #0
 80032e8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80032ea:	bf00      	nop
 80032ec:	370c      	adds	r7, #12
 80032ee:	46bd      	mov	sp, r7
 80032f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f4:	4770      	bx	lr

080032f6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80032f6:	b480      	push	{r7}
 80032f8:	b083      	sub	sp, #12
 80032fa:	af00      	add	r7, sp, #0
 80032fc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80032fe:	bf00      	nop
 8003300:	370c      	adds	r7, #12
 8003302:	46bd      	mov	sp, r7
 8003304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003308:	4770      	bx	lr

0800330a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800330a:	b480      	push	{r7}
 800330c:	b083      	sub	sp, #12
 800330e:	af00      	add	r7, sp, #0
 8003310:	6078      	str	r0, [r7, #4]
 8003312:	460b      	mov	r3, r1
 8003314:	70fb      	strb	r3, [r7, #3]
 8003316:	4613      	mov	r3, r2
 8003318:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800331a:	bf00      	nop
 800331c:	370c      	adds	r7, #12
 800331e:	46bd      	mov	sp, r7
 8003320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003324:	4770      	bx	lr

08003326 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003326:	b480      	push	{r7}
 8003328:	b083      	sub	sp, #12
 800332a:	af00      	add	r7, sp, #0
 800332c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800332e:	bf00      	nop
 8003330:	370c      	adds	r7, #12
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr

0800333a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800333a:	b480      	push	{r7}
 800333c:	b083      	sub	sp, #12
 800333e:	af00      	add	r7, sp, #0
 8003340:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003342:	bf00      	nop
 8003344:	370c      	adds	r7, #12
 8003346:	46bd      	mov	sp, r7
 8003348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334c:	4770      	bx	lr

0800334e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800334e:	b480      	push	{r7}
 8003350:	b083      	sub	sp, #12
 8003352:	af00      	add	r7, sp, #0
 8003354:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003356:	bf00      	nop
 8003358:	370c      	adds	r7, #12
 800335a:	46bd      	mov	sp, r7
 800335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003360:	4770      	bx	lr

08003362 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8003362:	b580      	push	{r7, lr}
 8003364:	b086      	sub	sp, #24
 8003366:	af00      	add	r7, sp, #0
 8003368:	60f8      	str	r0, [r7, #12]
 800336a:	60b9      	str	r1, [r7, #8]
 800336c:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003372:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800337e:	2b01      	cmp	r3, #1
 8003380:	d101      	bne.n	8003386 <I2C_Slave_ISR_IT+0x24>
 8003382:	2302      	movs	r3, #2
 8003384:	e0e2      	b.n	800354c <I2C_Slave_ISR_IT+0x1ea>
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2201      	movs	r2, #1
 800338a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	f003 0320 	and.w	r3, r3, #32
 8003394:	2b00      	cmp	r3, #0
 8003396:	d009      	beq.n	80033ac <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d004      	beq.n	80033ac <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80033a2:	6939      	ldr	r1, [r7, #16]
 80033a4:	68f8      	ldr	r0, [r7, #12]
 80033a6:	f000 fa5d 	bl	8003864 <I2C_ITSlaveCplt>
 80033aa:	e0ca      	b.n	8003542 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	f003 0310 	and.w	r3, r3, #16
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d04b      	beq.n	800344e <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d046      	beq.n	800344e <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033c4:	b29b      	uxth	r3, r3
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d128      	bne.n	800341c <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	2b28      	cmp	r3, #40	@ 0x28
 80033d4:	d108      	bne.n	80033e8 <I2C_Slave_ISR_IT+0x86>
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80033dc:	d104      	bne.n	80033e8 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80033de:	6939      	ldr	r1, [r7, #16]
 80033e0:	68f8      	ldr	r0, [r7, #12]
 80033e2:	f000 fba3 	bl	8003b2c <I2C_ITListenCplt>
 80033e6:	e031      	b.n	800344c <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033ee:	b2db      	uxtb	r3, r3
 80033f0:	2b29      	cmp	r3, #41	@ 0x29
 80033f2:	d10e      	bne.n	8003412 <I2C_Slave_ISR_IT+0xb0>
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80033fa:	d00a      	beq.n	8003412 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	2210      	movs	r2, #16
 8003402:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003404:	68f8      	ldr	r0, [r7, #12]
 8003406:	f000 fcfc 	bl	8003e02 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800340a:	68f8      	ldr	r0, [r7, #12]
 800340c:	f000 f9ce 	bl	80037ac <I2C_ITSlaveSeqCplt>
 8003410:	e01c      	b.n	800344c <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	2210      	movs	r2, #16
 8003418:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800341a:	e08f      	b.n	800353c <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	2210      	movs	r2, #16
 8003422:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003428:	f043 0204 	orr.w	r2, r3, #4
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d003      	beq.n	800343e <I2C_Slave_ISR_IT+0xdc>
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800343c:	d17e      	bne.n	800353c <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003442:	4619      	mov	r1, r3
 8003444:	68f8      	ldr	r0, [r7, #12]
 8003446:	f000 fbc5 	bl	8003bd4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800344a:	e077      	b.n	800353c <I2C_Slave_ISR_IT+0x1da>
 800344c:	e076      	b.n	800353c <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	f003 0304 	and.w	r3, r3, #4
 8003454:	2b00      	cmp	r3, #0
 8003456:	d02f      	beq.n	80034b8 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800345e:	2b00      	cmp	r3, #0
 8003460:	d02a      	beq.n	80034b8 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003466:	b29b      	uxth	r3, r3
 8003468:	2b00      	cmp	r3, #0
 800346a:	d018      	beq.n	800349e <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003476:	b2d2      	uxtb	r2, r2
 8003478:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800347e:	1c5a      	adds	r2, r3, #1
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003488:	3b01      	subs	r3, #1
 800348a:	b29a      	uxth	r2, r3
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003494:	b29b      	uxth	r3, r3
 8003496:	3b01      	subs	r3, #1
 8003498:	b29a      	uxth	r2, r3
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034a2:	b29b      	uxth	r3, r3
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d14b      	bne.n	8003540 <I2C_Slave_ISR_IT+0x1de>
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80034ae:	d047      	beq.n	8003540 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80034b0:	68f8      	ldr	r0, [r7, #12]
 80034b2:	f000 f97b 	bl	80037ac <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80034b6:	e043      	b.n	8003540 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	f003 0308 	and.w	r3, r3, #8
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d009      	beq.n	80034d6 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d004      	beq.n	80034d6 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80034cc:	6939      	ldr	r1, [r7, #16]
 80034ce:	68f8      	ldr	r0, [r7, #12]
 80034d0:	f000 f8e8 	bl	80036a4 <I2C_ITAddrCplt>
 80034d4:	e035      	b.n	8003542 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	f003 0302 	and.w	r3, r3, #2
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d030      	beq.n	8003542 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d02b      	beq.n	8003542 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034ee:	b29b      	uxth	r3, r3
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d018      	beq.n	8003526 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034f8:	781a      	ldrb	r2, [r3, #0]
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003504:	1c5a      	adds	r2, r3, #1
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800350e:	b29b      	uxth	r3, r3
 8003510:	3b01      	subs	r3, #1
 8003512:	b29a      	uxth	r2, r3
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800351c:	3b01      	subs	r3, #1
 800351e:	b29a      	uxth	r2, r3
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	851a      	strh	r2, [r3, #40]	@ 0x28
 8003524:	e00d      	b.n	8003542 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800352c:	d002      	beq.n	8003534 <I2C_Slave_ISR_IT+0x1d2>
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d106      	bne.n	8003542 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003534:	68f8      	ldr	r0, [r7, #12]
 8003536:	f000 f939 	bl	80037ac <I2C_ITSlaveSeqCplt>
 800353a:	e002      	b.n	8003542 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 800353c:	bf00      	nop
 800353e:	e000      	b.n	8003542 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8003540:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2200      	movs	r2, #0
 8003546:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800354a:	2300      	movs	r3, #0
}
 800354c:	4618      	mov	r0, r3
 800354e:	3718      	adds	r7, #24
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}

08003554 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b086      	sub	sp, #24
 8003558:	af02      	add	r7, sp, #8
 800355a:	60f8      	str	r0, [r7, #12]
 800355c:	4608      	mov	r0, r1
 800355e:	4611      	mov	r1, r2
 8003560:	461a      	mov	r2, r3
 8003562:	4603      	mov	r3, r0
 8003564:	817b      	strh	r3, [r7, #10]
 8003566:	460b      	mov	r3, r1
 8003568:	813b      	strh	r3, [r7, #8]
 800356a:	4613      	mov	r3, r2
 800356c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800356e:	88fb      	ldrh	r3, [r7, #6]
 8003570:	b2da      	uxtb	r2, r3
 8003572:	8979      	ldrh	r1, [r7, #10]
 8003574:	4b20      	ldr	r3, [pc, #128]	@ (80035f8 <I2C_RequestMemoryWrite+0xa4>)
 8003576:	9300      	str	r3, [sp, #0]
 8003578:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800357c:	68f8      	ldr	r0, [r7, #12]
 800357e:	f000 fe45 	bl	800420c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003582:	69fa      	ldr	r2, [r7, #28]
 8003584:	69b9      	ldr	r1, [r7, #24]
 8003586:	68f8      	ldr	r0, [r7, #12]
 8003588:	f000 fcd6 	bl	8003f38 <I2C_WaitOnTXISFlagUntilTimeout>
 800358c:	4603      	mov	r3, r0
 800358e:	2b00      	cmp	r3, #0
 8003590:	d001      	beq.n	8003596 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	e02c      	b.n	80035f0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003596:	88fb      	ldrh	r3, [r7, #6]
 8003598:	2b01      	cmp	r3, #1
 800359a:	d105      	bne.n	80035a8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800359c:	893b      	ldrh	r3, [r7, #8]
 800359e:	b2da      	uxtb	r2, r3
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	629a      	str	r2, [r3, #40]	@ 0x28
 80035a6:	e015      	b.n	80035d4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80035a8:	893b      	ldrh	r3, [r7, #8]
 80035aa:	0a1b      	lsrs	r3, r3, #8
 80035ac:	b29b      	uxth	r3, r3
 80035ae:	b2da      	uxtb	r2, r3
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80035b6:	69fa      	ldr	r2, [r7, #28]
 80035b8:	69b9      	ldr	r1, [r7, #24]
 80035ba:	68f8      	ldr	r0, [r7, #12]
 80035bc:	f000 fcbc 	bl	8003f38 <I2C_WaitOnTXISFlagUntilTimeout>
 80035c0:	4603      	mov	r3, r0
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d001      	beq.n	80035ca <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	e012      	b.n	80035f0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80035ca:	893b      	ldrh	r3, [r7, #8]
 80035cc:	b2da      	uxtb	r2, r3
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80035d4:	69fb      	ldr	r3, [r7, #28]
 80035d6:	9300      	str	r3, [sp, #0]
 80035d8:	69bb      	ldr	r3, [r7, #24]
 80035da:	2200      	movs	r2, #0
 80035dc:	2180      	movs	r1, #128	@ 0x80
 80035de:	68f8      	ldr	r0, [r7, #12]
 80035e0:	f000 fc51 	bl	8003e86 <I2C_WaitOnFlagUntilTimeout>
 80035e4:	4603      	mov	r3, r0
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d001      	beq.n	80035ee <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e000      	b.n	80035f0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80035ee:	2300      	movs	r3, #0
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	3710      	adds	r7, #16
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}
 80035f8:	80002000 	.word	0x80002000

080035fc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b086      	sub	sp, #24
 8003600:	af02      	add	r7, sp, #8
 8003602:	60f8      	str	r0, [r7, #12]
 8003604:	4608      	mov	r0, r1
 8003606:	4611      	mov	r1, r2
 8003608:	461a      	mov	r2, r3
 800360a:	4603      	mov	r3, r0
 800360c:	817b      	strh	r3, [r7, #10]
 800360e:	460b      	mov	r3, r1
 8003610:	813b      	strh	r3, [r7, #8]
 8003612:	4613      	mov	r3, r2
 8003614:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003616:	88fb      	ldrh	r3, [r7, #6]
 8003618:	b2da      	uxtb	r2, r3
 800361a:	8979      	ldrh	r1, [r7, #10]
 800361c:	4b20      	ldr	r3, [pc, #128]	@ (80036a0 <I2C_RequestMemoryRead+0xa4>)
 800361e:	9300      	str	r3, [sp, #0]
 8003620:	2300      	movs	r3, #0
 8003622:	68f8      	ldr	r0, [r7, #12]
 8003624:	f000 fdf2 	bl	800420c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003628:	69fa      	ldr	r2, [r7, #28]
 800362a:	69b9      	ldr	r1, [r7, #24]
 800362c:	68f8      	ldr	r0, [r7, #12]
 800362e:	f000 fc83 	bl	8003f38 <I2C_WaitOnTXISFlagUntilTimeout>
 8003632:	4603      	mov	r3, r0
 8003634:	2b00      	cmp	r3, #0
 8003636:	d001      	beq.n	800363c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	e02c      	b.n	8003696 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800363c:	88fb      	ldrh	r3, [r7, #6]
 800363e:	2b01      	cmp	r3, #1
 8003640:	d105      	bne.n	800364e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003642:	893b      	ldrh	r3, [r7, #8]
 8003644:	b2da      	uxtb	r2, r3
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	629a      	str	r2, [r3, #40]	@ 0x28
 800364c:	e015      	b.n	800367a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800364e:	893b      	ldrh	r3, [r7, #8]
 8003650:	0a1b      	lsrs	r3, r3, #8
 8003652:	b29b      	uxth	r3, r3
 8003654:	b2da      	uxtb	r2, r3
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800365c:	69fa      	ldr	r2, [r7, #28]
 800365e:	69b9      	ldr	r1, [r7, #24]
 8003660:	68f8      	ldr	r0, [r7, #12]
 8003662:	f000 fc69 	bl	8003f38 <I2C_WaitOnTXISFlagUntilTimeout>
 8003666:	4603      	mov	r3, r0
 8003668:	2b00      	cmp	r3, #0
 800366a:	d001      	beq.n	8003670 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	e012      	b.n	8003696 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003670:	893b      	ldrh	r3, [r7, #8]
 8003672:	b2da      	uxtb	r2, r3
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800367a:	69fb      	ldr	r3, [r7, #28]
 800367c:	9300      	str	r3, [sp, #0]
 800367e:	69bb      	ldr	r3, [r7, #24]
 8003680:	2200      	movs	r2, #0
 8003682:	2140      	movs	r1, #64	@ 0x40
 8003684:	68f8      	ldr	r0, [r7, #12]
 8003686:	f000 fbfe 	bl	8003e86 <I2C_WaitOnFlagUntilTimeout>
 800368a:	4603      	mov	r3, r0
 800368c:	2b00      	cmp	r3, #0
 800368e:	d001      	beq.n	8003694 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	e000      	b.n	8003696 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003694:	2300      	movs	r3, #0
}
 8003696:	4618      	mov	r0, r3
 8003698:	3710      	adds	r7, #16
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
 800369e:	bf00      	nop
 80036a0:	80002000 	.word	0x80002000

080036a4 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b084      	sub	sp, #16
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
 80036ac:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036b4:	b2db      	uxtb	r3, r3
 80036b6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80036ba:	2b28      	cmp	r3, #40	@ 0x28
 80036bc:	d16a      	bne.n	8003794 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	699b      	ldr	r3, [r3, #24]
 80036c4:	0c1b      	lsrs	r3, r3, #16
 80036c6:	b2db      	uxtb	r3, r3
 80036c8:	f003 0301 	and.w	r3, r3, #1
 80036cc:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	699b      	ldr	r3, [r3, #24]
 80036d4:	0c1b      	lsrs	r3, r3, #16
 80036d6:	b29b      	uxth	r3, r3
 80036d8:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80036dc:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	b29b      	uxth	r3, r3
 80036e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80036ea:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	68db      	ldr	r3, [r3, #12]
 80036f2:	b29b      	uxth	r3, r3
 80036f4:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80036f8:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	68db      	ldr	r3, [r3, #12]
 80036fe:	2b02      	cmp	r3, #2
 8003700:	d138      	bne.n	8003774 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8003702:	897b      	ldrh	r3, [r7, #10]
 8003704:	09db      	lsrs	r3, r3, #7
 8003706:	b29a      	uxth	r2, r3
 8003708:	89bb      	ldrh	r3, [r7, #12]
 800370a:	4053      	eors	r3, r2
 800370c:	b29b      	uxth	r3, r3
 800370e:	f003 0306 	and.w	r3, r3, #6
 8003712:	2b00      	cmp	r3, #0
 8003714:	d11c      	bne.n	8003750 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8003716:	897b      	ldrh	r3, [r7, #10]
 8003718:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800371e:	1c5a      	adds	r2, r3, #1
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003728:	2b02      	cmp	r3, #2
 800372a:	d13b      	bne.n	80037a4 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2200      	movs	r2, #0
 8003730:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	2208      	movs	r2, #8
 8003738:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2200      	movs	r2, #0
 800373e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003742:	89ba      	ldrh	r2, [r7, #12]
 8003744:	7bfb      	ldrb	r3, [r7, #15]
 8003746:	4619      	mov	r1, r3
 8003748:	6878      	ldr	r0, [r7, #4]
 800374a:	f7ff fdde 	bl	800330a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800374e:	e029      	b.n	80037a4 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8003750:	893b      	ldrh	r3, [r7, #8]
 8003752:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003754:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003758:	6878      	ldr	r0, [r7, #4]
 800375a:	f000 fd89 	bl	8004270 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003766:	89ba      	ldrh	r2, [r7, #12]
 8003768:	7bfb      	ldrb	r3, [r7, #15]
 800376a:	4619      	mov	r1, r3
 800376c:	6878      	ldr	r0, [r7, #4]
 800376e:	f7ff fdcc 	bl	800330a <HAL_I2C_AddrCallback>
}
 8003772:	e017      	b.n	80037a4 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003774:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003778:	6878      	ldr	r0, [r7, #4]
 800377a:	f000 fd79 	bl	8004270 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2200      	movs	r2, #0
 8003782:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003786:	89ba      	ldrh	r2, [r7, #12]
 8003788:	7bfb      	ldrb	r3, [r7, #15]
 800378a:	4619      	mov	r1, r3
 800378c:	6878      	ldr	r0, [r7, #4]
 800378e:	f7ff fdbc 	bl	800330a <HAL_I2C_AddrCallback>
}
 8003792:	e007      	b.n	80037a4 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	2208      	movs	r2, #8
 800379a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2200      	movs	r2, #0
 80037a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 80037a4:	bf00      	nop
 80037a6:	3710      	adds	r7, #16
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}

080037ac <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b084      	sub	sp, #16
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2200      	movs	r2, #0
 80037c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d008      	beq.n	80037e0 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80037dc:	601a      	str	r2, [r3, #0]
 80037de:	e00c      	b.n	80037fa <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d007      	beq.n	80037fa <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80037f8:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003800:	b2db      	uxtb	r3, r3
 8003802:	2b29      	cmp	r3, #41	@ 0x29
 8003804:	d112      	bne.n	800382c <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2228      	movs	r2, #40	@ 0x28
 800380a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2221      	movs	r2, #33	@ 0x21
 8003812:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003814:	2101      	movs	r1, #1
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f000 fd2a 	bl	8004270 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2200      	movs	r2, #0
 8003820:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003824:	6878      	ldr	r0, [r7, #4]
 8003826:	f7ff fd5c 	bl	80032e2 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800382a:	e017      	b.n	800385c <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003832:	b2db      	uxtb	r3, r3
 8003834:	2b2a      	cmp	r3, #42	@ 0x2a
 8003836:	d111      	bne.n	800385c <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2228      	movs	r2, #40	@ 0x28
 800383c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2222      	movs	r2, #34	@ 0x22
 8003844:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003846:	2102      	movs	r1, #2
 8003848:	6878      	ldr	r0, [r7, #4]
 800384a:	f000 fd11 	bl	8004270 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2200      	movs	r2, #0
 8003852:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	f7ff fd4d 	bl	80032f6 <HAL_I2C_SlaveRxCpltCallback>
}
 800385c:	bf00      	nop
 800385e:	3710      	adds	r7, #16
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}

08003864 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b086      	sub	sp, #24
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
 800386c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800387e:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003886:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	2220      	movs	r2, #32
 800388e:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003890:	7afb      	ldrb	r3, [r7, #11]
 8003892:	2b21      	cmp	r3, #33	@ 0x21
 8003894:	d002      	beq.n	800389c <I2C_ITSlaveCplt+0x38>
 8003896:	7afb      	ldrb	r3, [r7, #11]
 8003898:	2b29      	cmp	r3, #41	@ 0x29
 800389a:	d108      	bne.n	80038ae <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800389c:	f248 0101 	movw	r1, #32769	@ 0x8001
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	f000 fce5 	bl	8004270 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2221      	movs	r2, #33	@ 0x21
 80038aa:	631a      	str	r2, [r3, #48]	@ 0x30
 80038ac:	e019      	b.n	80038e2 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80038ae:	7afb      	ldrb	r3, [r7, #11]
 80038b0:	2b22      	cmp	r3, #34	@ 0x22
 80038b2:	d002      	beq.n	80038ba <I2C_ITSlaveCplt+0x56>
 80038b4:	7afb      	ldrb	r3, [r7, #11]
 80038b6:	2b2a      	cmp	r3, #42	@ 0x2a
 80038b8:	d108      	bne.n	80038cc <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80038ba:	f248 0102 	movw	r1, #32770	@ 0x8002
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f000 fcd6 	bl	8004270 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2222      	movs	r2, #34	@ 0x22
 80038c8:	631a      	str	r2, [r3, #48]	@ 0x30
 80038ca:	e00a      	b.n	80038e2 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 80038cc:	7afb      	ldrb	r3, [r7, #11]
 80038ce:	2b28      	cmp	r3, #40	@ 0x28
 80038d0:	d107      	bne.n	80038e2 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80038d2:	f248 0103 	movw	r1, #32771	@ 0x8003
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f000 fcca 	bl	8004270 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2200      	movs	r2, #0
 80038e0:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	685a      	ldr	r2, [r3, #4]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80038f0:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	6859      	ldr	r1, [r3, #4]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	4b89      	ldr	r3, [pc, #548]	@ (8003b24 <I2C_ITSlaveCplt+0x2c0>)
 80038fe:	400b      	ands	r3, r1
 8003900:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	f000 fa7d 	bl	8003e02 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800390e:	2b00      	cmp	r3, #0
 8003910:	d013      	beq.n	800393a <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003920:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003926:	2b00      	cmp	r3, #0
 8003928:	d01f      	beq.n	800396a <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	b29a      	uxth	r2, r3
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003938:	e017      	b.n	800396a <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003940:	2b00      	cmp	r3, #0
 8003942:	d012      	beq.n	800396a <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003952:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003958:	2b00      	cmp	r3, #0
 800395a:	d006      	beq.n	800396a <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	b29a      	uxth	r2, r3
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	f003 0304 	and.w	r3, r3, #4
 8003970:	2b00      	cmp	r3, #0
 8003972:	d020      	beq.n	80039b6 <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	f023 0304 	bic.w	r3, r3, #4
 800397a:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003986:	b2d2      	uxtb	r2, r2
 8003988:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800398e:	1c5a      	adds	r2, r3, #1
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003998:	2b00      	cmp	r3, #0
 800399a:	d00c      	beq.n	80039b6 <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039a0:	3b01      	subs	r3, #1
 80039a2:	b29a      	uxth	r2, r3
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039ac:	b29b      	uxth	r3, r3
 80039ae:	3b01      	subs	r3, #1
 80039b0:	b29a      	uxth	r2, r3
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039ba:	b29b      	uxth	r3, r3
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d005      	beq.n	80039cc <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039c4:	f043 0204 	orr.w	r2, r3, #4
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	f003 0310 	and.w	r3, r3, #16
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d049      	beq.n	8003a6a <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d044      	beq.n	8003a6a <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039e4:	b29b      	uxth	r3, r3
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d128      	bne.n	8003a3c <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80039f0:	b2db      	uxtb	r3, r3
 80039f2:	2b28      	cmp	r3, #40	@ 0x28
 80039f4:	d108      	bne.n	8003a08 <I2C_ITSlaveCplt+0x1a4>
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80039fc:	d104      	bne.n	8003a08 <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80039fe:	6979      	ldr	r1, [r7, #20]
 8003a00:	6878      	ldr	r0, [r7, #4]
 8003a02:	f000 f893 	bl	8003b2c <I2C_ITListenCplt>
 8003a06:	e030      	b.n	8003a6a <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a0e:	b2db      	uxtb	r3, r3
 8003a10:	2b29      	cmp	r3, #41	@ 0x29
 8003a12:	d10e      	bne.n	8003a32 <I2C_ITSlaveCplt+0x1ce>
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003a1a:	d00a      	beq.n	8003a32 <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	2210      	movs	r2, #16
 8003a22:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003a24:	6878      	ldr	r0, [r7, #4]
 8003a26:	f000 f9ec 	bl	8003e02 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f7ff febe 	bl	80037ac <I2C_ITSlaveSeqCplt>
 8003a30:	e01b      	b.n	8003a6a <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	2210      	movs	r2, #16
 8003a38:	61da      	str	r2, [r3, #28]
 8003a3a:	e016      	b.n	8003a6a <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	2210      	movs	r2, #16
 8003a42:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a48:	f043 0204 	orr.w	r2, r3, #4
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d003      	beq.n	8003a5e <I2C_ITSlaveCplt+0x1fa>
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003a5c:	d105      	bne.n	8003a6a <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a62:	4619      	mov	r1, r3
 8003a64:	6878      	ldr	r0, [r7, #4]
 8003a66:	f000 f8b5 	bl	8003bd4 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2200      	movs	r2, #0
 8003a76:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d010      	beq.n	8003aa2 <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a84:	4619      	mov	r1, r3
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f000 f8a4 	bl	8003bd4 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a92:	b2db      	uxtb	r3, r3
 8003a94:	2b28      	cmp	r3, #40	@ 0x28
 8003a96:	d141      	bne.n	8003b1c <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8003a98:	6979      	ldr	r1, [r7, #20]
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	f000 f846 	bl	8003b2c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003aa0:	e03c      	b.n	8003b1c <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003aa6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003aaa:	d014      	beq.n	8003ad6 <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	f7ff fe7d 	bl	80037ac <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	4a1c      	ldr	r2, [pc, #112]	@ (8003b28 <I2C_ITSlaveCplt+0x2c4>)
 8003ab6:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2220      	movs	r2, #32
 8003abc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f7ff fc29 	bl	8003326 <HAL_I2C_ListenCpltCallback>
}
 8003ad4:	e022      	b.n	8003b1c <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	2b22      	cmp	r3, #34	@ 0x22
 8003ae0:	d10e      	bne.n	8003b00 <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2220      	movs	r2, #32
 8003ae6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2200      	movs	r2, #0
 8003aee:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2200      	movs	r2, #0
 8003af4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f7ff fbfc 	bl	80032f6 <HAL_I2C_SlaveRxCpltCallback>
}
 8003afe:	e00d      	b.n	8003b1c <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2220      	movs	r2, #32
 8003b04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2200      	movs	r2, #0
 8003b12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f7ff fbe3 	bl	80032e2 <HAL_I2C_SlaveTxCpltCallback>
}
 8003b1c:	bf00      	nop
 8003b1e:	3718      	adds	r7, #24
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}
 8003b24:	fe00e800 	.word	0xfe00e800
 8003b28:	ffff0000 	.word	0xffff0000

08003b2c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b082      	sub	sp, #8
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
 8003b34:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	4a25      	ldr	r2, [pc, #148]	@ (8003bd0 <I2C_ITListenCplt+0xa4>)
 8003b3a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2220      	movs	r2, #32
 8003b46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2200      	movs	r2, #0
 8003b56:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	f003 0304 	and.w	r3, r3, #4
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d022      	beq.n	8003ba8 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b6c:	b2d2      	uxtb	r2, r2
 8003b6e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b74:	1c5a      	adds	r2, r3, #1
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d012      	beq.n	8003ba8 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b86:	3b01      	subs	r3, #1
 8003b88:	b29a      	uxth	r2, r3
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b92:	b29b      	uxth	r3, r3
 8003b94:	3b01      	subs	r3, #1
 8003b96:	b29a      	uxth	r2, r3
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ba0:	f043 0204 	orr.w	r2, r3, #4
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003ba8:	f248 0103 	movw	r1, #32771	@ 0x8003
 8003bac:	6878      	ldr	r0, [r7, #4]
 8003bae:	f000 fb5f 	bl	8004270 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	2210      	movs	r2, #16
 8003bb8:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f7ff fbaf 	bl	8003326 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8003bc8:	bf00      	nop
 8003bca:	3708      	adds	r7, #8
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}
 8003bd0:	ffff0000 	.word	0xffff0000

08003bd4 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b084      	sub	sp, #16
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
 8003bdc:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003be4:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2200      	movs	r2, #0
 8003bea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	4a6d      	ldr	r2, [pc, #436]	@ (8003da8 <I2C_ITError+0x1d4>)
 8003bf2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	431a      	orrs	r2, r3
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8003c06:	7bfb      	ldrb	r3, [r7, #15]
 8003c08:	2b28      	cmp	r3, #40	@ 0x28
 8003c0a:	d005      	beq.n	8003c18 <I2C_ITError+0x44>
 8003c0c:	7bfb      	ldrb	r3, [r7, #15]
 8003c0e:	2b29      	cmp	r3, #41	@ 0x29
 8003c10:	d002      	beq.n	8003c18 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8003c12:	7bfb      	ldrb	r3, [r7, #15]
 8003c14:	2b2a      	cmp	r3, #42	@ 0x2a
 8003c16:	d10b      	bne.n	8003c30 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003c18:	2103      	movs	r1, #3
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f000 fb28 	bl	8004270 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2228      	movs	r2, #40	@ 0x28
 8003c24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	4a60      	ldr	r2, [pc, #384]	@ (8003dac <I2C_ITError+0x1d8>)
 8003c2c:	635a      	str	r2, [r3, #52]	@ 0x34
 8003c2e:	e030      	b.n	8003c92 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003c30:	f248 0103 	movw	r1, #32771	@ 0x8003
 8003c34:	6878      	ldr	r0, [r7, #4]
 8003c36:	f000 fb1b 	bl	8004270 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f000 f8e1 	bl	8003e02 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c46:	b2db      	uxtb	r3, r3
 8003c48:	2b60      	cmp	r3, #96	@ 0x60
 8003c4a:	d01f      	beq.n	8003c8c <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2220      	movs	r2, #32
 8003c50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	699b      	ldr	r3, [r3, #24]
 8003c5a:	f003 0320 	and.w	r3, r3, #32
 8003c5e:	2b20      	cmp	r3, #32
 8003c60:	d114      	bne.n	8003c8c <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	699b      	ldr	r3, [r3, #24]
 8003c68:	f003 0310 	and.w	r3, r3, #16
 8003c6c:	2b10      	cmp	r3, #16
 8003c6e:	d109      	bne.n	8003c84 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	2210      	movs	r2, #16
 8003c76:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c7c:	f043 0204 	orr.w	r2, r3, #4
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	2220      	movs	r2, #32
 8003c8a:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c96:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d039      	beq.n	8003d14 <I2C_ITError+0x140>
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	2b11      	cmp	r3, #17
 8003ca4:	d002      	beq.n	8003cac <I2C_ITError+0xd8>
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	2b21      	cmp	r3, #33	@ 0x21
 8003caa:	d133      	bne.n	8003d14 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003cb6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003cba:	d107      	bne.n	8003ccc <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	681a      	ldr	r2, [r3, #0]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003cca:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f7fe fe12 	bl	80028fa <HAL_DMA_GetState>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	d017      	beq.n	8003d0c <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ce0:	4a33      	ldr	r2, [pc, #204]	@ (8003db0 <I2C_ITError+0x1dc>)
 8003ce2:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f7fe fd9b 	bl	800282c <HAL_DMA_Abort_IT>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d04d      	beq.n	8003d98 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d02:	687a      	ldr	r2, [r7, #4]
 8003d04:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003d06:	4610      	mov	r0, r2
 8003d08:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003d0a:	e045      	b.n	8003d98 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003d0c:	6878      	ldr	r0, [r7, #4]
 8003d0e:	f000 f851 	bl	8003db4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003d12:	e041      	b.n	8003d98 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d039      	beq.n	8003d90 <I2C_ITError+0x1bc>
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	2b12      	cmp	r3, #18
 8003d20:	d002      	beq.n	8003d28 <I2C_ITError+0x154>
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	2b22      	cmp	r3, #34	@ 0x22
 8003d26:	d133      	bne.n	8003d90 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003d32:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d36:	d107      	bne.n	8003d48 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003d46:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f7fe fdd4 	bl	80028fa <HAL_DMA_GetState>
 8003d52:	4603      	mov	r3, r0
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d017      	beq.n	8003d88 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d5c:	4a14      	ldr	r2, [pc, #80]	@ (8003db0 <I2C_ITError+0x1dc>)
 8003d5e:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2200      	movs	r2, #0
 8003d64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f7fe fd5d 	bl	800282c <HAL_DMA_Abort_IT>
 8003d72:	4603      	mov	r3, r0
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d011      	beq.n	8003d9c <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d7e:	687a      	ldr	r2, [r7, #4]
 8003d80:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003d82:	4610      	mov	r0, r2
 8003d84:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003d86:	e009      	b.n	8003d9c <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003d88:	6878      	ldr	r0, [r7, #4]
 8003d8a:	f000 f813 	bl	8003db4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003d8e:	e005      	b.n	8003d9c <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8003d90:	6878      	ldr	r0, [r7, #4]
 8003d92:	f000 f80f 	bl	8003db4 <I2C_TreatErrorCallback>
  }
}
 8003d96:	e002      	b.n	8003d9e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003d98:	bf00      	nop
 8003d9a:	e000      	b.n	8003d9e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003d9c:	bf00      	nop
}
 8003d9e:	bf00      	nop
 8003da0:	3710      	adds	r7, #16
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}
 8003da6:	bf00      	nop
 8003da8:	ffff0000 	.word	0xffff0000
 8003dac:	08003363 	.word	0x08003363
 8003db0:	08003e4b 	.word	0x08003e4b

08003db4 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b082      	sub	sp, #8
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003dc2:	b2db      	uxtb	r3, r3
 8003dc4:	2b60      	cmp	r3, #96	@ 0x60
 8003dc6:	d10e      	bne.n	8003de6 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2220      	movs	r2, #32
 8003dcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f7ff fab5 	bl	800334e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003de4:	e009      	b.n	8003dfa <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2200      	movs	r2, #0
 8003dea:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2200      	movs	r2, #0
 8003df0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8003df4:	6878      	ldr	r0, [r7, #4]
 8003df6:	f7ff faa0 	bl	800333a <HAL_I2C_ErrorCallback>
}
 8003dfa:	bf00      	nop
 8003dfc:	3708      	adds	r7, #8
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}

08003e02 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003e02:	b480      	push	{r7}
 8003e04:	b083      	sub	sp, #12
 8003e06:	af00      	add	r7, sp, #0
 8003e08:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	699b      	ldr	r3, [r3, #24]
 8003e10:	f003 0302 	and.w	r3, r3, #2
 8003e14:	2b02      	cmp	r3, #2
 8003e16:	d103      	bne.n	8003e20 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	699b      	ldr	r3, [r3, #24]
 8003e26:	f003 0301 	and.w	r3, r3, #1
 8003e2a:	2b01      	cmp	r3, #1
 8003e2c:	d007      	beq.n	8003e3e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	699a      	ldr	r2, [r3, #24]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f042 0201 	orr.w	r2, r2, #1
 8003e3c:	619a      	str	r2, [r3, #24]
  }
}
 8003e3e:	bf00      	nop
 8003e40:	370c      	adds	r7, #12
 8003e42:	46bd      	mov	sp, r7
 8003e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e48:	4770      	bx	lr

08003e4a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003e4a:	b580      	push	{r7, lr}
 8003e4c:	b084      	sub	sp, #16
 8003e4e:	af00      	add	r7, sp, #0
 8003e50:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e56:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d003      	beq.n	8003e68 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e64:	2200      	movs	r2, #0
 8003e66:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d003      	beq.n	8003e78 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e74:	2200      	movs	r2, #0
 8003e76:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8003e78:	68f8      	ldr	r0, [r7, #12]
 8003e7a:	f7ff ff9b 	bl	8003db4 <I2C_TreatErrorCallback>
}
 8003e7e:	bf00      	nop
 8003e80:	3710      	adds	r7, #16
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}

08003e86 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003e86:	b580      	push	{r7, lr}
 8003e88:	b084      	sub	sp, #16
 8003e8a:	af00      	add	r7, sp, #0
 8003e8c:	60f8      	str	r0, [r7, #12]
 8003e8e:	60b9      	str	r1, [r7, #8]
 8003e90:	603b      	str	r3, [r7, #0]
 8003e92:	4613      	mov	r3, r2
 8003e94:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e96:	e03b      	b.n	8003f10 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e98:	69ba      	ldr	r2, [r7, #24]
 8003e9a:	6839      	ldr	r1, [r7, #0]
 8003e9c:	68f8      	ldr	r0, [r7, #12]
 8003e9e:	f000 f8d5 	bl	800404c <I2C_IsErrorOccurred>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d001      	beq.n	8003eac <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e041      	b.n	8003f30 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eb2:	d02d      	beq.n	8003f10 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003eb4:	f7fe fb0a 	bl	80024cc <HAL_GetTick>
 8003eb8:	4602      	mov	r2, r0
 8003eba:	69bb      	ldr	r3, [r7, #24]
 8003ebc:	1ad3      	subs	r3, r2, r3
 8003ebe:	683a      	ldr	r2, [r7, #0]
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	d302      	bcc.n	8003eca <I2C_WaitOnFlagUntilTimeout+0x44>
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d122      	bne.n	8003f10 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	699a      	ldr	r2, [r3, #24]
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	4013      	ands	r3, r2
 8003ed4:	68ba      	ldr	r2, [r7, #8]
 8003ed6:	429a      	cmp	r2, r3
 8003ed8:	bf0c      	ite	eq
 8003eda:	2301      	moveq	r3, #1
 8003edc:	2300      	movne	r3, #0
 8003ede:	b2db      	uxtb	r3, r3
 8003ee0:	461a      	mov	r2, r3
 8003ee2:	79fb      	ldrb	r3, [r7, #7]
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d113      	bne.n	8003f10 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003eec:	f043 0220 	orr.w	r2, r3, #32
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2220      	movs	r2, #32
 8003ef8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2200      	movs	r2, #0
 8003f00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2200      	movs	r2, #0
 8003f08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	e00f      	b.n	8003f30 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	699a      	ldr	r2, [r3, #24]
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	4013      	ands	r3, r2
 8003f1a:	68ba      	ldr	r2, [r7, #8]
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	bf0c      	ite	eq
 8003f20:	2301      	moveq	r3, #1
 8003f22:	2300      	movne	r3, #0
 8003f24:	b2db      	uxtb	r3, r3
 8003f26:	461a      	mov	r2, r3
 8003f28:	79fb      	ldrb	r3, [r7, #7]
 8003f2a:	429a      	cmp	r2, r3
 8003f2c:	d0b4      	beq.n	8003e98 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f2e:	2300      	movs	r3, #0
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	3710      	adds	r7, #16
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}

08003f38 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b084      	sub	sp, #16
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	60f8      	str	r0, [r7, #12]
 8003f40:	60b9      	str	r1, [r7, #8]
 8003f42:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003f44:	e033      	b.n	8003fae <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f46:	687a      	ldr	r2, [r7, #4]
 8003f48:	68b9      	ldr	r1, [r7, #8]
 8003f4a:	68f8      	ldr	r0, [r7, #12]
 8003f4c:	f000 f87e 	bl	800404c <I2C_IsErrorOccurred>
 8003f50:	4603      	mov	r3, r0
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d001      	beq.n	8003f5a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
 8003f58:	e031      	b.n	8003fbe <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f60:	d025      	beq.n	8003fae <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f62:	f7fe fab3 	bl	80024cc <HAL_GetTick>
 8003f66:	4602      	mov	r2, r0
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	1ad3      	subs	r3, r2, r3
 8003f6c:	68ba      	ldr	r2, [r7, #8]
 8003f6e:	429a      	cmp	r2, r3
 8003f70:	d302      	bcc.n	8003f78 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d11a      	bne.n	8003fae <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	699b      	ldr	r3, [r3, #24]
 8003f7e:	f003 0302 	and.w	r3, r3, #2
 8003f82:	2b02      	cmp	r3, #2
 8003f84:	d013      	beq.n	8003fae <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f8a:	f043 0220 	orr.w	r2, r3, #32
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	2220      	movs	r2, #32
 8003f96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	e007      	b.n	8003fbe <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	699b      	ldr	r3, [r3, #24]
 8003fb4:	f003 0302 	and.w	r3, r3, #2
 8003fb8:	2b02      	cmp	r3, #2
 8003fba:	d1c4      	bne.n	8003f46 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003fbc:	2300      	movs	r3, #0
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3710      	adds	r7, #16
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}

08003fc6 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003fc6:	b580      	push	{r7, lr}
 8003fc8:	b084      	sub	sp, #16
 8003fca:	af00      	add	r7, sp, #0
 8003fcc:	60f8      	str	r0, [r7, #12]
 8003fce:	60b9      	str	r1, [r7, #8]
 8003fd0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003fd2:	e02f      	b.n	8004034 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fd4:	687a      	ldr	r2, [r7, #4]
 8003fd6:	68b9      	ldr	r1, [r7, #8]
 8003fd8:	68f8      	ldr	r0, [r7, #12]
 8003fda:	f000 f837 	bl	800404c <I2C_IsErrorOccurred>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d001      	beq.n	8003fe8 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	e02d      	b.n	8004044 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fe8:	f7fe fa70 	bl	80024cc <HAL_GetTick>
 8003fec:	4602      	mov	r2, r0
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	1ad3      	subs	r3, r2, r3
 8003ff2:	68ba      	ldr	r2, [r7, #8]
 8003ff4:	429a      	cmp	r2, r3
 8003ff6:	d302      	bcc.n	8003ffe <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d11a      	bne.n	8004034 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	699b      	ldr	r3, [r3, #24]
 8004004:	f003 0320 	and.w	r3, r3, #32
 8004008:	2b20      	cmp	r3, #32
 800400a:	d013      	beq.n	8004034 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004010:	f043 0220 	orr.w	r2, r3, #32
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	2220      	movs	r2, #32
 800401c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2200      	movs	r2, #0
 8004024:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2200      	movs	r2, #0
 800402c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8004030:	2301      	movs	r3, #1
 8004032:	e007      	b.n	8004044 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	699b      	ldr	r3, [r3, #24]
 800403a:	f003 0320 	and.w	r3, r3, #32
 800403e:	2b20      	cmp	r3, #32
 8004040:	d1c8      	bne.n	8003fd4 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004042:	2300      	movs	r3, #0
}
 8004044:	4618      	mov	r0, r3
 8004046:	3710      	adds	r7, #16
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}

0800404c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b08a      	sub	sp, #40	@ 0x28
 8004050:	af00      	add	r7, sp, #0
 8004052:	60f8      	str	r0, [r7, #12]
 8004054:	60b9      	str	r1, [r7, #8]
 8004056:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004058:	2300      	movs	r3, #0
 800405a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	699b      	ldr	r3, [r3, #24]
 8004064:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004066:	2300      	movs	r3, #0
 8004068:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800406e:	69bb      	ldr	r3, [r7, #24]
 8004070:	f003 0310 	and.w	r3, r3, #16
 8004074:	2b00      	cmp	r3, #0
 8004076:	d068      	beq.n	800414a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	2210      	movs	r2, #16
 800407e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004080:	e049      	b.n	8004116 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004088:	d045      	beq.n	8004116 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800408a:	f7fe fa1f 	bl	80024cc <HAL_GetTick>
 800408e:	4602      	mov	r2, r0
 8004090:	69fb      	ldr	r3, [r7, #28]
 8004092:	1ad3      	subs	r3, r2, r3
 8004094:	68ba      	ldr	r2, [r7, #8]
 8004096:	429a      	cmp	r2, r3
 8004098:	d302      	bcc.n	80040a0 <I2C_IsErrorOccurred+0x54>
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d13a      	bne.n	8004116 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80040aa:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80040b2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	699b      	ldr	r3, [r3, #24]
 80040ba:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80040be:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80040c2:	d121      	bne.n	8004108 <I2C_IsErrorOccurred+0xbc>
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80040ca:	d01d      	beq.n	8004108 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80040cc:	7cfb      	ldrb	r3, [r7, #19]
 80040ce:	2b20      	cmp	r3, #32
 80040d0:	d01a      	beq.n	8004108 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	685a      	ldr	r2, [r3, #4]
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80040e0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80040e2:	f7fe f9f3 	bl	80024cc <HAL_GetTick>
 80040e6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80040e8:	e00e      	b.n	8004108 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80040ea:	f7fe f9ef 	bl	80024cc <HAL_GetTick>
 80040ee:	4602      	mov	r2, r0
 80040f0:	69fb      	ldr	r3, [r7, #28]
 80040f2:	1ad3      	subs	r3, r2, r3
 80040f4:	2b19      	cmp	r3, #25
 80040f6:	d907      	bls.n	8004108 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80040f8:	6a3b      	ldr	r3, [r7, #32]
 80040fa:	f043 0320 	orr.w	r3, r3, #32
 80040fe:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004100:	2301      	movs	r3, #1
 8004102:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8004106:	e006      	b.n	8004116 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	699b      	ldr	r3, [r3, #24]
 800410e:	f003 0320 	and.w	r3, r3, #32
 8004112:	2b20      	cmp	r3, #32
 8004114:	d1e9      	bne.n	80040ea <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	699b      	ldr	r3, [r3, #24]
 800411c:	f003 0320 	and.w	r3, r3, #32
 8004120:	2b20      	cmp	r3, #32
 8004122:	d003      	beq.n	800412c <I2C_IsErrorOccurred+0xe0>
 8004124:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004128:	2b00      	cmp	r3, #0
 800412a:	d0aa      	beq.n	8004082 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800412c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004130:	2b00      	cmp	r3, #0
 8004132:	d103      	bne.n	800413c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	2220      	movs	r2, #32
 800413a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800413c:	6a3b      	ldr	r3, [r7, #32]
 800413e:	f043 0304 	orr.w	r3, r3, #4
 8004142:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004144:	2301      	movs	r3, #1
 8004146:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	699b      	ldr	r3, [r3, #24]
 8004150:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004152:	69bb      	ldr	r3, [r7, #24]
 8004154:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004158:	2b00      	cmp	r3, #0
 800415a:	d00b      	beq.n	8004174 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800415c:	6a3b      	ldr	r3, [r7, #32]
 800415e:	f043 0301 	orr.w	r3, r3, #1
 8004162:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800416c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004174:	69bb      	ldr	r3, [r7, #24]
 8004176:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800417a:	2b00      	cmp	r3, #0
 800417c:	d00b      	beq.n	8004196 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800417e:	6a3b      	ldr	r3, [r7, #32]
 8004180:	f043 0308 	orr.w	r3, r3, #8
 8004184:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800418e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004190:	2301      	movs	r3, #1
 8004192:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004196:	69bb      	ldr	r3, [r7, #24]
 8004198:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800419c:	2b00      	cmp	r3, #0
 800419e:	d00b      	beq.n	80041b8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80041a0:	6a3b      	ldr	r3, [r7, #32]
 80041a2:	f043 0302 	orr.w	r3, r3, #2
 80041a6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80041b0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80041b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d01c      	beq.n	80041fa <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80041c0:	68f8      	ldr	r0, [r7, #12]
 80041c2:	f7ff fe1e 	bl	8003e02 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	6859      	ldr	r1, [r3, #4]
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	4b0d      	ldr	r3, [pc, #52]	@ (8004208 <I2C_IsErrorOccurred+0x1bc>)
 80041d2:	400b      	ands	r3, r1
 80041d4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80041da:	6a3b      	ldr	r3, [r7, #32]
 80041dc:	431a      	orrs	r2, r3
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2220      	movs	r2, #32
 80041e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2200      	movs	r2, #0
 80041ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2200      	movs	r2, #0
 80041f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80041fa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80041fe:	4618      	mov	r0, r3
 8004200:	3728      	adds	r7, #40	@ 0x28
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}
 8004206:	bf00      	nop
 8004208:	fe00e800 	.word	0xfe00e800

0800420c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800420c:	b480      	push	{r7}
 800420e:	b087      	sub	sp, #28
 8004210:	af00      	add	r7, sp, #0
 8004212:	60f8      	str	r0, [r7, #12]
 8004214:	607b      	str	r3, [r7, #4]
 8004216:	460b      	mov	r3, r1
 8004218:	817b      	strh	r3, [r7, #10]
 800421a:	4613      	mov	r3, r2
 800421c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800421e:	897b      	ldrh	r3, [r7, #10]
 8004220:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004224:	7a7b      	ldrb	r3, [r7, #9]
 8004226:	041b      	lsls	r3, r3, #16
 8004228:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800422c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004232:	6a3b      	ldr	r3, [r7, #32]
 8004234:	4313      	orrs	r3, r2
 8004236:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800423a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	685a      	ldr	r2, [r3, #4]
 8004242:	6a3b      	ldr	r3, [r7, #32]
 8004244:	0d5b      	lsrs	r3, r3, #21
 8004246:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800424a:	4b08      	ldr	r3, [pc, #32]	@ (800426c <I2C_TransferConfig+0x60>)
 800424c:	430b      	orrs	r3, r1
 800424e:	43db      	mvns	r3, r3
 8004250:	ea02 0103 	and.w	r1, r2, r3
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	697a      	ldr	r2, [r7, #20]
 800425a:	430a      	orrs	r2, r1
 800425c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800425e:	bf00      	nop
 8004260:	371c      	adds	r7, #28
 8004262:	46bd      	mov	sp, r7
 8004264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004268:	4770      	bx	lr
 800426a:	bf00      	nop
 800426c:	03ff63ff 	.word	0x03ff63ff

08004270 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004270:	b480      	push	{r7}
 8004272:	b085      	sub	sp, #20
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
 8004278:	460b      	mov	r3, r1
 800427a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800427c:	2300      	movs	r3, #0
 800427e:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004280:	887b      	ldrh	r3, [r7, #2]
 8004282:	f003 0301 	and.w	r3, r3, #1
 8004286:	2b00      	cmp	r3, #0
 8004288:	d00f      	beq.n	80042aa <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8004290:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004298:	b2db      	uxtb	r3, r3
 800429a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800429e:	2b28      	cmp	r3, #40	@ 0x28
 80042a0:	d003      	beq.n	80042aa <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80042a8:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80042aa:	887b      	ldrh	r3, [r7, #2]
 80042ac:	f003 0302 	and.w	r3, r3, #2
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d00f      	beq.n	80042d4 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 80042ba:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80042c2:	b2db      	uxtb	r3, r3
 80042c4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80042c8:	2b28      	cmp	r3, #40	@ 0x28
 80042ca:	d003      	beq.n	80042d4 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80042d2:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80042d4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	da03      	bge.n	80042e4 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80042e2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80042e4:	887b      	ldrh	r3, [r7, #2]
 80042e6:	2b10      	cmp	r3, #16
 80042e8:	d103      	bne.n	80042f2 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80042f0:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80042f2:	887b      	ldrh	r3, [r7, #2]
 80042f4:	2b20      	cmp	r3, #32
 80042f6:	d103      	bne.n	8004300 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	f043 0320 	orr.w	r3, r3, #32
 80042fe:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004300:	887b      	ldrh	r3, [r7, #2]
 8004302:	2b40      	cmp	r3, #64	@ 0x40
 8004304:	d103      	bne.n	800430e <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800430c:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	6819      	ldr	r1, [r3, #0]
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	43da      	mvns	r2, r3
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	400a      	ands	r2, r1
 800431e:	601a      	str	r2, [r3, #0]
}
 8004320:	bf00      	nop
 8004322:	3714      	adds	r7, #20
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr

0800432c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800432c:	b480      	push	{r7}
 800432e:	b083      	sub	sp, #12
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
 8004334:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800433c:	b2db      	uxtb	r3, r3
 800433e:	2b20      	cmp	r3, #32
 8004340:	d138      	bne.n	80043b4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004348:	2b01      	cmp	r3, #1
 800434a:	d101      	bne.n	8004350 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800434c:	2302      	movs	r3, #2
 800434e:	e032      	b.n	80043b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2201      	movs	r2, #1
 8004354:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2224      	movs	r2, #36	@ 0x24
 800435c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f022 0201 	bic.w	r2, r2, #1
 800436e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	681a      	ldr	r2, [r3, #0]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800437e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	6819      	ldr	r1, [r3, #0]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	683a      	ldr	r2, [r7, #0]
 800438c:	430a      	orrs	r2, r1
 800438e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	681a      	ldr	r2, [r3, #0]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f042 0201 	orr.w	r2, r2, #1
 800439e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2220      	movs	r2, #32
 80043a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2200      	movs	r2, #0
 80043ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80043b0:	2300      	movs	r3, #0
 80043b2:	e000      	b.n	80043b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80043b4:	2302      	movs	r3, #2
  }
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	370c      	adds	r7, #12
 80043ba:	46bd      	mov	sp, r7
 80043bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c0:	4770      	bx	lr

080043c2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80043c2:	b480      	push	{r7}
 80043c4:	b085      	sub	sp, #20
 80043c6:	af00      	add	r7, sp, #0
 80043c8:	6078      	str	r0, [r7, #4]
 80043ca:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80043d2:	b2db      	uxtb	r3, r3
 80043d4:	2b20      	cmp	r3, #32
 80043d6:	d139      	bne.n	800444c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80043de:	2b01      	cmp	r3, #1
 80043e0:	d101      	bne.n	80043e6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80043e2:	2302      	movs	r3, #2
 80043e4:	e033      	b.n	800444e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2201      	movs	r2, #1
 80043ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2224      	movs	r2, #36	@ 0x24
 80043f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f022 0201 	bic.w	r2, r2, #1
 8004404:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004414:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	021b      	lsls	r3, r3, #8
 800441a:	68fa      	ldr	r2, [r7, #12]
 800441c:	4313      	orrs	r3, r2
 800441e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	68fa      	ldr	r2, [r7, #12]
 8004426:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	681a      	ldr	r2, [r3, #0]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f042 0201 	orr.w	r2, r2, #1
 8004436:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2220      	movs	r2, #32
 800443c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2200      	movs	r2, #0
 8004444:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004448:	2300      	movs	r3, #0
 800444a:	e000      	b.n	800444e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800444c:	2302      	movs	r3, #2
  }
}
 800444e:	4618      	mov	r0, r3
 8004450:	3714      	adds	r7, #20
 8004452:	46bd      	mov	sp, r7
 8004454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004458:	4770      	bx	lr
	...

0800445c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800445c:	b480      	push	{r7}
 800445e:	b085      	sub	sp, #20
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d141      	bne.n	80044ee <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800446a:	4b4b      	ldr	r3, [pc, #300]	@ (8004598 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004472:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004476:	d131      	bne.n	80044dc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004478:	4b47      	ldr	r3, [pc, #284]	@ (8004598 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800447a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800447e:	4a46      	ldr	r2, [pc, #280]	@ (8004598 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004480:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004484:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004488:	4b43      	ldr	r3, [pc, #268]	@ (8004598 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004490:	4a41      	ldr	r2, [pc, #260]	@ (8004598 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004492:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004496:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004498:	4b40      	ldr	r3, [pc, #256]	@ (800459c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	2232      	movs	r2, #50	@ 0x32
 800449e:	fb02 f303 	mul.w	r3, r2, r3
 80044a2:	4a3f      	ldr	r2, [pc, #252]	@ (80045a0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80044a4:	fba2 2303 	umull	r2, r3, r2, r3
 80044a8:	0c9b      	lsrs	r3, r3, #18
 80044aa:	3301      	adds	r3, #1
 80044ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80044ae:	e002      	b.n	80044b6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	3b01      	subs	r3, #1
 80044b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80044b6:	4b38      	ldr	r3, [pc, #224]	@ (8004598 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044b8:	695b      	ldr	r3, [r3, #20]
 80044ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044c2:	d102      	bne.n	80044ca <HAL_PWREx_ControlVoltageScaling+0x6e>
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d1f2      	bne.n	80044b0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80044ca:	4b33      	ldr	r3, [pc, #204]	@ (8004598 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044cc:	695b      	ldr	r3, [r3, #20]
 80044ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044d6:	d158      	bne.n	800458a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80044d8:	2303      	movs	r3, #3
 80044da:	e057      	b.n	800458c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80044dc:	4b2e      	ldr	r3, [pc, #184]	@ (8004598 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80044e2:	4a2d      	ldr	r2, [pc, #180]	@ (8004598 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80044e8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80044ec:	e04d      	b.n	800458a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80044f4:	d141      	bne.n	800457a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80044f6:	4b28      	ldr	r3, [pc, #160]	@ (8004598 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80044fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004502:	d131      	bne.n	8004568 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004504:	4b24      	ldr	r3, [pc, #144]	@ (8004598 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004506:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800450a:	4a23      	ldr	r2, [pc, #140]	@ (8004598 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800450c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004510:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004514:	4b20      	ldr	r3, [pc, #128]	@ (8004598 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800451c:	4a1e      	ldr	r2, [pc, #120]	@ (8004598 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800451e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004522:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004524:	4b1d      	ldr	r3, [pc, #116]	@ (800459c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	2232      	movs	r2, #50	@ 0x32
 800452a:	fb02 f303 	mul.w	r3, r2, r3
 800452e:	4a1c      	ldr	r2, [pc, #112]	@ (80045a0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004530:	fba2 2303 	umull	r2, r3, r2, r3
 8004534:	0c9b      	lsrs	r3, r3, #18
 8004536:	3301      	adds	r3, #1
 8004538:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800453a:	e002      	b.n	8004542 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	3b01      	subs	r3, #1
 8004540:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004542:	4b15      	ldr	r3, [pc, #84]	@ (8004598 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004544:	695b      	ldr	r3, [r3, #20]
 8004546:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800454a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800454e:	d102      	bne.n	8004556 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d1f2      	bne.n	800453c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004556:	4b10      	ldr	r3, [pc, #64]	@ (8004598 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004558:	695b      	ldr	r3, [r3, #20]
 800455a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800455e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004562:	d112      	bne.n	800458a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004564:	2303      	movs	r3, #3
 8004566:	e011      	b.n	800458c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004568:	4b0b      	ldr	r3, [pc, #44]	@ (8004598 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800456a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800456e:	4a0a      	ldr	r2, [pc, #40]	@ (8004598 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004570:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004574:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004578:	e007      	b.n	800458a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800457a:	4b07      	ldr	r3, [pc, #28]	@ (8004598 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004582:	4a05      	ldr	r2, [pc, #20]	@ (8004598 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004584:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004588:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800458a:	2300      	movs	r3, #0
}
 800458c:	4618      	mov	r0, r3
 800458e:	3714      	adds	r7, #20
 8004590:	46bd      	mov	sp, r7
 8004592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004596:	4770      	bx	lr
 8004598:	40007000 	.word	0x40007000
 800459c:	20000010 	.word	0x20000010
 80045a0:	431bde83 	.word	0x431bde83

080045a4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80045a4:	b480      	push	{r7}
 80045a6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80045a8:	4b05      	ldr	r3, [pc, #20]	@ (80045c0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	4a04      	ldr	r2, [pc, #16]	@ (80045c0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80045ae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80045b2:	6093      	str	r3, [r2, #8]
}
 80045b4:	bf00      	nop
 80045b6:	46bd      	mov	sp, r7
 80045b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045bc:	4770      	bx	lr
 80045be:	bf00      	nop
 80045c0:	40007000 	.word	0x40007000

080045c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b088      	sub	sp, #32
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d101      	bne.n	80045d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	e2fe      	b.n	8004bd4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f003 0301 	and.w	r3, r3, #1
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d075      	beq.n	80046ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80045e2:	4b97      	ldr	r3, [pc, #604]	@ (8004840 <HAL_RCC_OscConfig+0x27c>)
 80045e4:	689b      	ldr	r3, [r3, #8]
 80045e6:	f003 030c 	and.w	r3, r3, #12
 80045ea:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80045ec:	4b94      	ldr	r3, [pc, #592]	@ (8004840 <HAL_RCC_OscConfig+0x27c>)
 80045ee:	68db      	ldr	r3, [r3, #12]
 80045f0:	f003 0303 	and.w	r3, r3, #3
 80045f4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80045f6:	69bb      	ldr	r3, [r7, #24]
 80045f8:	2b0c      	cmp	r3, #12
 80045fa:	d102      	bne.n	8004602 <HAL_RCC_OscConfig+0x3e>
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	2b03      	cmp	r3, #3
 8004600:	d002      	beq.n	8004608 <HAL_RCC_OscConfig+0x44>
 8004602:	69bb      	ldr	r3, [r7, #24]
 8004604:	2b08      	cmp	r3, #8
 8004606:	d10b      	bne.n	8004620 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004608:	4b8d      	ldr	r3, [pc, #564]	@ (8004840 <HAL_RCC_OscConfig+0x27c>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004610:	2b00      	cmp	r3, #0
 8004612:	d05b      	beq.n	80046cc <HAL_RCC_OscConfig+0x108>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d157      	bne.n	80046cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800461c:	2301      	movs	r3, #1
 800461e:	e2d9      	b.n	8004bd4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004628:	d106      	bne.n	8004638 <HAL_RCC_OscConfig+0x74>
 800462a:	4b85      	ldr	r3, [pc, #532]	@ (8004840 <HAL_RCC_OscConfig+0x27c>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a84      	ldr	r2, [pc, #528]	@ (8004840 <HAL_RCC_OscConfig+0x27c>)
 8004630:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004634:	6013      	str	r3, [r2, #0]
 8004636:	e01d      	b.n	8004674 <HAL_RCC_OscConfig+0xb0>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004640:	d10c      	bne.n	800465c <HAL_RCC_OscConfig+0x98>
 8004642:	4b7f      	ldr	r3, [pc, #508]	@ (8004840 <HAL_RCC_OscConfig+0x27c>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a7e      	ldr	r2, [pc, #504]	@ (8004840 <HAL_RCC_OscConfig+0x27c>)
 8004648:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800464c:	6013      	str	r3, [r2, #0]
 800464e:	4b7c      	ldr	r3, [pc, #496]	@ (8004840 <HAL_RCC_OscConfig+0x27c>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a7b      	ldr	r2, [pc, #492]	@ (8004840 <HAL_RCC_OscConfig+0x27c>)
 8004654:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004658:	6013      	str	r3, [r2, #0]
 800465a:	e00b      	b.n	8004674 <HAL_RCC_OscConfig+0xb0>
 800465c:	4b78      	ldr	r3, [pc, #480]	@ (8004840 <HAL_RCC_OscConfig+0x27c>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a77      	ldr	r2, [pc, #476]	@ (8004840 <HAL_RCC_OscConfig+0x27c>)
 8004662:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004666:	6013      	str	r3, [r2, #0]
 8004668:	4b75      	ldr	r3, [pc, #468]	@ (8004840 <HAL_RCC_OscConfig+0x27c>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a74      	ldr	r2, [pc, #464]	@ (8004840 <HAL_RCC_OscConfig+0x27c>)
 800466e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004672:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d013      	beq.n	80046a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800467c:	f7fd ff26 	bl	80024cc <HAL_GetTick>
 8004680:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004682:	e008      	b.n	8004696 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004684:	f7fd ff22 	bl	80024cc <HAL_GetTick>
 8004688:	4602      	mov	r2, r0
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	1ad3      	subs	r3, r2, r3
 800468e:	2b64      	cmp	r3, #100	@ 0x64
 8004690:	d901      	bls.n	8004696 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004692:	2303      	movs	r3, #3
 8004694:	e29e      	b.n	8004bd4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004696:	4b6a      	ldr	r3, [pc, #424]	@ (8004840 <HAL_RCC_OscConfig+0x27c>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d0f0      	beq.n	8004684 <HAL_RCC_OscConfig+0xc0>
 80046a2:	e014      	b.n	80046ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046a4:	f7fd ff12 	bl	80024cc <HAL_GetTick>
 80046a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80046aa:	e008      	b.n	80046be <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046ac:	f7fd ff0e 	bl	80024cc <HAL_GetTick>
 80046b0:	4602      	mov	r2, r0
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	1ad3      	subs	r3, r2, r3
 80046b6:	2b64      	cmp	r3, #100	@ 0x64
 80046b8:	d901      	bls.n	80046be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80046ba:	2303      	movs	r3, #3
 80046bc:	e28a      	b.n	8004bd4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80046be:	4b60      	ldr	r3, [pc, #384]	@ (8004840 <HAL_RCC_OscConfig+0x27c>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d1f0      	bne.n	80046ac <HAL_RCC_OscConfig+0xe8>
 80046ca:	e000      	b.n	80046ce <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f003 0302 	and.w	r3, r3, #2
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d075      	beq.n	80047c6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80046da:	4b59      	ldr	r3, [pc, #356]	@ (8004840 <HAL_RCC_OscConfig+0x27c>)
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	f003 030c 	and.w	r3, r3, #12
 80046e2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80046e4:	4b56      	ldr	r3, [pc, #344]	@ (8004840 <HAL_RCC_OscConfig+0x27c>)
 80046e6:	68db      	ldr	r3, [r3, #12]
 80046e8:	f003 0303 	and.w	r3, r3, #3
 80046ec:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80046ee:	69bb      	ldr	r3, [r7, #24]
 80046f0:	2b0c      	cmp	r3, #12
 80046f2:	d102      	bne.n	80046fa <HAL_RCC_OscConfig+0x136>
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	2b02      	cmp	r3, #2
 80046f8:	d002      	beq.n	8004700 <HAL_RCC_OscConfig+0x13c>
 80046fa:	69bb      	ldr	r3, [r7, #24]
 80046fc:	2b04      	cmp	r3, #4
 80046fe:	d11f      	bne.n	8004740 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004700:	4b4f      	ldr	r3, [pc, #316]	@ (8004840 <HAL_RCC_OscConfig+0x27c>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004708:	2b00      	cmp	r3, #0
 800470a:	d005      	beq.n	8004718 <HAL_RCC_OscConfig+0x154>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	68db      	ldr	r3, [r3, #12]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d101      	bne.n	8004718 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004714:	2301      	movs	r3, #1
 8004716:	e25d      	b.n	8004bd4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004718:	4b49      	ldr	r3, [pc, #292]	@ (8004840 <HAL_RCC_OscConfig+0x27c>)
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	691b      	ldr	r3, [r3, #16]
 8004724:	061b      	lsls	r3, r3, #24
 8004726:	4946      	ldr	r1, [pc, #280]	@ (8004840 <HAL_RCC_OscConfig+0x27c>)
 8004728:	4313      	orrs	r3, r2
 800472a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800472c:	4b45      	ldr	r3, [pc, #276]	@ (8004844 <HAL_RCC_OscConfig+0x280>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4618      	mov	r0, r3
 8004732:	f7fd fe7f 	bl	8002434 <HAL_InitTick>
 8004736:	4603      	mov	r3, r0
 8004738:	2b00      	cmp	r3, #0
 800473a:	d043      	beq.n	80047c4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800473c:	2301      	movs	r3, #1
 800473e:	e249      	b.n	8004bd4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	68db      	ldr	r3, [r3, #12]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d023      	beq.n	8004790 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004748:	4b3d      	ldr	r3, [pc, #244]	@ (8004840 <HAL_RCC_OscConfig+0x27c>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a3c      	ldr	r2, [pc, #240]	@ (8004840 <HAL_RCC_OscConfig+0x27c>)
 800474e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004752:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004754:	f7fd feba 	bl	80024cc <HAL_GetTick>
 8004758:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800475a:	e008      	b.n	800476e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800475c:	f7fd feb6 	bl	80024cc <HAL_GetTick>
 8004760:	4602      	mov	r2, r0
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	1ad3      	subs	r3, r2, r3
 8004766:	2b02      	cmp	r3, #2
 8004768:	d901      	bls.n	800476e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800476a:	2303      	movs	r3, #3
 800476c:	e232      	b.n	8004bd4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800476e:	4b34      	ldr	r3, [pc, #208]	@ (8004840 <HAL_RCC_OscConfig+0x27c>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004776:	2b00      	cmp	r3, #0
 8004778:	d0f0      	beq.n	800475c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800477a:	4b31      	ldr	r3, [pc, #196]	@ (8004840 <HAL_RCC_OscConfig+0x27c>)
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	691b      	ldr	r3, [r3, #16]
 8004786:	061b      	lsls	r3, r3, #24
 8004788:	492d      	ldr	r1, [pc, #180]	@ (8004840 <HAL_RCC_OscConfig+0x27c>)
 800478a:	4313      	orrs	r3, r2
 800478c:	604b      	str	r3, [r1, #4]
 800478e:	e01a      	b.n	80047c6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004790:	4b2b      	ldr	r3, [pc, #172]	@ (8004840 <HAL_RCC_OscConfig+0x27c>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a2a      	ldr	r2, [pc, #168]	@ (8004840 <HAL_RCC_OscConfig+0x27c>)
 8004796:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800479a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800479c:	f7fd fe96 	bl	80024cc <HAL_GetTick>
 80047a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80047a2:	e008      	b.n	80047b6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047a4:	f7fd fe92 	bl	80024cc <HAL_GetTick>
 80047a8:	4602      	mov	r2, r0
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	1ad3      	subs	r3, r2, r3
 80047ae:	2b02      	cmp	r3, #2
 80047b0:	d901      	bls.n	80047b6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80047b2:	2303      	movs	r3, #3
 80047b4:	e20e      	b.n	8004bd4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80047b6:	4b22      	ldr	r3, [pc, #136]	@ (8004840 <HAL_RCC_OscConfig+0x27c>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d1f0      	bne.n	80047a4 <HAL_RCC_OscConfig+0x1e0>
 80047c2:	e000      	b.n	80047c6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80047c4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f003 0308 	and.w	r3, r3, #8
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d041      	beq.n	8004856 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	695b      	ldr	r3, [r3, #20]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d01c      	beq.n	8004814 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80047da:	4b19      	ldr	r3, [pc, #100]	@ (8004840 <HAL_RCC_OscConfig+0x27c>)
 80047dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80047e0:	4a17      	ldr	r2, [pc, #92]	@ (8004840 <HAL_RCC_OscConfig+0x27c>)
 80047e2:	f043 0301 	orr.w	r3, r3, #1
 80047e6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047ea:	f7fd fe6f 	bl	80024cc <HAL_GetTick>
 80047ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80047f0:	e008      	b.n	8004804 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047f2:	f7fd fe6b 	bl	80024cc <HAL_GetTick>
 80047f6:	4602      	mov	r2, r0
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	1ad3      	subs	r3, r2, r3
 80047fc:	2b02      	cmp	r3, #2
 80047fe:	d901      	bls.n	8004804 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004800:	2303      	movs	r3, #3
 8004802:	e1e7      	b.n	8004bd4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004804:	4b0e      	ldr	r3, [pc, #56]	@ (8004840 <HAL_RCC_OscConfig+0x27c>)
 8004806:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800480a:	f003 0302 	and.w	r3, r3, #2
 800480e:	2b00      	cmp	r3, #0
 8004810:	d0ef      	beq.n	80047f2 <HAL_RCC_OscConfig+0x22e>
 8004812:	e020      	b.n	8004856 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004814:	4b0a      	ldr	r3, [pc, #40]	@ (8004840 <HAL_RCC_OscConfig+0x27c>)
 8004816:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800481a:	4a09      	ldr	r2, [pc, #36]	@ (8004840 <HAL_RCC_OscConfig+0x27c>)
 800481c:	f023 0301 	bic.w	r3, r3, #1
 8004820:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004824:	f7fd fe52 	bl	80024cc <HAL_GetTick>
 8004828:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800482a:	e00d      	b.n	8004848 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800482c:	f7fd fe4e 	bl	80024cc <HAL_GetTick>
 8004830:	4602      	mov	r2, r0
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	1ad3      	subs	r3, r2, r3
 8004836:	2b02      	cmp	r3, #2
 8004838:	d906      	bls.n	8004848 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800483a:	2303      	movs	r3, #3
 800483c:	e1ca      	b.n	8004bd4 <HAL_RCC_OscConfig+0x610>
 800483e:	bf00      	nop
 8004840:	40021000 	.word	0x40021000
 8004844:	20000014 	.word	0x20000014
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004848:	4b8c      	ldr	r3, [pc, #560]	@ (8004a7c <HAL_RCC_OscConfig+0x4b8>)
 800484a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800484e:	f003 0302 	and.w	r3, r3, #2
 8004852:	2b00      	cmp	r3, #0
 8004854:	d1ea      	bne.n	800482c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f003 0304 	and.w	r3, r3, #4
 800485e:	2b00      	cmp	r3, #0
 8004860:	f000 80a6 	beq.w	80049b0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004864:	2300      	movs	r3, #0
 8004866:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004868:	4b84      	ldr	r3, [pc, #528]	@ (8004a7c <HAL_RCC_OscConfig+0x4b8>)
 800486a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800486c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004870:	2b00      	cmp	r3, #0
 8004872:	d101      	bne.n	8004878 <HAL_RCC_OscConfig+0x2b4>
 8004874:	2301      	movs	r3, #1
 8004876:	e000      	b.n	800487a <HAL_RCC_OscConfig+0x2b6>
 8004878:	2300      	movs	r3, #0
 800487a:	2b00      	cmp	r3, #0
 800487c:	d00d      	beq.n	800489a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800487e:	4b7f      	ldr	r3, [pc, #508]	@ (8004a7c <HAL_RCC_OscConfig+0x4b8>)
 8004880:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004882:	4a7e      	ldr	r2, [pc, #504]	@ (8004a7c <HAL_RCC_OscConfig+0x4b8>)
 8004884:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004888:	6593      	str	r3, [r2, #88]	@ 0x58
 800488a:	4b7c      	ldr	r3, [pc, #496]	@ (8004a7c <HAL_RCC_OscConfig+0x4b8>)
 800488c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800488e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004892:	60fb      	str	r3, [r7, #12]
 8004894:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004896:	2301      	movs	r3, #1
 8004898:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800489a:	4b79      	ldr	r3, [pc, #484]	@ (8004a80 <HAL_RCC_OscConfig+0x4bc>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d118      	bne.n	80048d8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80048a6:	4b76      	ldr	r3, [pc, #472]	@ (8004a80 <HAL_RCC_OscConfig+0x4bc>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a75      	ldr	r2, [pc, #468]	@ (8004a80 <HAL_RCC_OscConfig+0x4bc>)
 80048ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80048b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048b2:	f7fd fe0b 	bl	80024cc <HAL_GetTick>
 80048b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80048b8:	e008      	b.n	80048cc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048ba:	f7fd fe07 	bl	80024cc <HAL_GetTick>
 80048be:	4602      	mov	r2, r0
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	1ad3      	subs	r3, r2, r3
 80048c4:	2b02      	cmp	r3, #2
 80048c6:	d901      	bls.n	80048cc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80048c8:	2303      	movs	r3, #3
 80048ca:	e183      	b.n	8004bd4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80048cc:	4b6c      	ldr	r3, [pc, #432]	@ (8004a80 <HAL_RCC_OscConfig+0x4bc>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d0f0      	beq.n	80048ba <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	2b01      	cmp	r3, #1
 80048de:	d108      	bne.n	80048f2 <HAL_RCC_OscConfig+0x32e>
 80048e0:	4b66      	ldr	r3, [pc, #408]	@ (8004a7c <HAL_RCC_OscConfig+0x4b8>)
 80048e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048e6:	4a65      	ldr	r2, [pc, #404]	@ (8004a7c <HAL_RCC_OscConfig+0x4b8>)
 80048e8:	f043 0301 	orr.w	r3, r3, #1
 80048ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80048f0:	e024      	b.n	800493c <HAL_RCC_OscConfig+0x378>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	689b      	ldr	r3, [r3, #8]
 80048f6:	2b05      	cmp	r3, #5
 80048f8:	d110      	bne.n	800491c <HAL_RCC_OscConfig+0x358>
 80048fa:	4b60      	ldr	r3, [pc, #384]	@ (8004a7c <HAL_RCC_OscConfig+0x4b8>)
 80048fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004900:	4a5e      	ldr	r2, [pc, #376]	@ (8004a7c <HAL_RCC_OscConfig+0x4b8>)
 8004902:	f043 0304 	orr.w	r3, r3, #4
 8004906:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800490a:	4b5c      	ldr	r3, [pc, #368]	@ (8004a7c <HAL_RCC_OscConfig+0x4b8>)
 800490c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004910:	4a5a      	ldr	r2, [pc, #360]	@ (8004a7c <HAL_RCC_OscConfig+0x4b8>)
 8004912:	f043 0301 	orr.w	r3, r3, #1
 8004916:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800491a:	e00f      	b.n	800493c <HAL_RCC_OscConfig+0x378>
 800491c:	4b57      	ldr	r3, [pc, #348]	@ (8004a7c <HAL_RCC_OscConfig+0x4b8>)
 800491e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004922:	4a56      	ldr	r2, [pc, #344]	@ (8004a7c <HAL_RCC_OscConfig+0x4b8>)
 8004924:	f023 0301 	bic.w	r3, r3, #1
 8004928:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800492c:	4b53      	ldr	r3, [pc, #332]	@ (8004a7c <HAL_RCC_OscConfig+0x4b8>)
 800492e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004932:	4a52      	ldr	r2, [pc, #328]	@ (8004a7c <HAL_RCC_OscConfig+0x4b8>)
 8004934:	f023 0304 	bic.w	r3, r3, #4
 8004938:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d016      	beq.n	8004972 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004944:	f7fd fdc2 	bl	80024cc <HAL_GetTick>
 8004948:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800494a:	e00a      	b.n	8004962 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800494c:	f7fd fdbe 	bl	80024cc <HAL_GetTick>
 8004950:	4602      	mov	r2, r0
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	1ad3      	subs	r3, r2, r3
 8004956:	f241 3288 	movw	r2, #5000	@ 0x1388
 800495a:	4293      	cmp	r3, r2
 800495c:	d901      	bls.n	8004962 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800495e:	2303      	movs	r3, #3
 8004960:	e138      	b.n	8004bd4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004962:	4b46      	ldr	r3, [pc, #280]	@ (8004a7c <HAL_RCC_OscConfig+0x4b8>)
 8004964:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004968:	f003 0302 	and.w	r3, r3, #2
 800496c:	2b00      	cmp	r3, #0
 800496e:	d0ed      	beq.n	800494c <HAL_RCC_OscConfig+0x388>
 8004970:	e015      	b.n	800499e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004972:	f7fd fdab 	bl	80024cc <HAL_GetTick>
 8004976:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004978:	e00a      	b.n	8004990 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800497a:	f7fd fda7 	bl	80024cc <HAL_GetTick>
 800497e:	4602      	mov	r2, r0
 8004980:	693b      	ldr	r3, [r7, #16]
 8004982:	1ad3      	subs	r3, r2, r3
 8004984:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004988:	4293      	cmp	r3, r2
 800498a:	d901      	bls.n	8004990 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800498c:	2303      	movs	r3, #3
 800498e:	e121      	b.n	8004bd4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004990:	4b3a      	ldr	r3, [pc, #232]	@ (8004a7c <HAL_RCC_OscConfig+0x4b8>)
 8004992:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004996:	f003 0302 	and.w	r3, r3, #2
 800499a:	2b00      	cmp	r3, #0
 800499c:	d1ed      	bne.n	800497a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800499e:	7ffb      	ldrb	r3, [r7, #31]
 80049a0:	2b01      	cmp	r3, #1
 80049a2:	d105      	bne.n	80049b0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049a4:	4b35      	ldr	r3, [pc, #212]	@ (8004a7c <HAL_RCC_OscConfig+0x4b8>)
 80049a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049a8:	4a34      	ldr	r2, [pc, #208]	@ (8004a7c <HAL_RCC_OscConfig+0x4b8>)
 80049aa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80049ae:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f003 0320 	and.w	r3, r3, #32
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d03c      	beq.n	8004a36 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	699b      	ldr	r3, [r3, #24]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d01c      	beq.n	80049fe <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80049c4:	4b2d      	ldr	r3, [pc, #180]	@ (8004a7c <HAL_RCC_OscConfig+0x4b8>)
 80049c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80049ca:	4a2c      	ldr	r2, [pc, #176]	@ (8004a7c <HAL_RCC_OscConfig+0x4b8>)
 80049cc:	f043 0301 	orr.w	r3, r3, #1
 80049d0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049d4:	f7fd fd7a 	bl	80024cc <HAL_GetTick>
 80049d8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80049da:	e008      	b.n	80049ee <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80049dc:	f7fd fd76 	bl	80024cc <HAL_GetTick>
 80049e0:	4602      	mov	r2, r0
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	1ad3      	subs	r3, r2, r3
 80049e6:	2b02      	cmp	r3, #2
 80049e8:	d901      	bls.n	80049ee <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80049ea:	2303      	movs	r3, #3
 80049ec:	e0f2      	b.n	8004bd4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80049ee:	4b23      	ldr	r3, [pc, #140]	@ (8004a7c <HAL_RCC_OscConfig+0x4b8>)
 80049f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80049f4:	f003 0302 	and.w	r3, r3, #2
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d0ef      	beq.n	80049dc <HAL_RCC_OscConfig+0x418>
 80049fc:	e01b      	b.n	8004a36 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80049fe:	4b1f      	ldr	r3, [pc, #124]	@ (8004a7c <HAL_RCC_OscConfig+0x4b8>)
 8004a00:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004a04:	4a1d      	ldr	r2, [pc, #116]	@ (8004a7c <HAL_RCC_OscConfig+0x4b8>)
 8004a06:	f023 0301 	bic.w	r3, r3, #1
 8004a0a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a0e:	f7fd fd5d 	bl	80024cc <HAL_GetTick>
 8004a12:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004a14:	e008      	b.n	8004a28 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004a16:	f7fd fd59 	bl	80024cc <HAL_GetTick>
 8004a1a:	4602      	mov	r2, r0
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	1ad3      	subs	r3, r2, r3
 8004a20:	2b02      	cmp	r3, #2
 8004a22:	d901      	bls.n	8004a28 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004a24:	2303      	movs	r3, #3
 8004a26:	e0d5      	b.n	8004bd4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004a28:	4b14      	ldr	r3, [pc, #80]	@ (8004a7c <HAL_RCC_OscConfig+0x4b8>)
 8004a2a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004a2e:	f003 0302 	and.w	r3, r3, #2
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d1ef      	bne.n	8004a16 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	69db      	ldr	r3, [r3, #28]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	f000 80c9 	beq.w	8004bd2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004a40:	4b0e      	ldr	r3, [pc, #56]	@ (8004a7c <HAL_RCC_OscConfig+0x4b8>)
 8004a42:	689b      	ldr	r3, [r3, #8]
 8004a44:	f003 030c 	and.w	r3, r3, #12
 8004a48:	2b0c      	cmp	r3, #12
 8004a4a:	f000 8083 	beq.w	8004b54 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	69db      	ldr	r3, [r3, #28]
 8004a52:	2b02      	cmp	r3, #2
 8004a54:	d15e      	bne.n	8004b14 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a56:	4b09      	ldr	r3, [pc, #36]	@ (8004a7c <HAL_RCC_OscConfig+0x4b8>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a08      	ldr	r2, [pc, #32]	@ (8004a7c <HAL_RCC_OscConfig+0x4b8>)
 8004a5c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004a60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a62:	f7fd fd33 	bl	80024cc <HAL_GetTick>
 8004a66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a68:	e00c      	b.n	8004a84 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a6a:	f7fd fd2f 	bl	80024cc <HAL_GetTick>
 8004a6e:	4602      	mov	r2, r0
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	1ad3      	subs	r3, r2, r3
 8004a74:	2b02      	cmp	r3, #2
 8004a76:	d905      	bls.n	8004a84 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004a78:	2303      	movs	r3, #3
 8004a7a:	e0ab      	b.n	8004bd4 <HAL_RCC_OscConfig+0x610>
 8004a7c:	40021000 	.word	0x40021000
 8004a80:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a84:	4b55      	ldr	r3, [pc, #340]	@ (8004bdc <HAL_RCC_OscConfig+0x618>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d1ec      	bne.n	8004a6a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004a90:	4b52      	ldr	r3, [pc, #328]	@ (8004bdc <HAL_RCC_OscConfig+0x618>)
 8004a92:	68da      	ldr	r2, [r3, #12]
 8004a94:	4b52      	ldr	r3, [pc, #328]	@ (8004be0 <HAL_RCC_OscConfig+0x61c>)
 8004a96:	4013      	ands	r3, r2
 8004a98:	687a      	ldr	r2, [r7, #4]
 8004a9a:	6a11      	ldr	r1, [r2, #32]
 8004a9c:	687a      	ldr	r2, [r7, #4]
 8004a9e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004aa0:	3a01      	subs	r2, #1
 8004aa2:	0112      	lsls	r2, r2, #4
 8004aa4:	4311      	orrs	r1, r2
 8004aa6:	687a      	ldr	r2, [r7, #4]
 8004aa8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004aaa:	0212      	lsls	r2, r2, #8
 8004aac:	4311      	orrs	r1, r2
 8004aae:	687a      	ldr	r2, [r7, #4]
 8004ab0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004ab2:	0852      	lsrs	r2, r2, #1
 8004ab4:	3a01      	subs	r2, #1
 8004ab6:	0552      	lsls	r2, r2, #21
 8004ab8:	4311      	orrs	r1, r2
 8004aba:	687a      	ldr	r2, [r7, #4]
 8004abc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004abe:	0852      	lsrs	r2, r2, #1
 8004ac0:	3a01      	subs	r2, #1
 8004ac2:	0652      	lsls	r2, r2, #25
 8004ac4:	4311      	orrs	r1, r2
 8004ac6:	687a      	ldr	r2, [r7, #4]
 8004ac8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004aca:	06d2      	lsls	r2, r2, #27
 8004acc:	430a      	orrs	r2, r1
 8004ace:	4943      	ldr	r1, [pc, #268]	@ (8004bdc <HAL_RCC_OscConfig+0x618>)
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ad4:	4b41      	ldr	r3, [pc, #260]	@ (8004bdc <HAL_RCC_OscConfig+0x618>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a40      	ldr	r2, [pc, #256]	@ (8004bdc <HAL_RCC_OscConfig+0x618>)
 8004ada:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004ade:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004ae0:	4b3e      	ldr	r3, [pc, #248]	@ (8004bdc <HAL_RCC_OscConfig+0x618>)
 8004ae2:	68db      	ldr	r3, [r3, #12]
 8004ae4:	4a3d      	ldr	r2, [pc, #244]	@ (8004bdc <HAL_RCC_OscConfig+0x618>)
 8004ae6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004aea:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aec:	f7fd fcee 	bl	80024cc <HAL_GetTick>
 8004af0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004af2:	e008      	b.n	8004b06 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004af4:	f7fd fcea 	bl	80024cc <HAL_GetTick>
 8004af8:	4602      	mov	r2, r0
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	1ad3      	subs	r3, r2, r3
 8004afe:	2b02      	cmp	r3, #2
 8004b00:	d901      	bls.n	8004b06 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004b02:	2303      	movs	r3, #3
 8004b04:	e066      	b.n	8004bd4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b06:	4b35      	ldr	r3, [pc, #212]	@ (8004bdc <HAL_RCC_OscConfig+0x618>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d0f0      	beq.n	8004af4 <HAL_RCC_OscConfig+0x530>
 8004b12:	e05e      	b.n	8004bd2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b14:	4b31      	ldr	r3, [pc, #196]	@ (8004bdc <HAL_RCC_OscConfig+0x618>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a30      	ldr	r2, [pc, #192]	@ (8004bdc <HAL_RCC_OscConfig+0x618>)
 8004b1a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004b1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b20:	f7fd fcd4 	bl	80024cc <HAL_GetTick>
 8004b24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b26:	e008      	b.n	8004b3a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b28:	f7fd fcd0 	bl	80024cc <HAL_GetTick>
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	1ad3      	subs	r3, r2, r3
 8004b32:	2b02      	cmp	r3, #2
 8004b34:	d901      	bls.n	8004b3a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004b36:	2303      	movs	r3, #3
 8004b38:	e04c      	b.n	8004bd4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b3a:	4b28      	ldr	r3, [pc, #160]	@ (8004bdc <HAL_RCC_OscConfig+0x618>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d1f0      	bne.n	8004b28 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004b46:	4b25      	ldr	r3, [pc, #148]	@ (8004bdc <HAL_RCC_OscConfig+0x618>)
 8004b48:	68da      	ldr	r2, [r3, #12]
 8004b4a:	4924      	ldr	r1, [pc, #144]	@ (8004bdc <HAL_RCC_OscConfig+0x618>)
 8004b4c:	4b25      	ldr	r3, [pc, #148]	@ (8004be4 <HAL_RCC_OscConfig+0x620>)
 8004b4e:	4013      	ands	r3, r2
 8004b50:	60cb      	str	r3, [r1, #12]
 8004b52:	e03e      	b.n	8004bd2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	69db      	ldr	r3, [r3, #28]
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	d101      	bne.n	8004b60 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	e039      	b.n	8004bd4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004b60:	4b1e      	ldr	r3, [pc, #120]	@ (8004bdc <HAL_RCC_OscConfig+0x618>)
 8004b62:	68db      	ldr	r3, [r3, #12]
 8004b64:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	f003 0203 	and.w	r2, r3, #3
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6a1b      	ldr	r3, [r3, #32]
 8004b70:	429a      	cmp	r2, r3
 8004b72:	d12c      	bne.n	8004bce <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b7e:	3b01      	subs	r3, #1
 8004b80:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b82:	429a      	cmp	r2, r3
 8004b84:	d123      	bne.n	8004bce <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b90:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004b92:	429a      	cmp	r2, r3
 8004b94:	d11b      	bne.n	8004bce <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ba0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004ba2:	429a      	cmp	r2, r3
 8004ba4:	d113      	bne.n	8004bce <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bb0:	085b      	lsrs	r3, r3, #1
 8004bb2:	3b01      	subs	r3, #1
 8004bb4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004bb6:	429a      	cmp	r2, r3
 8004bb8:	d109      	bne.n	8004bce <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004bc4:	085b      	lsrs	r3, r3, #1
 8004bc6:	3b01      	subs	r3, #1
 8004bc8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004bca:	429a      	cmp	r2, r3
 8004bcc:	d001      	beq.n	8004bd2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	e000      	b.n	8004bd4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004bd2:	2300      	movs	r3, #0
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	3720      	adds	r7, #32
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bd80      	pop	{r7, pc}
 8004bdc:	40021000 	.word	0x40021000
 8004be0:	019f800c 	.word	0x019f800c
 8004be4:	feeefffc 	.word	0xfeeefffc

08004be8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b086      	sub	sp, #24
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
 8004bf0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d101      	bne.n	8004c00 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	e11e      	b.n	8004e3e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004c00:	4b91      	ldr	r3, [pc, #580]	@ (8004e48 <HAL_RCC_ClockConfig+0x260>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f003 030f 	and.w	r3, r3, #15
 8004c08:	683a      	ldr	r2, [r7, #0]
 8004c0a:	429a      	cmp	r2, r3
 8004c0c:	d910      	bls.n	8004c30 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c0e:	4b8e      	ldr	r3, [pc, #568]	@ (8004e48 <HAL_RCC_ClockConfig+0x260>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f023 020f 	bic.w	r2, r3, #15
 8004c16:	498c      	ldr	r1, [pc, #560]	@ (8004e48 <HAL_RCC_ClockConfig+0x260>)
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c1e:	4b8a      	ldr	r3, [pc, #552]	@ (8004e48 <HAL_RCC_ClockConfig+0x260>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f003 030f 	and.w	r3, r3, #15
 8004c26:	683a      	ldr	r2, [r7, #0]
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	d001      	beq.n	8004c30 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	e106      	b.n	8004e3e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f003 0301 	and.w	r3, r3, #1
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d073      	beq.n	8004d24 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	2b03      	cmp	r3, #3
 8004c42:	d129      	bne.n	8004c98 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c44:	4b81      	ldr	r3, [pc, #516]	@ (8004e4c <HAL_RCC_ClockConfig+0x264>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d101      	bne.n	8004c54 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004c50:	2301      	movs	r3, #1
 8004c52:	e0f4      	b.n	8004e3e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004c54:	f000 f99e 	bl	8004f94 <RCC_GetSysClockFreqFromPLLSource>
 8004c58:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	4a7c      	ldr	r2, [pc, #496]	@ (8004e50 <HAL_RCC_ClockConfig+0x268>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d93f      	bls.n	8004ce2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004c62:	4b7a      	ldr	r3, [pc, #488]	@ (8004e4c <HAL_RCC_ClockConfig+0x264>)
 8004c64:	689b      	ldr	r3, [r3, #8]
 8004c66:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d009      	beq.n	8004c82 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d033      	beq.n	8004ce2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d12f      	bne.n	8004ce2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004c82:	4b72      	ldr	r3, [pc, #456]	@ (8004e4c <HAL_RCC_ClockConfig+0x264>)
 8004c84:	689b      	ldr	r3, [r3, #8]
 8004c86:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004c8a:	4a70      	ldr	r2, [pc, #448]	@ (8004e4c <HAL_RCC_ClockConfig+0x264>)
 8004c8c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c90:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004c92:	2380      	movs	r3, #128	@ 0x80
 8004c94:	617b      	str	r3, [r7, #20]
 8004c96:	e024      	b.n	8004ce2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	2b02      	cmp	r3, #2
 8004c9e:	d107      	bne.n	8004cb0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ca0:	4b6a      	ldr	r3, [pc, #424]	@ (8004e4c <HAL_RCC_ClockConfig+0x264>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d109      	bne.n	8004cc0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004cac:	2301      	movs	r3, #1
 8004cae:	e0c6      	b.n	8004e3e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004cb0:	4b66      	ldr	r3, [pc, #408]	@ (8004e4c <HAL_RCC_ClockConfig+0x264>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d101      	bne.n	8004cc0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	e0be      	b.n	8004e3e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004cc0:	f000 f8ce 	bl	8004e60 <HAL_RCC_GetSysClockFreq>
 8004cc4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	4a61      	ldr	r2, [pc, #388]	@ (8004e50 <HAL_RCC_ClockConfig+0x268>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d909      	bls.n	8004ce2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004cce:	4b5f      	ldr	r3, [pc, #380]	@ (8004e4c <HAL_RCC_ClockConfig+0x264>)
 8004cd0:	689b      	ldr	r3, [r3, #8]
 8004cd2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004cd6:	4a5d      	ldr	r2, [pc, #372]	@ (8004e4c <HAL_RCC_ClockConfig+0x264>)
 8004cd8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004cdc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004cde:	2380      	movs	r3, #128	@ 0x80
 8004ce0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004ce2:	4b5a      	ldr	r3, [pc, #360]	@ (8004e4c <HAL_RCC_ClockConfig+0x264>)
 8004ce4:	689b      	ldr	r3, [r3, #8]
 8004ce6:	f023 0203 	bic.w	r2, r3, #3
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	4957      	ldr	r1, [pc, #348]	@ (8004e4c <HAL_RCC_ClockConfig+0x264>)
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cf4:	f7fd fbea 	bl	80024cc <HAL_GetTick>
 8004cf8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cfa:	e00a      	b.n	8004d12 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cfc:	f7fd fbe6 	bl	80024cc <HAL_GetTick>
 8004d00:	4602      	mov	r2, r0
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	1ad3      	subs	r3, r2, r3
 8004d06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d901      	bls.n	8004d12 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004d0e:	2303      	movs	r3, #3
 8004d10:	e095      	b.n	8004e3e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d12:	4b4e      	ldr	r3, [pc, #312]	@ (8004e4c <HAL_RCC_ClockConfig+0x264>)
 8004d14:	689b      	ldr	r3, [r3, #8]
 8004d16:	f003 020c 	and.w	r2, r3, #12
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	009b      	lsls	r3, r3, #2
 8004d20:	429a      	cmp	r2, r3
 8004d22:	d1eb      	bne.n	8004cfc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f003 0302 	and.w	r3, r3, #2
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d023      	beq.n	8004d78 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f003 0304 	and.w	r3, r3, #4
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d005      	beq.n	8004d48 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004d3c:	4b43      	ldr	r3, [pc, #268]	@ (8004e4c <HAL_RCC_ClockConfig+0x264>)
 8004d3e:	689b      	ldr	r3, [r3, #8]
 8004d40:	4a42      	ldr	r2, [pc, #264]	@ (8004e4c <HAL_RCC_ClockConfig+0x264>)
 8004d42:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004d46:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f003 0308 	and.w	r3, r3, #8
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d007      	beq.n	8004d64 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004d54:	4b3d      	ldr	r3, [pc, #244]	@ (8004e4c <HAL_RCC_ClockConfig+0x264>)
 8004d56:	689b      	ldr	r3, [r3, #8]
 8004d58:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004d5c:	4a3b      	ldr	r2, [pc, #236]	@ (8004e4c <HAL_RCC_ClockConfig+0x264>)
 8004d5e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004d62:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d64:	4b39      	ldr	r3, [pc, #228]	@ (8004e4c <HAL_RCC_ClockConfig+0x264>)
 8004d66:	689b      	ldr	r3, [r3, #8]
 8004d68:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	689b      	ldr	r3, [r3, #8]
 8004d70:	4936      	ldr	r1, [pc, #216]	@ (8004e4c <HAL_RCC_ClockConfig+0x264>)
 8004d72:	4313      	orrs	r3, r2
 8004d74:	608b      	str	r3, [r1, #8]
 8004d76:	e008      	b.n	8004d8a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	2b80      	cmp	r3, #128	@ 0x80
 8004d7c:	d105      	bne.n	8004d8a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004d7e:	4b33      	ldr	r3, [pc, #204]	@ (8004e4c <HAL_RCC_ClockConfig+0x264>)
 8004d80:	689b      	ldr	r3, [r3, #8]
 8004d82:	4a32      	ldr	r2, [pc, #200]	@ (8004e4c <HAL_RCC_ClockConfig+0x264>)
 8004d84:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004d88:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004d8a:	4b2f      	ldr	r3, [pc, #188]	@ (8004e48 <HAL_RCC_ClockConfig+0x260>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f003 030f 	and.w	r3, r3, #15
 8004d92:	683a      	ldr	r2, [r7, #0]
 8004d94:	429a      	cmp	r2, r3
 8004d96:	d21d      	bcs.n	8004dd4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d98:	4b2b      	ldr	r3, [pc, #172]	@ (8004e48 <HAL_RCC_ClockConfig+0x260>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f023 020f 	bic.w	r2, r3, #15
 8004da0:	4929      	ldr	r1, [pc, #164]	@ (8004e48 <HAL_RCC_ClockConfig+0x260>)
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	4313      	orrs	r3, r2
 8004da6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004da8:	f7fd fb90 	bl	80024cc <HAL_GetTick>
 8004dac:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dae:	e00a      	b.n	8004dc6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004db0:	f7fd fb8c 	bl	80024cc <HAL_GetTick>
 8004db4:	4602      	mov	r2, r0
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	1ad3      	subs	r3, r2, r3
 8004dba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d901      	bls.n	8004dc6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004dc2:	2303      	movs	r3, #3
 8004dc4:	e03b      	b.n	8004e3e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dc6:	4b20      	ldr	r3, [pc, #128]	@ (8004e48 <HAL_RCC_ClockConfig+0x260>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f003 030f 	and.w	r3, r3, #15
 8004dce:	683a      	ldr	r2, [r7, #0]
 8004dd0:	429a      	cmp	r2, r3
 8004dd2:	d1ed      	bne.n	8004db0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f003 0304 	and.w	r3, r3, #4
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d008      	beq.n	8004df2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004de0:	4b1a      	ldr	r3, [pc, #104]	@ (8004e4c <HAL_RCC_ClockConfig+0x264>)
 8004de2:	689b      	ldr	r3, [r3, #8]
 8004de4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	68db      	ldr	r3, [r3, #12]
 8004dec:	4917      	ldr	r1, [pc, #92]	@ (8004e4c <HAL_RCC_ClockConfig+0x264>)
 8004dee:	4313      	orrs	r3, r2
 8004df0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f003 0308 	and.w	r3, r3, #8
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d009      	beq.n	8004e12 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004dfe:	4b13      	ldr	r3, [pc, #76]	@ (8004e4c <HAL_RCC_ClockConfig+0x264>)
 8004e00:	689b      	ldr	r3, [r3, #8]
 8004e02:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	691b      	ldr	r3, [r3, #16]
 8004e0a:	00db      	lsls	r3, r3, #3
 8004e0c:	490f      	ldr	r1, [pc, #60]	@ (8004e4c <HAL_RCC_ClockConfig+0x264>)
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004e12:	f000 f825 	bl	8004e60 <HAL_RCC_GetSysClockFreq>
 8004e16:	4602      	mov	r2, r0
 8004e18:	4b0c      	ldr	r3, [pc, #48]	@ (8004e4c <HAL_RCC_ClockConfig+0x264>)
 8004e1a:	689b      	ldr	r3, [r3, #8]
 8004e1c:	091b      	lsrs	r3, r3, #4
 8004e1e:	f003 030f 	and.w	r3, r3, #15
 8004e22:	490c      	ldr	r1, [pc, #48]	@ (8004e54 <HAL_RCC_ClockConfig+0x26c>)
 8004e24:	5ccb      	ldrb	r3, [r1, r3]
 8004e26:	f003 031f 	and.w	r3, r3, #31
 8004e2a:	fa22 f303 	lsr.w	r3, r2, r3
 8004e2e:	4a0a      	ldr	r2, [pc, #40]	@ (8004e58 <HAL_RCC_ClockConfig+0x270>)
 8004e30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004e32:	4b0a      	ldr	r3, [pc, #40]	@ (8004e5c <HAL_RCC_ClockConfig+0x274>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4618      	mov	r0, r3
 8004e38:	f7fd fafc 	bl	8002434 <HAL_InitTick>
 8004e3c:	4603      	mov	r3, r0
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	3718      	adds	r7, #24
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd80      	pop	{r7, pc}
 8004e46:	bf00      	nop
 8004e48:	40022000 	.word	0x40022000
 8004e4c:	40021000 	.word	0x40021000
 8004e50:	04c4b400 	.word	0x04c4b400
 8004e54:	0800cd1c 	.word	0x0800cd1c
 8004e58:	20000010 	.word	0x20000010
 8004e5c:	20000014 	.word	0x20000014

08004e60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e60:	b480      	push	{r7}
 8004e62:	b087      	sub	sp, #28
 8004e64:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004e66:	4b2c      	ldr	r3, [pc, #176]	@ (8004f18 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004e68:	689b      	ldr	r3, [r3, #8]
 8004e6a:	f003 030c 	and.w	r3, r3, #12
 8004e6e:	2b04      	cmp	r3, #4
 8004e70:	d102      	bne.n	8004e78 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004e72:	4b2a      	ldr	r3, [pc, #168]	@ (8004f1c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004e74:	613b      	str	r3, [r7, #16]
 8004e76:	e047      	b.n	8004f08 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004e78:	4b27      	ldr	r3, [pc, #156]	@ (8004f18 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004e7a:	689b      	ldr	r3, [r3, #8]
 8004e7c:	f003 030c 	and.w	r3, r3, #12
 8004e80:	2b08      	cmp	r3, #8
 8004e82:	d102      	bne.n	8004e8a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004e84:	4b26      	ldr	r3, [pc, #152]	@ (8004f20 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004e86:	613b      	str	r3, [r7, #16]
 8004e88:	e03e      	b.n	8004f08 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004e8a:	4b23      	ldr	r3, [pc, #140]	@ (8004f18 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004e8c:	689b      	ldr	r3, [r3, #8]
 8004e8e:	f003 030c 	and.w	r3, r3, #12
 8004e92:	2b0c      	cmp	r3, #12
 8004e94:	d136      	bne.n	8004f04 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004e96:	4b20      	ldr	r3, [pc, #128]	@ (8004f18 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004e98:	68db      	ldr	r3, [r3, #12]
 8004e9a:	f003 0303 	and.w	r3, r3, #3
 8004e9e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004ea0:	4b1d      	ldr	r3, [pc, #116]	@ (8004f18 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004ea2:	68db      	ldr	r3, [r3, #12]
 8004ea4:	091b      	lsrs	r3, r3, #4
 8004ea6:	f003 030f 	and.w	r3, r3, #15
 8004eaa:	3301      	adds	r3, #1
 8004eac:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2b03      	cmp	r3, #3
 8004eb2:	d10c      	bne.n	8004ece <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004eb4:	4a1a      	ldr	r2, [pc, #104]	@ (8004f20 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ebc:	4a16      	ldr	r2, [pc, #88]	@ (8004f18 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004ebe:	68d2      	ldr	r2, [r2, #12]
 8004ec0:	0a12      	lsrs	r2, r2, #8
 8004ec2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004ec6:	fb02 f303 	mul.w	r3, r2, r3
 8004eca:	617b      	str	r3, [r7, #20]
      break;
 8004ecc:	e00c      	b.n	8004ee8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004ece:	4a13      	ldr	r2, [pc, #76]	@ (8004f1c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ed6:	4a10      	ldr	r2, [pc, #64]	@ (8004f18 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004ed8:	68d2      	ldr	r2, [r2, #12]
 8004eda:	0a12      	lsrs	r2, r2, #8
 8004edc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004ee0:	fb02 f303 	mul.w	r3, r2, r3
 8004ee4:	617b      	str	r3, [r7, #20]
      break;
 8004ee6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004ee8:	4b0b      	ldr	r3, [pc, #44]	@ (8004f18 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004eea:	68db      	ldr	r3, [r3, #12]
 8004eec:	0e5b      	lsrs	r3, r3, #25
 8004eee:	f003 0303 	and.w	r3, r3, #3
 8004ef2:	3301      	adds	r3, #1
 8004ef4:	005b      	lsls	r3, r3, #1
 8004ef6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004ef8:	697a      	ldr	r2, [r7, #20]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f00:	613b      	str	r3, [r7, #16]
 8004f02:	e001      	b.n	8004f08 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004f04:	2300      	movs	r3, #0
 8004f06:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004f08:	693b      	ldr	r3, [r7, #16]
}
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	371c      	adds	r7, #28
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f14:	4770      	bx	lr
 8004f16:	bf00      	nop
 8004f18:	40021000 	.word	0x40021000
 8004f1c:	00f42400 	.word	0x00f42400
 8004f20:	007a1200 	.word	0x007a1200

08004f24 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f24:	b480      	push	{r7}
 8004f26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f28:	4b03      	ldr	r3, [pc, #12]	@ (8004f38 <HAL_RCC_GetHCLKFreq+0x14>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f34:	4770      	bx	lr
 8004f36:	bf00      	nop
 8004f38:	20000010 	.word	0x20000010

08004f3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004f40:	f7ff fff0 	bl	8004f24 <HAL_RCC_GetHCLKFreq>
 8004f44:	4602      	mov	r2, r0
 8004f46:	4b06      	ldr	r3, [pc, #24]	@ (8004f60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	0a1b      	lsrs	r3, r3, #8
 8004f4c:	f003 0307 	and.w	r3, r3, #7
 8004f50:	4904      	ldr	r1, [pc, #16]	@ (8004f64 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004f52:	5ccb      	ldrb	r3, [r1, r3]
 8004f54:	f003 031f 	and.w	r3, r3, #31
 8004f58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	bd80      	pop	{r7, pc}
 8004f60:	40021000 	.word	0x40021000
 8004f64:	0800cd2c 	.word	0x0800cd2c

08004f68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004f6c:	f7ff ffda 	bl	8004f24 <HAL_RCC_GetHCLKFreq>
 8004f70:	4602      	mov	r2, r0
 8004f72:	4b06      	ldr	r3, [pc, #24]	@ (8004f8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f74:	689b      	ldr	r3, [r3, #8]
 8004f76:	0adb      	lsrs	r3, r3, #11
 8004f78:	f003 0307 	and.w	r3, r3, #7
 8004f7c:	4904      	ldr	r1, [pc, #16]	@ (8004f90 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004f7e:	5ccb      	ldrb	r3, [r1, r3]
 8004f80:	f003 031f 	and.w	r3, r3, #31
 8004f84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f88:	4618      	mov	r0, r3
 8004f8a:	bd80      	pop	{r7, pc}
 8004f8c:	40021000 	.word	0x40021000
 8004f90:	0800cd2c 	.word	0x0800cd2c

08004f94 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b087      	sub	sp, #28
 8004f98:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004f9a:	4b1e      	ldr	r3, [pc, #120]	@ (8005014 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004f9c:	68db      	ldr	r3, [r3, #12]
 8004f9e:	f003 0303 	and.w	r3, r3, #3
 8004fa2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004fa4:	4b1b      	ldr	r3, [pc, #108]	@ (8005014 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004fa6:	68db      	ldr	r3, [r3, #12]
 8004fa8:	091b      	lsrs	r3, r3, #4
 8004faa:	f003 030f 	and.w	r3, r3, #15
 8004fae:	3301      	adds	r3, #1
 8004fb0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004fb2:	693b      	ldr	r3, [r7, #16]
 8004fb4:	2b03      	cmp	r3, #3
 8004fb6:	d10c      	bne.n	8004fd2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004fb8:	4a17      	ldr	r2, [pc, #92]	@ (8005018 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fc0:	4a14      	ldr	r2, [pc, #80]	@ (8005014 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004fc2:	68d2      	ldr	r2, [r2, #12]
 8004fc4:	0a12      	lsrs	r2, r2, #8
 8004fc6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004fca:	fb02 f303 	mul.w	r3, r2, r3
 8004fce:	617b      	str	r3, [r7, #20]
    break;
 8004fd0:	e00c      	b.n	8004fec <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004fd2:	4a12      	ldr	r2, [pc, #72]	@ (800501c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fda:	4a0e      	ldr	r2, [pc, #56]	@ (8005014 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004fdc:	68d2      	ldr	r2, [r2, #12]
 8004fde:	0a12      	lsrs	r2, r2, #8
 8004fe0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004fe4:	fb02 f303 	mul.w	r3, r2, r3
 8004fe8:	617b      	str	r3, [r7, #20]
    break;
 8004fea:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004fec:	4b09      	ldr	r3, [pc, #36]	@ (8005014 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004fee:	68db      	ldr	r3, [r3, #12]
 8004ff0:	0e5b      	lsrs	r3, r3, #25
 8004ff2:	f003 0303 	and.w	r3, r3, #3
 8004ff6:	3301      	adds	r3, #1
 8004ff8:	005b      	lsls	r3, r3, #1
 8004ffa:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004ffc:	697a      	ldr	r2, [r7, #20]
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	fbb2 f3f3 	udiv	r3, r2, r3
 8005004:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005006:	687b      	ldr	r3, [r7, #4]
}
 8005008:	4618      	mov	r0, r3
 800500a:	371c      	adds	r7, #28
 800500c:	46bd      	mov	sp, r7
 800500e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005012:	4770      	bx	lr
 8005014:	40021000 	.word	0x40021000
 8005018:	007a1200 	.word	0x007a1200
 800501c:	00f42400 	.word	0x00f42400

08005020 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b086      	sub	sp, #24
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005028:	2300      	movs	r3, #0
 800502a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800502c:	2300      	movs	r3, #0
 800502e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005038:	2b00      	cmp	r3, #0
 800503a:	f000 8098 	beq.w	800516e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800503e:	2300      	movs	r3, #0
 8005040:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005042:	4b43      	ldr	r3, [pc, #268]	@ (8005150 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005044:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005046:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800504a:	2b00      	cmp	r3, #0
 800504c:	d10d      	bne.n	800506a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800504e:	4b40      	ldr	r3, [pc, #256]	@ (8005150 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005050:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005052:	4a3f      	ldr	r2, [pc, #252]	@ (8005150 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005054:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005058:	6593      	str	r3, [r2, #88]	@ 0x58
 800505a:	4b3d      	ldr	r3, [pc, #244]	@ (8005150 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800505c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800505e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005062:	60bb      	str	r3, [r7, #8]
 8005064:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005066:	2301      	movs	r3, #1
 8005068:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800506a:	4b3a      	ldr	r3, [pc, #232]	@ (8005154 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a39      	ldr	r2, [pc, #228]	@ (8005154 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005070:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005074:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005076:	f7fd fa29 	bl	80024cc <HAL_GetTick>
 800507a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800507c:	e009      	b.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800507e:	f7fd fa25 	bl	80024cc <HAL_GetTick>
 8005082:	4602      	mov	r2, r0
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	1ad3      	subs	r3, r2, r3
 8005088:	2b02      	cmp	r3, #2
 800508a:	d902      	bls.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800508c:	2303      	movs	r3, #3
 800508e:	74fb      	strb	r3, [r7, #19]
        break;
 8005090:	e005      	b.n	800509e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005092:	4b30      	ldr	r3, [pc, #192]	@ (8005154 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800509a:	2b00      	cmp	r3, #0
 800509c:	d0ef      	beq.n	800507e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800509e:	7cfb      	ldrb	r3, [r7, #19]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d159      	bne.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80050a4:	4b2a      	ldr	r3, [pc, #168]	@ (8005150 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80050a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80050ae:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80050b0:	697b      	ldr	r3, [r7, #20]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d01e      	beq.n	80050f4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050ba:	697a      	ldr	r2, [r7, #20]
 80050bc:	429a      	cmp	r2, r3
 80050be:	d019      	beq.n	80050f4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80050c0:	4b23      	ldr	r3, [pc, #140]	@ (8005150 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80050c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80050ca:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80050cc:	4b20      	ldr	r3, [pc, #128]	@ (8005150 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80050ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050d2:	4a1f      	ldr	r2, [pc, #124]	@ (8005150 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80050d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80050dc:	4b1c      	ldr	r3, [pc, #112]	@ (8005150 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80050de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050e2:	4a1b      	ldr	r2, [pc, #108]	@ (8005150 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80050e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80050e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80050ec:	4a18      	ldr	r2, [pc, #96]	@ (8005150 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	f003 0301 	and.w	r3, r3, #1
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d016      	beq.n	800512c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050fe:	f7fd f9e5 	bl	80024cc <HAL_GetTick>
 8005102:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005104:	e00b      	b.n	800511e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005106:	f7fd f9e1 	bl	80024cc <HAL_GetTick>
 800510a:	4602      	mov	r2, r0
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	1ad3      	subs	r3, r2, r3
 8005110:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005114:	4293      	cmp	r3, r2
 8005116:	d902      	bls.n	800511e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005118:	2303      	movs	r3, #3
 800511a:	74fb      	strb	r3, [r7, #19]
            break;
 800511c:	e006      	b.n	800512c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800511e:	4b0c      	ldr	r3, [pc, #48]	@ (8005150 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005120:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005124:	f003 0302 	and.w	r3, r3, #2
 8005128:	2b00      	cmp	r3, #0
 800512a:	d0ec      	beq.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800512c:	7cfb      	ldrb	r3, [r7, #19]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d10b      	bne.n	800514a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005132:	4b07      	ldr	r3, [pc, #28]	@ (8005150 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005134:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005138:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005140:	4903      	ldr	r1, [pc, #12]	@ (8005150 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005142:	4313      	orrs	r3, r2
 8005144:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005148:	e008      	b.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800514a:	7cfb      	ldrb	r3, [r7, #19]
 800514c:	74bb      	strb	r3, [r7, #18]
 800514e:	e005      	b.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005150:	40021000 	.word	0x40021000
 8005154:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005158:	7cfb      	ldrb	r3, [r7, #19]
 800515a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800515c:	7c7b      	ldrb	r3, [r7, #17]
 800515e:	2b01      	cmp	r3, #1
 8005160:	d105      	bne.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005162:	4ba6      	ldr	r3, [pc, #664]	@ (80053fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005164:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005166:	4aa5      	ldr	r2, [pc, #660]	@ (80053fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005168:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800516c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f003 0301 	and.w	r3, r3, #1
 8005176:	2b00      	cmp	r3, #0
 8005178:	d00a      	beq.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800517a:	4ba0      	ldr	r3, [pc, #640]	@ (80053fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800517c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005180:	f023 0203 	bic.w	r2, r3, #3
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	499c      	ldr	r1, [pc, #624]	@ (80053fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800518a:	4313      	orrs	r3, r2
 800518c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f003 0302 	and.w	r3, r3, #2
 8005198:	2b00      	cmp	r3, #0
 800519a:	d00a      	beq.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800519c:	4b97      	ldr	r3, [pc, #604]	@ (80053fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800519e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051a2:	f023 020c 	bic.w	r2, r3, #12
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	689b      	ldr	r3, [r3, #8]
 80051aa:	4994      	ldr	r1, [pc, #592]	@ (80053fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051ac:	4313      	orrs	r3, r2
 80051ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f003 0304 	and.w	r3, r3, #4
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d00a      	beq.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80051be:	4b8f      	ldr	r3, [pc, #572]	@ (80053fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051c4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	68db      	ldr	r3, [r3, #12]
 80051cc:	498b      	ldr	r1, [pc, #556]	@ (80053fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051ce:	4313      	orrs	r3, r2
 80051d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f003 0308 	and.w	r3, r3, #8
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d00a      	beq.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80051e0:	4b86      	ldr	r3, [pc, #536]	@ (80053fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051e6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	691b      	ldr	r3, [r3, #16]
 80051ee:	4983      	ldr	r1, [pc, #524]	@ (80053fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051f0:	4313      	orrs	r3, r2
 80051f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f003 0320 	and.w	r3, r3, #32
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d00a      	beq.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005202:	4b7e      	ldr	r3, [pc, #504]	@ (80053fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005204:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005208:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	695b      	ldr	r3, [r3, #20]
 8005210:	497a      	ldr	r1, [pc, #488]	@ (80053fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005212:	4313      	orrs	r3, r2
 8005214:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005220:	2b00      	cmp	r3, #0
 8005222:	d00a      	beq.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005224:	4b75      	ldr	r3, [pc, #468]	@ (80053fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005226:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800522a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	699b      	ldr	r3, [r3, #24]
 8005232:	4972      	ldr	r1, [pc, #456]	@ (80053fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005234:	4313      	orrs	r3, r2
 8005236:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005242:	2b00      	cmp	r3, #0
 8005244:	d00a      	beq.n	800525c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005246:	4b6d      	ldr	r3, [pc, #436]	@ (80053fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005248:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800524c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	69db      	ldr	r3, [r3, #28]
 8005254:	4969      	ldr	r1, [pc, #420]	@ (80053fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005256:	4313      	orrs	r3, r2
 8005258:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005264:	2b00      	cmp	r3, #0
 8005266:	d00a      	beq.n	800527e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005268:	4b64      	ldr	r3, [pc, #400]	@ (80053fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800526a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800526e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6a1b      	ldr	r3, [r3, #32]
 8005276:	4961      	ldr	r1, [pc, #388]	@ (80053fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005278:	4313      	orrs	r3, r2
 800527a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005286:	2b00      	cmp	r3, #0
 8005288:	d00a      	beq.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800528a:	4b5c      	ldr	r3, [pc, #368]	@ (80053fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800528c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005290:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005298:	4958      	ldr	r1, [pc, #352]	@ (80053fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800529a:	4313      	orrs	r3, r2
 800529c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d015      	beq.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80052ac:	4b53      	ldr	r3, [pc, #332]	@ (80053fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052b2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052ba:	4950      	ldr	r1, [pc, #320]	@ (80053fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052bc:	4313      	orrs	r3, r2
 80052be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80052ca:	d105      	bne.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80052cc:	4b4b      	ldr	r3, [pc, #300]	@ (80053fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052ce:	68db      	ldr	r3, [r3, #12]
 80052d0:	4a4a      	ldr	r2, [pc, #296]	@ (80053fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80052d6:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d015      	beq.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80052e4:	4b45      	ldr	r3, [pc, #276]	@ (80053fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052ea:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052f2:	4942      	ldr	r1, [pc, #264]	@ (80053fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052f4:	4313      	orrs	r3, r2
 80052f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052fe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005302:	d105      	bne.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005304:	4b3d      	ldr	r3, [pc, #244]	@ (80053fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005306:	68db      	ldr	r3, [r3, #12]
 8005308:	4a3c      	ldr	r2, [pc, #240]	@ (80053fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800530a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800530e:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005318:	2b00      	cmp	r3, #0
 800531a:	d015      	beq.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800531c:	4b37      	ldr	r3, [pc, #220]	@ (80053fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800531e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005322:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800532a:	4934      	ldr	r1, [pc, #208]	@ (80053fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800532c:	4313      	orrs	r3, r2
 800532e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005336:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800533a:	d105      	bne.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800533c:	4b2f      	ldr	r3, [pc, #188]	@ (80053fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800533e:	68db      	ldr	r3, [r3, #12]
 8005340:	4a2e      	ldr	r2, [pc, #184]	@ (80053fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005342:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005346:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005350:	2b00      	cmp	r3, #0
 8005352:	d015      	beq.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005354:	4b29      	ldr	r3, [pc, #164]	@ (80053fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005356:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800535a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005362:	4926      	ldr	r1, [pc, #152]	@ (80053fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005364:	4313      	orrs	r3, r2
 8005366:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800536e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005372:	d105      	bne.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005374:	4b21      	ldr	r3, [pc, #132]	@ (80053fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005376:	68db      	ldr	r3, [r3, #12]
 8005378:	4a20      	ldr	r2, [pc, #128]	@ (80053fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800537a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800537e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005388:	2b00      	cmp	r3, #0
 800538a:	d015      	beq.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800538c:	4b1b      	ldr	r3, [pc, #108]	@ (80053fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800538e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005392:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800539a:	4918      	ldr	r1, [pc, #96]	@ (80053fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800539c:	4313      	orrs	r3, r2
 800539e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053a6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80053aa:	d105      	bne.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80053ac:	4b13      	ldr	r3, [pc, #76]	@ (80053fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053ae:	68db      	ldr	r3, [r3, #12]
 80053b0:	4a12      	ldr	r2, [pc, #72]	@ (80053fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80053b6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d015      	beq.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80053c4:	4b0d      	ldr	r3, [pc, #52]	@ (80053fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053ca:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053d2:	490a      	ldr	r1, [pc, #40]	@ (80053fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053d4:	4313      	orrs	r3, r2
 80053d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053de:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80053e2:	d105      	bne.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80053e4:	4b05      	ldr	r3, [pc, #20]	@ (80053fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053e6:	68db      	ldr	r3, [r3, #12]
 80053e8:	4a04      	ldr	r2, [pc, #16]	@ (80053fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80053ee:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80053f0:	7cbb      	ldrb	r3, [r7, #18]
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	3718      	adds	r7, #24
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bd80      	pop	{r7, pc}
 80053fa:	bf00      	nop
 80053fc:	40021000 	.word	0x40021000

08005400 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b082      	sub	sp, #8
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d101      	bne.n	8005412 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800540e:	2301      	movs	r3, #1
 8005410:	e049      	b.n	80054a6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005418:	b2db      	uxtb	r3, r3
 800541a:	2b00      	cmp	r3, #0
 800541c:	d106      	bne.n	800542c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2200      	movs	r2, #0
 8005422:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f7fc fd8a 	bl	8001f40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2202      	movs	r2, #2
 8005430:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681a      	ldr	r2, [r3, #0]
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	3304      	adds	r3, #4
 800543c:	4619      	mov	r1, r3
 800543e:	4610      	mov	r0, r2
 8005440:	f000 fb12 	bl	8005a68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2201      	movs	r2, #1
 8005448:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2201      	movs	r2, #1
 8005450:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2201      	movs	r2, #1
 8005458:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2201      	movs	r2, #1
 8005460:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2201      	movs	r2, #1
 8005468:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2201      	movs	r2, #1
 8005470:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2201      	movs	r2, #1
 8005478:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2201      	movs	r2, #1
 8005480:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2201      	movs	r2, #1
 8005488:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2201      	movs	r2, #1
 8005490:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2201      	movs	r2, #1
 8005498:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2201      	movs	r2, #1
 80054a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80054a4:	2300      	movs	r3, #0
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	3708      	adds	r7, #8
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}
	...

080054b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80054b0:	b480      	push	{r7}
 80054b2:	b085      	sub	sp, #20
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80054be:	b2db      	uxtb	r3, r3
 80054c0:	2b01      	cmp	r3, #1
 80054c2:	d001      	beq.n	80054c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80054c4:	2301      	movs	r3, #1
 80054c6:	e04a      	b.n	800555e <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2202      	movs	r2, #2
 80054cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	68da      	ldr	r2, [r3, #12]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f042 0201 	orr.w	r2, r2, #1
 80054de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a21      	ldr	r2, [pc, #132]	@ (800556c <HAL_TIM_Base_Start_IT+0xbc>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d018      	beq.n	800551c <HAL_TIM_Base_Start_IT+0x6c>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054f2:	d013      	beq.n	800551c <HAL_TIM_Base_Start_IT+0x6c>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a1d      	ldr	r2, [pc, #116]	@ (8005570 <HAL_TIM_Base_Start_IT+0xc0>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d00e      	beq.n	800551c <HAL_TIM_Base_Start_IT+0x6c>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a1c      	ldr	r2, [pc, #112]	@ (8005574 <HAL_TIM_Base_Start_IT+0xc4>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d009      	beq.n	800551c <HAL_TIM_Base_Start_IT+0x6c>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a1a      	ldr	r2, [pc, #104]	@ (8005578 <HAL_TIM_Base_Start_IT+0xc8>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d004      	beq.n	800551c <HAL_TIM_Base_Start_IT+0x6c>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a19      	ldr	r2, [pc, #100]	@ (800557c <HAL_TIM_Base_Start_IT+0xcc>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d115      	bne.n	8005548 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	689a      	ldr	r2, [r3, #8]
 8005522:	4b17      	ldr	r3, [pc, #92]	@ (8005580 <HAL_TIM_Base_Start_IT+0xd0>)
 8005524:	4013      	ands	r3, r2
 8005526:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	2b06      	cmp	r3, #6
 800552c:	d015      	beq.n	800555a <HAL_TIM_Base_Start_IT+0xaa>
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005534:	d011      	beq.n	800555a <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	681a      	ldr	r2, [r3, #0]
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f042 0201 	orr.w	r2, r2, #1
 8005544:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005546:	e008      	b.n	800555a <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	681a      	ldr	r2, [r3, #0]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f042 0201 	orr.w	r2, r2, #1
 8005556:	601a      	str	r2, [r3, #0]
 8005558:	e000      	b.n	800555c <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800555a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800555c:	2300      	movs	r3, #0
}
 800555e:	4618      	mov	r0, r3
 8005560:	3714      	adds	r7, #20
 8005562:	46bd      	mov	sp, r7
 8005564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005568:	4770      	bx	lr
 800556a:	bf00      	nop
 800556c:	40012c00 	.word	0x40012c00
 8005570:	40000400 	.word	0x40000400
 8005574:	40000800 	.word	0x40000800
 8005578:	40013400 	.word	0x40013400
 800557c:	40014000 	.word	0x40014000
 8005580:	00010007 	.word	0x00010007

08005584 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b084      	sub	sp, #16
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	68db      	ldr	r3, [r3, #12]
 8005592:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	691b      	ldr	r3, [r3, #16]
 800559a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	f003 0302 	and.w	r3, r3, #2
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d020      	beq.n	80055e8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	f003 0302 	and.w	r3, r3, #2
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d01b      	beq.n	80055e8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f06f 0202 	mvn.w	r2, #2
 80055b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2201      	movs	r2, #1
 80055be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	699b      	ldr	r3, [r3, #24]
 80055c6:	f003 0303 	and.w	r3, r3, #3
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d003      	beq.n	80055d6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	f000 fa2c 	bl	8005a2c <HAL_TIM_IC_CaptureCallback>
 80055d4:	e005      	b.n	80055e2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	f000 fa1e 	bl	8005a18 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055dc:	6878      	ldr	r0, [r7, #4]
 80055de:	f000 fa2f 	bl	8005a40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2200      	movs	r2, #0
 80055e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	f003 0304 	and.w	r3, r3, #4
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d020      	beq.n	8005634 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	f003 0304 	and.w	r3, r3, #4
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d01b      	beq.n	8005634 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f06f 0204 	mvn.w	r2, #4
 8005604:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2202      	movs	r2, #2
 800560a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	699b      	ldr	r3, [r3, #24]
 8005612:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005616:	2b00      	cmp	r3, #0
 8005618:	d003      	beq.n	8005622 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	f000 fa06 	bl	8005a2c <HAL_TIM_IC_CaptureCallback>
 8005620:	e005      	b.n	800562e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f000 f9f8 	bl	8005a18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005628:	6878      	ldr	r0, [r7, #4]
 800562a:	f000 fa09 	bl	8005a40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2200      	movs	r2, #0
 8005632:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	f003 0308 	and.w	r3, r3, #8
 800563a:	2b00      	cmp	r3, #0
 800563c:	d020      	beq.n	8005680 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	f003 0308 	and.w	r3, r3, #8
 8005644:	2b00      	cmp	r3, #0
 8005646:	d01b      	beq.n	8005680 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f06f 0208 	mvn.w	r2, #8
 8005650:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2204      	movs	r2, #4
 8005656:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	69db      	ldr	r3, [r3, #28]
 800565e:	f003 0303 	and.w	r3, r3, #3
 8005662:	2b00      	cmp	r3, #0
 8005664:	d003      	beq.n	800566e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	f000 f9e0 	bl	8005a2c <HAL_TIM_IC_CaptureCallback>
 800566c:	e005      	b.n	800567a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	f000 f9d2 	bl	8005a18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005674:	6878      	ldr	r0, [r7, #4]
 8005676:	f000 f9e3 	bl	8005a40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2200      	movs	r2, #0
 800567e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	f003 0310 	and.w	r3, r3, #16
 8005686:	2b00      	cmp	r3, #0
 8005688:	d020      	beq.n	80056cc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	f003 0310 	and.w	r3, r3, #16
 8005690:	2b00      	cmp	r3, #0
 8005692:	d01b      	beq.n	80056cc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f06f 0210 	mvn.w	r2, #16
 800569c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2208      	movs	r2, #8
 80056a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	69db      	ldr	r3, [r3, #28]
 80056aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d003      	beq.n	80056ba <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	f000 f9ba 	bl	8005a2c <HAL_TIM_IC_CaptureCallback>
 80056b8:	e005      	b.n	80056c6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	f000 f9ac 	bl	8005a18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056c0:	6878      	ldr	r0, [r7, #4]
 80056c2:	f000 f9bd 	bl	8005a40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2200      	movs	r2, #0
 80056ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	f003 0301 	and.w	r3, r3, #1
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d00c      	beq.n	80056f0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	f003 0301 	and.w	r3, r3, #1
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d007      	beq.n	80056f0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f06f 0201 	mvn.w	r2, #1
 80056e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f7fb feac 	bl	8001448 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d104      	bne.n	8005704 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005700:	2b00      	cmp	r3, #0
 8005702:	d00c      	beq.n	800571e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800570a:	2b00      	cmp	r3, #0
 800570c:	d007      	beq.n	800571e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005716:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005718:	6878      	ldr	r0, [r7, #4]
 800571a:	f000 fb69 	bl	8005df0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005724:	2b00      	cmp	r3, #0
 8005726:	d00c      	beq.n	8005742 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800572e:	2b00      	cmp	r3, #0
 8005730:	d007      	beq.n	8005742 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800573a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800573c:	6878      	ldr	r0, [r7, #4]
 800573e:	f000 fb61 	bl	8005e04 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005748:	2b00      	cmp	r3, #0
 800574a:	d00c      	beq.n	8005766 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005752:	2b00      	cmp	r3, #0
 8005754:	d007      	beq.n	8005766 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800575e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005760:	6878      	ldr	r0, [r7, #4]
 8005762:	f000 f977 	bl	8005a54 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	f003 0320 	and.w	r3, r3, #32
 800576c:	2b00      	cmp	r3, #0
 800576e:	d00c      	beq.n	800578a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	f003 0320 	and.w	r3, r3, #32
 8005776:	2b00      	cmp	r3, #0
 8005778:	d007      	beq.n	800578a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f06f 0220 	mvn.w	r2, #32
 8005782:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005784:	6878      	ldr	r0, [r7, #4]
 8005786:	f000 fb29 	bl	8005ddc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005790:	2b00      	cmp	r3, #0
 8005792:	d00c      	beq.n	80057ae <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800579a:	2b00      	cmp	r3, #0
 800579c:	d007      	beq.n	80057ae <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80057a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80057a8:	6878      	ldr	r0, [r7, #4]
 80057aa:	f000 fb35 	bl	8005e18 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d00c      	beq.n	80057d2 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d007      	beq.n	80057d2 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80057ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80057cc:	6878      	ldr	r0, [r7, #4]
 80057ce:	f000 fb2d 	bl	8005e2c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d00c      	beq.n	80057f6 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d007      	beq.n	80057f6 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80057ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80057f0:	6878      	ldr	r0, [r7, #4]
 80057f2:	f000 fb25 	bl	8005e40 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d00c      	beq.n	800581a <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005806:	2b00      	cmp	r3, #0
 8005808:	d007      	beq.n	800581a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8005812:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005814:	6878      	ldr	r0, [r7, #4]
 8005816:	f000 fb1d 	bl	8005e54 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800581a:	bf00      	nop
 800581c:	3710      	adds	r7, #16
 800581e:	46bd      	mov	sp, r7
 8005820:	bd80      	pop	{r7, pc}
	...

08005824 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b084      	sub	sp, #16
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
 800582c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800582e:	2300      	movs	r3, #0
 8005830:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005838:	2b01      	cmp	r3, #1
 800583a:	d101      	bne.n	8005840 <HAL_TIM_ConfigClockSource+0x1c>
 800583c:	2302      	movs	r3, #2
 800583e:	e0de      	b.n	80059fe <HAL_TIM_ConfigClockSource+0x1da>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2201      	movs	r2, #1
 8005844:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2202      	movs	r2, #2
 800584c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	689b      	ldr	r3, [r3, #8]
 8005856:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800585e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005862:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800586a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	68ba      	ldr	r2, [r7, #8]
 8005872:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4a63      	ldr	r2, [pc, #396]	@ (8005a08 <HAL_TIM_ConfigClockSource+0x1e4>)
 800587a:	4293      	cmp	r3, r2
 800587c:	f000 80a9 	beq.w	80059d2 <HAL_TIM_ConfigClockSource+0x1ae>
 8005880:	4a61      	ldr	r2, [pc, #388]	@ (8005a08 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005882:	4293      	cmp	r3, r2
 8005884:	f200 80ae 	bhi.w	80059e4 <HAL_TIM_ConfigClockSource+0x1c0>
 8005888:	4a60      	ldr	r2, [pc, #384]	@ (8005a0c <HAL_TIM_ConfigClockSource+0x1e8>)
 800588a:	4293      	cmp	r3, r2
 800588c:	f000 80a1 	beq.w	80059d2 <HAL_TIM_ConfigClockSource+0x1ae>
 8005890:	4a5e      	ldr	r2, [pc, #376]	@ (8005a0c <HAL_TIM_ConfigClockSource+0x1e8>)
 8005892:	4293      	cmp	r3, r2
 8005894:	f200 80a6 	bhi.w	80059e4 <HAL_TIM_ConfigClockSource+0x1c0>
 8005898:	4a5d      	ldr	r2, [pc, #372]	@ (8005a10 <HAL_TIM_ConfigClockSource+0x1ec>)
 800589a:	4293      	cmp	r3, r2
 800589c:	f000 8099 	beq.w	80059d2 <HAL_TIM_ConfigClockSource+0x1ae>
 80058a0:	4a5b      	ldr	r2, [pc, #364]	@ (8005a10 <HAL_TIM_ConfigClockSource+0x1ec>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	f200 809e 	bhi.w	80059e4 <HAL_TIM_ConfigClockSource+0x1c0>
 80058a8:	4a5a      	ldr	r2, [pc, #360]	@ (8005a14 <HAL_TIM_ConfigClockSource+0x1f0>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	f000 8091 	beq.w	80059d2 <HAL_TIM_ConfigClockSource+0x1ae>
 80058b0:	4a58      	ldr	r2, [pc, #352]	@ (8005a14 <HAL_TIM_ConfigClockSource+0x1f0>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	f200 8096 	bhi.w	80059e4 <HAL_TIM_ConfigClockSource+0x1c0>
 80058b8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80058bc:	f000 8089 	beq.w	80059d2 <HAL_TIM_ConfigClockSource+0x1ae>
 80058c0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80058c4:	f200 808e 	bhi.w	80059e4 <HAL_TIM_ConfigClockSource+0x1c0>
 80058c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80058cc:	d03e      	beq.n	800594c <HAL_TIM_ConfigClockSource+0x128>
 80058ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80058d2:	f200 8087 	bhi.w	80059e4 <HAL_TIM_ConfigClockSource+0x1c0>
 80058d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80058da:	f000 8086 	beq.w	80059ea <HAL_TIM_ConfigClockSource+0x1c6>
 80058de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80058e2:	d87f      	bhi.n	80059e4 <HAL_TIM_ConfigClockSource+0x1c0>
 80058e4:	2b70      	cmp	r3, #112	@ 0x70
 80058e6:	d01a      	beq.n	800591e <HAL_TIM_ConfigClockSource+0xfa>
 80058e8:	2b70      	cmp	r3, #112	@ 0x70
 80058ea:	d87b      	bhi.n	80059e4 <HAL_TIM_ConfigClockSource+0x1c0>
 80058ec:	2b60      	cmp	r3, #96	@ 0x60
 80058ee:	d050      	beq.n	8005992 <HAL_TIM_ConfigClockSource+0x16e>
 80058f0:	2b60      	cmp	r3, #96	@ 0x60
 80058f2:	d877      	bhi.n	80059e4 <HAL_TIM_ConfigClockSource+0x1c0>
 80058f4:	2b50      	cmp	r3, #80	@ 0x50
 80058f6:	d03c      	beq.n	8005972 <HAL_TIM_ConfigClockSource+0x14e>
 80058f8:	2b50      	cmp	r3, #80	@ 0x50
 80058fa:	d873      	bhi.n	80059e4 <HAL_TIM_ConfigClockSource+0x1c0>
 80058fc:	2b40      	cmp	r3, #64	@ 0x40
 80058fe:	d058      	beq.n	80059b2 <HAL_TIM_ConfigClockSource+0x18e>
 8005900:	2b40      	cmp	r3, #64	@ 0x40
 8005902:	d86f      	bhi.n	80059e4 <HAL_TIM_ConfigClockSource+0x1c0>
 8005904:	2b30      	cmp	r3, #48	@ 0x30
 8005906:	d064      	beq.n	80059d2 <HAL_TIM_ConfigClockSource+0x1ae>
 8005908:	2b30      	cmp	r3, #48	@ 0x30
 800590a:	d86b      	bhi.n	80059e4 <HAL_TIM_ConfigClockSource+0x1c0>
 800590c:	2b20      	cmp	r3, #32
 800590e:	d060      	beq.n	80059d2 <HAL_TIM_ConfigClockSource+0x1ae>
 8005910:	2b20      	cmp	r3, #32
 8005912:	d867      	bhi.n	80059e4 <HAL_TIM_ConfigClockSource+0x1c0>
 8005914:	2b00      	cmp	r3, #0
 8005916:	d05c      	beq.n	80059d2 <HAL_TIM_ConfigClockSource+0x1ae>
 8005918:	2b10      	cmp	r3, #16
 800591a:	d05a      	beq.n	80059d2 <HAL_TIM_ConfigClockSource+0x1ae>
 800591c:	e062      	b.n	80059e4 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800592e:	f000 f9b3 	bl	8005c98 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	689b      	ldr	r3, [r3, #8]
 8005938:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005940:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	68ba      	ldr	r2, [r7, #8]
 8005948:	609a      	str	r2, [r3, #8]
      break;
 800594a:	e04f      	b.n	80059ec <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800595c:	f000 f99c 	bl	8005c98 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	689a      	ldr	r2, [r3, #8]
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800596e:	609a      	str	r2, [r3, #8]
      break;
 8005970:	e03c      	b.n	80059ec <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800597e:	461a      	mov	r2, r3
 8005980:	f000 f90e 	bl	8005ba0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	2150      	movs	r1, #80	@ 0x50
 800598a:	4618      	mov	r0, r3
 800598c:	f000 f967 	bl	8005c5e <TIM_ITRx_SetConfig>
      break;
 8005990:	e02c      	b.n	80059ec <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800599e:	461a      	mov	r2, r3
 80059a0:	f000 f92d 	bl	8005bfe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	2160      	movs	r1, #96	@ 0x60
 80059aa:	4618      	mov	r0, r3
 80059ac:	f000 f957 	bl	8005c5e <TIM_ITRx_SetConfig>
      break;
 80059b0:	e01c      	b.n	80059ec <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80059be:	461a      	mov	r2, r3
 80059c0:	f000 f8ee 	bl	8005ba0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	2140      	movs	r1, #64	@ 0x40
 80059ca:	4618      	mov	r0, r3
 80059cc:	f000 f947 	bl	8005c5e <TIM_ITRx_SetConfig>
      break;
 80059d0:	e00c      	b.n	80059ec <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681a      	ldr	r2, [r3, #0]
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4619      	mov	r1, r3
 80059dc:	4610      	mov	r0, r2
 80059de:	f000 f93e 	bl	8005c5e <TIM_ITRx_SetConfig>
      break;
 80059e2:	e003      	b.n	80059ec <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 80059e4:	2301      	movs	r3, #1
 80059e6:	73fb      	strb	r3, [r7, #15]
      break;
 80059e8:	e000      	b.n	80059ec <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 80059ea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2201      	movs	r2, #1
 80059f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2200      	movs	r2, #0
 80059f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80059fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80059fe:	4618      	mov	r0, r3
 8005a00:	3710      	adds	r7, #16
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd80      	pop	{r7, pc}
 8005a06:	bf00      	nop
 8005a08:	00100070 	.word	0x00100070
 8005a0c:	00100040 	.word	0x00100040
 8005a10:	00100030 	.word	0x00100030
 8005a14:	00100020 	.word	0x00100020

08005a18 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b083      	sub	sp, #12
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005a20:	bf00      	nop
 8005a22:	370c      	adds	r7, #12
 8005a24:	46bd      	mov	sp, r7
 8005a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2a:	4770      	bx	lr

08005a2c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b083      	sub	sp, #12
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005a34:	bf00      	nop
 8005a36:	370c      	adds	r7, #12
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3e:	4770      	bx	lr

08005a40 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b083      	sub	sp, #12
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005a48:	bf00      	nop
 8005a4a:	370c      	adds	r7, #12
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a52:	4770      	bx	lr

08005a54 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b083      	sub	sp, #12
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005a5c:	bf00      	nop
 8005a5e:	370c      	adds	r7, #12
 8005a60:	46bd      	mov	sp, r7
 8005a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a66:	4770      	bx	lr

08005a68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b085      	sub	sp, #20
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
 8005a70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	4a42      	ldr	r2, [pc, #264]	@ (8005b84 <TIM_Base_SetConfig+0x11c>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d00f      	beq.n	8005aa0 <TIM_Base_SetConfig+0x38>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a86:	d00b      	beq.n	8005aa0 <TIM_Base_SetConfig+0x38>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	4a3f      	ldr	r2, [pc, #252]	@ (8005b88 <TIM_Base_SetConfig+0x120>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d007      	beq.n	8005aa0 <TIM_Base_SetConfig+0x38>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	4a3e      	ldr	r2, [pc, #248]	@ (8005b8c <TIM_Base_SetConfig+0x124>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d003      	beq.n	8005aa0 <TIM_Base_SetConfig+0x38>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	4a3d      	ldr	r2, [pc, #244]	@ (8005b90 <TIM_Base_SetConfig+0x128>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d108      	bne.n	8005ab2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005aa6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	685b      	ldr	r3, [r3, #4]
 8005aac:	68fa      	ldr	r2, [r7, #12]
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	4a33      	ldr	r2, [pc, #204]	@ (8005b84 <TIM_Base_SetConfig+0x11c>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d01b      	beq.n	8005af2 <TIM_Base_SetConfig+0x8a>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ac0:	d017      	beq.n	8005af2 <TIM_Base_SetConfig+0x8a>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	4a30      	ldr	r2, [pc, #192]	@ (8005b88 <TIM_Base_SetConfig+0x120>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d013      	beq.n	8005af2 <TIM_Base_SetConfig+0x8a>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	4a2f      	ldr	r2, [pc, #188]	@ (8005b8c <TIM_Base_SetConfig+0x124>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d00f      	beq.n	8005af2 <TIM_Base_SetConfig+0x8a>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	4a2e      	ldr	r2, [pc, #184]	@ (8005b90 <TIM_Base_SetConfig+0x128>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d00b      	beq.n	8005af2 <TIM_Base_SetConfig+0x8a>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	4a2d      	ldr	r2, [pc, #180]	@ (8005b94 <TIM_Base_SetConfig+0x12c>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d007      	beq.n	8005af2 <TIM_Base_SetConfig+0x8a>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	4a2c      	ldr	r2, [pc, #176]	@ (8005b98 <TIM_Base_SetConfig+0x130>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d003      	beq.n	8005af2 <TIM_Base_SetConfig+0x8a>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	4a2b      	ldr	r2, [pc, #172]	@ (8005b9c <TIM_Base_SetConfig+0x134>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d108      	bne.n	8005b04 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005af8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	68db      	ldr	r3, [r3, #12]
 8005afe:	68fa      	ldr	r2, [r7, #12]
 8005b00:	4313      	orrs	r3, r2
 8005b02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	695b      	ldr	r3, [r3, #20]
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	68fa      	ldr	r2, [r7, #12]
 8005b16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	689a      	ldr	r2, [r3, #8]
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	681a      	ldr	r2, [r3, #0]
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	4a16      	ldr	r2, [pc, #88]	@ (8005b84 <TIM_Base_SetConfig+0x11c>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d00f      	beq.n	8005b50 <TIM_Base_SetConfig+0xe8>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	4a17      	ldr	r2, [pc, #92]	@ (8005b90 <TIM_Base_SetConfig+0x128>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d00b      	beq.n	8005b50 <TIM_Base_SetConfig+0xe8>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	4a16      	ldr	r2, [pc, #88]	@ (8005b94 <TIM_Base_SetConfig+0x12c>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d007      	beq.n	8005b50 <TIM_Base_SetConfig+0xe8>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	4a15      	ldr	r2, [pc, #84]	@ (8005b98 <TIM_Base_SetConfig+0x130>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d003      	beq.n	8005b50 <TIM_Base_SetConfig+0xe8>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	4a14      	ldr	r2, [pc, #80]	@ (8005b9c <TIM_Base_SetConfig+0x134>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d103      	bne.n	8005b58 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	691a      	ldr	r2, [r3, #16]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	691b      	ldr	r3, [r3, #16]
 8005b62:	f003 0301 	and.w	r3, r3, #1
 8005b66:	2b01      	cmp	r3, #1
 8005b68:	d105      	bne.n	8005b76 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	691b      	ldr	r3, [r3, #16]
 8005b6e:	f023 0201 	bic.w	r2, r3, #1
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	611a      	str	r2, [r3, #16]
  }
}
 8005b76:	bf00      	nop
 8005b78:	3714      	adds	r7, #20
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b80:	4770      	bx	lr
 8005b82:	bf00      	nop
 8005b84:	40012c00 	.word	0x40012c00
 8005b88:	40000400 	.word	0x40000400
 8005b8c:	40000800 	.word	0x40000800
 8005b90:	40013400 	.word	0x40013400
 8005b94:	40014000 	.word	0x40014000
 8005b98:	40014400 	.word	0x40014400
 8005b9c:	40014800 	.word	0x40014800

08005ba0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	b087      	sub	sp, #28
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	60f8      	str	r0, [r7, #12]
 8005ba8:	60b9      	str	r1, [r7, #8]
 8005baa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	6a1b      	ldr	r3, [r3, #32]
 8005bb0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	6a1b      	ldr	r3, [r3, #32]
 8005bb6:	f023 0201 	bic.w	r2, r3, #1
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	699b      	ldr	r3, [r3, #24]
 8005bc2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005bc4:	693b      	ldr	r3, [r7, #16]
 8005bc6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005bca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	011b      	lsls	r3, r3, #4
 8005bd0:	693a      	ldr	r2, [r7, #16]
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005bd6:	697b      	ldr	r3, [r7, #20]
 8005bd8:	f023 030a 	bic.w	r3, r3, #10
 8005bdc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005bde:	697a      	ldr	r2, [r7, #20]
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	4313      	orrs	r3, r2
 8005be4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	693a      	ldr	r2, [r7, #16]
 8005bea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	697a      	ldr	r2, [r7, #20]
 8005bf0:	621a      	str	r2, [r3, #32]
}
 8005bf2:	bf00      	nop
 8005bf4:	371c      	adds	r7, #28
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfc:	4770      	bx	lr

08005bfe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005bfe:	b480      	push	{r7}
 8005c00:	b087      	sub	sp, #28
 8005c02:	af00      	add	r7, sp, #0
 8005c04:	60f8      	str	r0, [r7, #12]
 8005c06:	60b9      	str	r1, [r7, #8]
 8005c08:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	6a1b      	ldr	r3, [r3, #32]
 8005c0e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	6a1b      	ldr	r3, [r3, #32]
 8005c14:	f023 0210 	bic.w	r2, r3, #16
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	699b      	ldr	r3, [r3, #24]
 8005c20:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005c22:	693b      	ldr	r3, [r7, #16]
 8005c24:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005c28:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	031b      	lsls	r3, r3, #12
 8005c2e:	693a      	ldr	r2, [r7, #16]
 8005c30:	4313      	orrs	r3, r2
 8005c32:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005c3a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	011b      	lsls	r3, r3, #4
 8005c40:	697a      	ldr	r2, [r7, #20]
 8005c42:	4313      	orrs	r3, r2
 8005c44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	693a      	ldr	r2, [r7, #16]
 8005c4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	697a      	ldr	r2, [r7, #20]
 8005c50:	621a      	str	r2, [r3, #32]
}
 8005c52:	bf00      	nop
 8005c54:	371c      	adds	r7, #28
 8005c56:	46bd      	mov	sp, r7
 8005c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5c:	4770      	bx	lr

08005c5e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005c5e:	b480      	push	{r7}
 8005c60:	b085      	sub	sp, #20
 8005c62:	af00      	add	r7, sp, #0
 8005c64:	6078      	str	r0, [r7, #4]
 8005c66:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	689b      	ldr	r3, [r3, #8]
 8005c6c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8005c74:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c78:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005c7a:	683a      	ldr	r2, [r7, #0]
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	f043 0307 	orr.w	r3, r3, #7
 8005c84:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	68fa      	ldr	r2, [r7, #12]
 8005c8a:	609a      	str	r2, [r3, #8]
}
 8005c8c:	bf00      	nop
 8005c8e:	3714      	adds	r7, #20
 8005c90:	46bd      	mov	sp, r7
 8005c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c96:	4770      	bx	lr

08005c98 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005c98:	b480      	push	{r7}
 8005c9a:	b087      	sub	sp, #28
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	60f8      	str	r0, [r7, #12]
 8005ca0:	60b9      	str	r1, [r7, #8]
 8005ca2:	607a      	str	r2, [r7, #4]
 8005ca4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	689b      	ldr	r3, [r3, #8]
 8005caa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005cb2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	021a      	lsls	r2, r3, #8
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	431a      	orrs	r2, r3
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	697a      	ldr	r2, [r7, #20]
 8005cc2:	4313      	orrs	r3, r2
 8005cc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	697a      	ldr	r2, [r7, #20]
 8005cca:	609a      	str	r2, [r3, #8]
}
 8005ccc:	bf00      	nop
 8005cce:	371c      	adds	r7, #28
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd6:	4770      	bx	lr

08005cd8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b085      	sub	sp, #20
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
 8005ce0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005ce8:	2b01      	cmp	r3, #1
 8005cea:	d101      	bne.n	8005cf0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005cec:	2302      	movs	r3, #2
 8005cee:	e065      	b.n	8005dbc <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2201      	movs	r2, #1
 8005cf4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2202      	movs	r2, #2
 8005cfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	685b      	ldr	r3, [r3, #4]
 8005d06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	689b      	ldr	r3, [r3, #8]
 8005d0e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a2c      	ldr	r2, [pc, #176]	@ (8005dc8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d004      	beq.n	8005d24 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4a2b      	ldr	r2, [pc, #172]	@ (8005dcc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d108      	bne.n	8005d36 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005d2a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	685b      	ldr	r3, [r3, #4]
 8005d30:	68fa      	ldr	r2, [r7, #12]
 8005d32:	4313      	orrs	r3, r2
 8005d34:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8005d3c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d40:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	68fa      	ldr	r2, [r7, #12]
 8005d48:	4313      	orrs	r3, r2
 8005d4a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	68fa      	ldr	r2, [r7, #12]
 8005d52:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4a1b      	ldr	r2, [pc, #108]	@ (8005dc8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d018      	beq.n	8005d90 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d66:	d013      	beq.n	8005d90 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4a18      	ldr	r2, [pc, #96]	@ (8005dd0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d00e      	beq.n	8005d90 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4a17      	ldr	r2, [pc, #92]	@ (8005dd4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d009      	beq.n	8005d90 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4a12      	ldr	r2, [pc, #72]	@ (8005dcc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d004      	beq.n	8005d90 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4a13      	ldr	r2, [pc, #76]	@ (8005dd8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d10c      	bne.n	8005daa <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005d96:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	689b      	ldr	r3, [r3, #8]
 8005d9c:	68ba      	ldr	r2, [r7, #8]
 8005d9e:	4313      	orrs	r3, r2
 8005da0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	68ba      	ldr	r2, [r7, #8]
 8005da8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2201      	movs	r2, #1
 8005dae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2200      	movs	r2, #0
 8005db6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005dba:	2300      	movs	r3, #0
}
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	3714      	adds	r7, #20
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc6:	4770      	bx	lr
 8005dc8:	40012c00 	.word	0x40012c00
 8005dcc:	40013400 	.word	0x40013400
 8005dd0:	40000400 	.word	0x40000400
 8005dd4:	40000800 	.word	0x40000800
 8005dd8:	40014000 	.word	0x40014000

08005ddc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005ddc:	b480      	push	{r7}
 8005dde:	b083      	sub	sp, #12
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005de4:	bf00      	nop
 8005de6:	370c      	adds	r7, #12
 8005de8:	46bd      	mov	sp, r7
 8005dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dee:	4770      	bx	lr

08005df0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005df0:	b480      	push	{r7}
 8005df2:	b083      	sub	sp, #12
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005df8:	bf00      	nop
 8005dfa:	370c      	adds	r7, #12
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e02:	4770      	bx	lr

08005e04 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b083      	sub	sp, #12
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005e0c:	bf00      	nop
 8005e0e:	370c      	adds	r7, #12
 8005e10:	46bd      	mov	sp, r7
 8005e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e16:	4770      	bx	lr

08005e18 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005e18:	b480      	push	{r7}
 8005e1a:	b083      	sub	sp, #12
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005e20:	bf00      	nop
 8005e22:	370c      	adds	r7, #12
 8005e24:	46bd      	mov	sp, r7
 8005e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2a:	4770      	bx	lr

08005e2c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	b083      	sub	sp, #12
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005e34:	bf00      	nop
 8005e36:	370c      	adds	r7, #12
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3e:	4770      	bx	lr

08005e40 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005e40:	b480      	push	{r7}
 8005e42:	b083      	sub	sp, #12
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005e48:	bf00      	nop
 8005e4a:	370c      	adds	r7, #12
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e52:	4770      	bx	lr

08005e54 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005e54:	b480      	push	{r7}
 8005e56:	b083      	sub	sp, #12
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005e5c:	bf00      	nop
 8005e5e:	370c      	adds	r7, #12
 8005e60:	46bd      	mov	sp, r7
 8005e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e66:	4770      	bx	lr

08005e68 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b082      	sub	sp, #8
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d101      	bne.n	8005e7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e76:	2301      	movs	r3, #1
 8005e78:	e042      	b.n	8005f00 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d106      	bne.n	8005e92 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2200      	movs	r2, #0
 8005e88:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e8c:	6878      	ldr	r0, [r7, #4]
 8005e8e:	f7fc f8b5 	bl	8001ffc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2224      	movs	r2, #36	@ 0x24
 8005e96:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	681a      	ldr	r2, [r3, #0]
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f022 0201 	bic.w	r2, r2, #1
 8005ea8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d002      	beq.n	8005eb8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005eb2:	6878      	ldr	r0, [r7, #4]
 8005eb4:	f001 f834 	bl	8006f20 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005eb8:	6878      	ldr	r0, [r7, #4]
 8005eba:	f000 fd65 	bl	8006988 <UART_SetConfig>
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	2b01      	cmp	r3, #1
 8005ec2:	d101      	bne.n	8005ec8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	e01b      	b.n	8005f00 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	685a      	ldr	r2, [r3, #4]
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005ed6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	689a      	ldr	r2, [r3, #8]
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005ee6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	681a      	ldr	r2, [r3, #0]
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f042 0201 	orr.w	r2, r2, #1
 8005ef6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005ef8:	6878      	ldr	r0, [r7, #4]
 8005efa:	f001 f8b3 	bl	8007064 <UART_CheckIdleState>
 8005efe:	4603      	mov	r3, r0
}
 8005f00:	4618      	mov	r0, r3
 8005f02:	3708      	adds	r7, #8
 8005f04:	46bd      	mov	sp, r7
 8005f06:	bd80      	pop	{r7, pc}

08005f08 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b08a      	sub	sp, #40	@ 0x28
 8005f0c:	af02      	add	r7, sp, #8
 8005f0e:	60f8      	str	r0, [r7, #12]
 8005f10:	60b9      	str	r1, [r7, #8]
 8005f12:	603b      	str	r3, [r7, #0]
 8005f14:	4613      	mov	r3, r2
 8005f16:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f1e:	2b20      	cmp	r3, #32
 8005f20:	d17b      	bne.n	800601a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d002      	beq.n	8005f2e <HAL_UART_Transmit+0x26>
 8005f28:	88fb      	ldrh	r3, [r7, #6]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d101      	bne.n	8005f32 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005f2e:	2301      	movs	r3, #1
 8005f30:	e074      	b.n	800601c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	2200      	movs	r2, #0
 8005f36:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	2221      	movs	r2, #33	@ 0x21
 8005f3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005f42:	f7fc fac3 	bl	80024cc <HAL_GetTick>
 8005f46:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	88fa      	ldrh	r2, [r7, #6]
 8005f4c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	88fa      	ldrh	r2, [r7, #6]
 8005f54:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	689b      	ldr	r3, [r3, #8]
 8005f5c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f60:	d108      	bne.n	8005f74 <HAL_UART_Transmit+0x6c>
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	691b      	ldr	r3, [r3, #16]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d104      	bne.n	8005f74 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	61bb      	str	r3, [r7, #24]
 8005f72:	e003      	b.n	8005f7c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005f78:	2300      	movs	r3, #0
 8005f7a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005f7c:	e030      	b.n	8005fe0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	9300      	str	r3, [sp, #0]
 8005f82:	697b      	ldr	r3, [r7, #20]
 8005f84:	2200      	movs	r2, #0
 8005f86:	2180      	movs	r1, #128	@ 0x80
 8005f88:	68f8      	ldr	r0, [r7, #12]
 8005f8a:	f001 f915 	bl	80071b8 <UART_WaitOnFlagUntilTimeout>
 8005f8e:	4603      	mov	r3, r0
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d005      	beq.n	8005fa0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	2220      	movs	r2, #32
 8005f98:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8005f9c:	2303      	movs	r3, #3
 8005f9e:	e03d      	b.n	800601c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005fa0:	69fb      	ldr	r3, [r7, #28]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d10b      	bne.n	8005fbe <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005fa6:	69bb      	ldr	r3, [r7, #24]
 8005fa8:	881b      	ldrh	r3, [r3, #0]
 8005faa:	461a      	mov	r2, r3
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005fb4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005fb6:	69bb      	ldr	r3, [r7, #24]
 8005fb8:	3302      	adds	r3, #2
 8005fba:	61bb      	str	r3, [r7, #24]
 8005fbc:	e007      	b.n	8005fce <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005fbe:	69fb      	ldr	r3, [r7, #28]
 8005fc0:	781a      	ldrb	r2, [r3, #0]
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005fc8:	69fb      	ldr	r3, [r7, #28]
 8005fca:	3301      	adds	r3, #1
 8005fcc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005fd4:	b29b      	uxth	r3, r3
 8005fd6:	3b01      	subs	r3, #1
 8005fd8:	b29a      	uxth	r2, r3
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005fe6:	b29b      	uxth	r3, r3
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d1c8      	bne.n	8005f7e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	9300      	str	r3, [sp, #0]
 8005ff0:	697b      	ldr	r3, [r7, #20]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	2140      	movs	r1, #64	@ 0x40
 8005ff6:	68f8      	ldr	r0, [r7, #12]
 8005ff8:	f001 f8de 	bl	80071b8 <UART_WaitOnFlagUntilTimeout>
 8005ffc:	4603      	mov	r3, r0
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d005      	beq.n	800600e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	2220      	movs	r2, #32
 8006006:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800600a:	2303      	movs	r3, #3
 800600c:	e006      	b.n	800601c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	2220      	movs	r2, #32
 8006012:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8006016:	2300      	movs	r3, #0
 8006018:	e000      	b.n	800601c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800601a:	2302      	movs	r3, #2
  }
}
 800601c:	4618      	mov	r0, r3
 800601e:	3720      	adds	r7, #32
 8006020:	46bd      	mov	sp, r7
 8006022:	bd80      	pop	{r7, pc}

08006024 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b08a      	sub	sp, #40	@ 0x28
 8006028:	af00      	add	r7, sp, #0
 800602a:	60f8      	str	r0, [r7, #12]
 800602c:	60b9      	str	r1, [r7, #8]
 800602e:	4613      	mov	r3, r2
 8006030:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006038:	2b20      	cmp	r3, #32
 800603a:	d137      	bne.n	80060ac <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d002      	beq.n	8006048 <HAL_UART_Receive_IT+0x24>
 8006042:	88fb      	ldrh	r3, [r7, #6]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d101      	bne.n	800604c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006048:	2301      	movs	r3, #1
 800604a:	e030      	b.n	80060ae <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	2200      	movs	r2, #0
 8006050:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4a18      	ldr	r2, [pc, #96]	@ (80060b8 <HAL_UART_Receive_IT+0x94>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d01f      	beq.n	800609c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	685b      	ldr	r3, [r3, #4]
 8006062:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006066:	2b00      	cmp	r3, #0
 8006068:	d018      	beq.n	800609c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006070:	697b      	ldr	r3, [r7, #20]
 8006072:	e853 3f00 	ldrex	r3, [r3]
 8006076:	613b      	str	r3, [r7, #16]
   return(result);
 8006078:	693b      	ldr	r3, [r7, #16]
 800607a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800607e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	461a      	mov	r2, r3
 8006086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006088:	623b      	str	r3, [r7, #32]
 800608a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800608c:	69f9      	ldr	r1, [r7, #28]
 800608e:	6a3a      	ldr	r2, [r7, #32]
 8006090:	e841 2300 	strex	r3, r2, [r1]
 8006094:	61bb      	str	r3, [r7, #24]
   return(result);
 8006096:	69bb      	ldr	r3, [r7, #24]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d1e6      	bne.n	800606a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800609c:	88fb      	ldrh	r3, [r7, #6]
 800609e:	461a      	mov	r2, r3
 80060a0:	68b9      	ldr	r1, [r7, #8]
 80060a2:	68f8      	ldr	r0, [r7, #12]
 80060a4:	f001 f8f6 	bl	8007294 <UART_Start_Receive_IT>
 80060a8:	4603      	mov	r3, r0
 80060aa:	e000      	b.n	80060ae <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80060ac:	2302      	movs	r3, #2
  }
}
 80060ae:	4618      	mov	r0, r3
 80060b0:	3728      	adds	r7, #40	@ 0x28
 80060b2:	46bd      	mov	sp, r7
 80060b4:	bd80      	pop	{r7, pc}
 80060b6:	bf00      	nop
 80060b8:	40008000 	.word	0x40008000

080060bc <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b0a0      	sub	sp, #128	@ 0x80
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
  /* Disable TXE, TC, RXNE, PE, RXFT, TXFT and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80060cc:	e853 3f00 	ldrex	r3, [r3]
 80060d0:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 80060d2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80060d4:	f423 73f0 	bic.w	r3, r3, #480	@ 0x1e0
 80060d8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	461a      	mov	r2, r3
 80060e0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80060e2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80060e4:	667a      	str	r2, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060e6:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 80060e8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80060ea:	e841 2300 	strex	r3, r2, [r1]
 80060ee:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80060f0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d1e6      	bne.n	80060c4 <HAL_UART_Abort+0x8>
                                          USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	3308      	adds	r3, #8
 80060fc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006100:	e853 3f00 	ldrex	r3, [r3]
 8006104:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006106:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006108:	f023 5384 	bic.w	r3, r3, #276824064	@ 0x10800000
 800610c:	f023 0301 	bic.w	r3, r3, #1
 8006110:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	3308      	adds	r3, #8
 8006118:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800611a:	657a      	str	r2, [r7, #84]	@ 0x54
 800611c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800611e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006120:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006122:	e841 2300 	strex	r3, r2, [r1]
 8006126:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006128:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800612a:	2b00      	cmp	r3, #0
 800612c:	d1e3      	bne.n	80060f6 <HAL_UART_Abort+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006132:	2b01      	cmp	r3, #1
 8006134:	d118      	bne.n	8006168 <HAL_UART_Abort+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800613c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800613e:	e853 3f00 	ldrex	r3, [r3]
 8006142:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006144:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006146:	f023 0310 	bic.w	r3, r3, #16
 800614a:	677b      	str	r3, [r7, #116]	@ 0x74
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	461a      	mov	r2, r3
 8006152:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006154:	643b      	str	r3, [r7, #64]	@ 0x40
 8006156:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006158:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800615a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800615c:	e841 2300 	strex	r3, r2, [r1]
 8006160:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006162:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006164:	2b00      	cmp	r3, #0
 8006166:	d1e6      	bne.n	8006136 <HAL_UART_Abort+0x7a>
  }

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	689b      	ldr	r3, [r3, #8]
 800616e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006172:	2b80      	cmp	r3, #128	@ 0x80
 8006174:	d137      	bne.n	80061e6 <HAL_UART_Abort+0x12a>
  {
    /* Disable the UART DMA Tx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	3308      	adds	r3, #8
 800617c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800617e:	6a3b      	ldr	r3, [r7, #32]
 8006180:	e853 3f00 	ldrex	r3, [r3]
 8006184:	61fb      	str	r3, [r7, #28]
   return(result);
 8006186:	69fb      	ldr	r3, [r7, #28]
 8006188:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800618c:	673b      	str	r3, [r7, #112]	@ 0x70
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	3308      	adds	r3, #8
 8006194:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8006196:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006198:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800619a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800619c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800619e:	e841 2300 	strex	r3, r2, [r1]
 80061a2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80061a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d1e5      	bne.n	8006176 <HAL_UART_Abort+0xba>

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d019      	beq.n	80061e6 <HAL_UART_Abort+0x12a>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80061b6:	2200      	movs	r2, #0
 80061b8:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80061be:	4618      	mov	r0, r3
 80061c0:	f7fc fadb 	bl	800277a <HAL_DMA_Abort>
 80061c4:	4603      	mov	r3, r0
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d00d      	beq.n	80061e6 <HAL_UART_Abort+0x12a>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80061ce:	4618      	mov	r0, r3
 80061d0:	f7fc fba1 	bl	8002916 <HAL_DMA_GetError>
 80061d4:	4603      	mov	r3, r0
 80061d6:	2b20      	cmp	r3, #32
 80061d8:	d105      	bne.n	80061e6 <HAL_UART_Abort+0x12a>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2210      	movs	r2, #16
 80061de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 80061e2:	2303      	movs	r3, #3
 80061e4:	e073      	b.n	80062ce <HAL_UART_Abort+0x212>
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	689b      	ldr	r3, [r3, #8]
 80061ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061f0:	2b40      	cmp	r3, #64	@ 0x40
 80061f2:	d13b      	bne.n	800626c <HAL_UART_Abort+0x1b0>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	3308      	adds	r3, #8
 80061fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	e853 3f00 	ldrex	r3, [r3]
 8006202:	60bb      	str	r3, [r7, #8]
   return(result);
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800620a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	3308      	adds	r3, #8
 8006212:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006214:	61ba      	str	r2, [r7, #24]
 8006216:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006218:	6979      	ldr	r1, [r7, #20]
 800621a:	69ba      	ldr	r2, [r7, #24]
 800621c:	e841 2300 	strex	r3, r2, [r1]
 8006220:	613b      	str	r3, [r7, #16]
   return(result);
 8006222:	693b      	ldr	r3, [r7, #16]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d1e5      	bne.n	80061f4 <HAL_UART_Abort+0x138>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800622e:	2b00      	cmp	r3, #0
 8006230:	d01c      	beq.n	800626c <HAL_UART_Abort+0x1b0>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006238:	2200      	movs	r2, #0
 800623a:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006242:	4618      	mov	r0, r3
 8006244:	f7fc fa99 	bl	800277a <HAL_DMA_Abort>
 8006248:	4603      	mov	r3, r0
 800624a:	2b00      	cmp	r3, #0
 800624c:	d00e      	beq.n	800626c <HAL_UART_Abort+0x1b0>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006254:	4618      	mov	r0, r3
 8006256:	f7fc fb5e 	bl	8002916 <HAL_DMA_GetError>
 800625a:	4603      	mov	r3, r0
 800625c:	2b20      	cmp	r3, #32
 800625e:	d105      	bne.n	800626c <HAL_UART_Abort+0x1b0>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2210      	movs	r2, #16
 8006264:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 8006268:	2303      	movs	r3, #3
 800626a:	e030      	b.n	80062ce <HAL_UART_Abort+0x212>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0U;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2200      	movs	r2, #0
 8006270:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
  huart->RxXferCount = 0U;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2200      	movs	r2, #0
 8006278:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	220f      	movs	r2, #15
 8006282:	621a      	str	r2, [r3, #32]

  /* Flush the whole TX FIFO (if needed) */
  if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006288:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800628c:	d107      	bne.n	800629e <HAL_UART_Abort+0x1e2>
  {
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	699a      	ldr	r2, [r3, #24]
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f042 0210 	orr.w	r2, r2, #16
 800629c:	619a      	str	r2, [r3, #24]
  }

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	699a      	ldr	r2, [r3, #24]
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f042 0208 	orr.w	r2, r2, #8
 80062ac:	619a      	str	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2220      	movs	r2, #32
 80062b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2220      	movs	r2, #32
 80062ba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2200      	movs	r2, #0
 80062c2:	66da      	str	r2, [r3, #108]	@ 0x6c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2200      	movs	r2, #0
 80062c8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  return HAL_OK;
 80062cc:	2300      	movs	r3, #0
}
 80062ce:	4618      	mov	r0, r3
 80062d0:	3780      	adds	r7, #128	@ 0x80
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bd80      	pop	{r7, pc}
	...

080062d8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b0ba      	sub	sp, #232	@ 0xe8
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	69db      	ldr	r3, [r3, #28]
 80062e6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	689b      	ldr	r3, [r3, #8]
 80062fa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80062fe:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8006302:	f640 030f 	movw	r3, #2063	@ 0x80f
 8006306:	4013      	ands	r3, r2
 8006308:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800630c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006310:	2b00      	cmp	r3, #0
 8006312:	d11b      	bne.n	800634c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006314:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006318:	f003 0320 	and.w	r3, r3, #32
 800631c:	2b00      	cmp	r3, #0
 800631e:	d015      	beq.n	800634c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006320:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006324:	f003 0320 	and.w	r3, r3, #32
 8006328:	2b00      	cmp	r3, #0
 800632a:	d105      	bne.n	8006338 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800632c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006330:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006334:	2b00      	cmp	r3, #0
 8006336:	d009      	beq.n	800634c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800633c:	2b00      	cmp	r3, #0
 800633e:	f000 8300 	beq.w	8006942 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006346:	6878      	ldr	r0, [r7, #4]
 8006348:	4798      	blx	r3
      }
      return;
 800634a:	e2fa      	b.n	8006942 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800634c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006350:	2b00      	cmp	r3, #0
 8006352:	f000 8123 	beq.w	800659c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006356:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800635a:	4b8d      	ldr	r3, [pc, #564]	@ (8006590 <HAL_UART_IRQHandler+0x2b8>)
 800635c:	4013      	ands	r3, r2
 800635e:	2b00      	cmp	r3, #0
 8006360:	d106      	bne.n	8006370 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006362:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8006366:	4b8b      	ldr	r3, [pc, #556]	@ (8006594 <HAL_UART_IRQHandler+0x2bc>)
 8006368:	4013      	ands	r3, r2
 800636a:	2b00      	cmp	r3, #0
 800636c:	f000 8116 	beq.w	800659c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006370:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006374:	f003 0301 	and.w	r3, r3, #1
 8006378:	2b00      	cmp	r3, #0
 800637a:	d011      	beq.n	80063a0 <HAL_UART_IRQHandler+0xc8>
 800637c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006380:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006384:	2b00      	cmp	r3, #0
 8006386:	d00b      	beq.n	80063a0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	2201      	movs	r2, #1
 800638e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006396:	f043 0201 	orr.w	r2, r3, #1
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80063a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063a4:	f003 0302 	and.w	r3, r3, #2
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d011      	beq.n	80063d0 <HAL_UART_IRQHandler+0xf8>
 80063ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80063b0:	f003 0301 	and.w	r3, r3, #1
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d00b      	beq.n	80063d0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	2202      	movs	r2, #2
 80063be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063c6:	f043 0204 	orr.w	r2, r3, #4
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80063d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063d4:	f003 0304 	and.w	r3, r3, #4
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d011      	beq.n	8006400 <HAL_UART_IRQHandler+0x128>
 80063dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80063e0:	f003 0301 	and.w	r3, r3, #1
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d00b      	beq.n	8006400 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	2204      	movs	r2, #4
 80063ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063f6:	f043 0202 	orr.w	r2, r3, #2
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006400:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006404:	f003 0308 	and.w	r3, r3, #8
 8006408:	2b00      	cmp	r3, #0
 800640a:	d017      	beq.n	800643c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800640c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006410:	f003 0320 	and.w	r3, r3, #32
 8006414:	2b00      	cmp	r3, #0
 8006416:	d105      	bne.n	8006424 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006418:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800641c:	4b5c      	ldr	r3, [pc, #368]	@ (8006590 <HAL_UART_IRQHandler+0x2b8>)
 800641e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006420:	2b00      	cmp	r3, #0
 8006422:	d00b      	beq.n	800643c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	2208      	movs	r2, #8
 800642a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006432:	f043 0208 	orr.w	r2, r3, #8
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800643c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006440:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006444:	2b00      	cmp	r3, #0
 8006446:	d012      	beq.n	800646e <HAL_UART_IRQHandler+0x196>
 8006448:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800644c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006450:	2b00      	cmp	r3, #0
 8006452:	d00c      	beq.n	800646e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800645c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006464:	f043 0220 	orr.w	r2, r3, #32
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006474:	2b00      	cmp	r3, #0
 8006476:	f000 8266 	beq.w	8006946 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800647a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800647e:	f003 0320 	and.w	r3, r3, #32
 8006482:	2b00      	cmp	r3, #0
 8006484:	d013      	beq.n	80064ae <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006486:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800648a:	f003 0320 	and.w	r3, r3, #32
 800648e:	2b00      	cmp	r3, #0
 8006490:	d105      	bne.n	800649e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006492:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006496:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800649a:	2b00      	cmp	r3, #0
 800649c:	d007      	beq.n	80064ae <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d003      	beq.n	80064ae <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064b4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	689b      	ldr	r3, [r3, #8]
 80064be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064c2:	2b40      	cmp	r3, #64	@ 0x40
 80064c4:	d005      	beq.n	80064d2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80064c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80064ca:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d054      	beq.n	800657c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80064d2:	6878      	ldr	r0, [r7, #4]
 80064d4:	f001 f800 	bl	80074d8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	689b      	ldr	r3, [r3, #8]
 80064de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064e2:	2b40      	cmp	r3, #64	@ 0x40
 80064e4:	d146      	bne.n	8006574 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	3308      	adds	r3, #8
 80064ec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80064f4:	e853 3f00 	ldrex	r3, [r3]
 80064f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80064fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006500:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006504:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	3308      	adds	r3, #8
 800650e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006512:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006516:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800651a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800651e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006522:	e841 2300 	strex	r3, r2, [r1]
 8006526:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800652a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800652e:	2b00      	cmp	r3, #0
 8006530:	d1d9      	bne.n	80064e6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006538:	2b00      	cmp	r3, #0
 800653a:	d017      	beq.n	800656c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006542:	4a15      	ldr	r2, [pc, #84]	@ (8006598 <HAL_UART_IRQHandler+0x2c0>)
 8006544:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800654c:	4618      	mov	r0, r3
 800654e:	f7fc f96d 	bl	800282c <HAL_DMA_Abort_IT>
 8006552:	4603      	mov	r3, r0
 8006554:	2b00      	cmp	r3, #0
 8006556:	d019      	beq.n	800658c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800655e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006560:	687a      	ldr	r2, [r7, #4]
 8006562:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8006566:	4610      	mov	r0, r2
 8006568:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800656a:	e00f      	b.n	800658c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800656c:	6878      	ldr	r0, [r7, #4]
 800656e:	f7fb f941 	bl	80017f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006572:	e00b      	b.n	800658c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006574:	6878      	ldr	r0, [r7, #4]
 8006576:	f7fb f93d 	bl	80017f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800657a:	e007      	b.n	800658c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800657c:	6878      	ldr	r0, [r7, #4]
 800657e:	f7fb f939 	bl	80017f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2200      	movs	r2, #0
 8006586:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800658a:	e1dc      	b.n	8006946 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800658c:	bf00      	nop
    return;
 800658e:	e1da      	b.n	8006946 <HAL_UART_IRQHandler+0x66e>
 8006590:	10000001 	.word	0x10000001
 8006594:	04000120 	.word	0x04000120
 8006598:	080075a5 	.word	0x080075a5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80065a0:	2b01      	cmp	r3, #1
 80065a2:	f040 8170 	bne.w	8006886 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80065a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065aa:	f003 0310 	and.w	r3, r3, #16
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	f000 8169 	beq.w	8006886 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80065b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80065b8:	f003 0310 	and.w	r3, r3, #16
 80065bc:	2b00      	cmp	r3, #0
 80065be:	f000 8162 	beq.w	8006886 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	2210      	movs	r2, #16
 80065c8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	689b      	ldr	r3, [r3, #8]
 80065d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065d4:	2b40      	cmp	r3, #64	@ 0x40
 80065d6:	f040 80d8 	bne.w	800678a <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	685b      	ldr	r3, [r3, #4]
 80065e4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80065e8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	f000 80af 	beq.w	8006750 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80065f8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80065fc:	429a      	cmp	r2, r3
 80065fe:	f080 80a7 	bcs.w	8006750 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006608:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f003 0320 	and.w	r3, r3, #32
 800661a:	2b00      	cmp	r3, #0
 800661c:	f040 8087 	bne.w	800672e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006628:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800662c:	e853 3f00 	ldrex	r3, [r3]
 8006630:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006634:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006638:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800663c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	461a      	mov	r2, r3
 8006646:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800664a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800664e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006652:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006656:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800665a:	e841 2300 	strex	r3, r2, [r1]
 800665e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006662:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006666:	2b00      	cmp	r3, #0
 8006668:	d1da      	bne.n	8006620 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	3308      	adds	r3, #8
 8006670:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006672:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006674:	e853 3f00 	ldrex	r3, [r3]
 8006678:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800667a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800667c:	f023 0301 	bic.w	r3, r3, #1
 8006680:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	3308      	adds	r3, #8
 800668a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800668e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006692:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006694:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006696:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800669a:	e841 2300 	strex	r3, r2, [r1]
 800669e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80066a0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d1e1      	bne.n	800666a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	3308      	adds	r3, #8
 80066ac:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80066b0:	e853 3f00 	ldrex	r3, [r3]
 80066b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80066b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80066b8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80066bc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	3308      	adds	r3, #8
 80066c6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80066ca:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80066cc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ce:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80066d0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80066d2:	e841 2300 	strex	r3, r2, [r1]
 80066d6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80066d8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d1e3      	bne.n	80066a6 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2220      	movs	r2, #32
 80066e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2200      	movs	r2, #0
 80066ea:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80066f4:	e853 3f00 	ldrex	r3, [r3]
 80066f8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80066fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80066fc:	f023 0310 	bic.w	r3, r3, #16
 8006700:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	461a      	mov	r2, r3
 800670a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800670e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006710:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006712:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006714:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006716:	e841 2300 	strex	r3, r2, [r1]
 800671a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800671c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800671e:	2b00      	cmp	r3, #0
 8006720:	d1e4      	bne.n	80066ec <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006728:	4618      	mov	r0, r3
 800672a:	f7fc f826 	bl	800277a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2202      	movs	r2, #2
 8006732:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006740:	b29b      	uxth	r3, r3
 8006742:	1ad3      	subs	r3, r2, r3
 8006744:	b29b      	uxth	r3, r3
 8006746:	4619      	mov	r1, r3
 8006748:	6878      	ldr	r0, [r7, #4]
 800674a:	f000 f911 	bl	8006970 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800674e:	e0fc      	b.n	800694a <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006756:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800675a:	429a      	cmp	r2, r3
 800675c:	f040 80f5 	bne.w	800694a <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f003 0320 	and.w	r3, r3, #32
 800676e:	2b20      	cmp	r3, #32
 8006770:	f040 80eb 	bne.w	800694a <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2202      	movs	r2, #2
 8006778:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006780:	4619      	mov	r1, r3
 8006782:	6878      	ldr	r0, [r7, #4]
 8006784:	f000 f8f4 	bl	8006970 <HAL_UARTEx_RxEventCallback>
      return;
 8006788:	e0df      	b.n	800694a <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006796:	b29b      	uxth	r3, r3
 8006798:	1ad3      	subs	r3, r2, r3
 800679a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80067a4:	b29b      	uxth	r3, r3
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	f000 80d1 	beq.w	800694e <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 80067ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	f000 80cc 	beq.w	800694e <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067be:	e853 3f00 	ldrex	r3, [r3]
 80067c2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80067c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067c6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80067ca:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	461a      	mov	r2, r3
 80067d4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80067d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80067da:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067dc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80067de:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80067e0:	e841 2300 	strex	r3, r2, [r1]
 80067e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80067e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d1e4      	bne.n	80067b6 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	3308      	adds	r3, #8
 80067f2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067f6:	e853 3f00 	ldrex	r3, [r3]
 80067fa:	623b      	str	r3, [r7, #32]
   return(result);
 80067fc:	6a3b      	ldr	r3, [r7, #32]
 80067fe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006802:	f023 0301 	bic.w	r3, r3, #1
 8006806:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	3308      	adds	r3, #8
 8006810:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006814:	633a      	str	r2, [r7, #48]	@ 0x30
 8006816:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006818:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800681a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800681c:	e841 2300 	strex	r3, r2, [r1]
 8006820:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006822:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006824:	2b00      	cmp	r3, #0
 8006826:	d1e1      	bne.n	80067ec <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2220      	movs	r2, #32
 800682c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2200      	movs	r2, #0
 8006834:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2200      	movs	r2, #0
 800683a:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006842:	693b      	ldr	r3, [r7, #16]
 8006844:	e853 3f00 	ldrex	r3, [r3]
 8006848:	60fb      	str	r3, [r7, #12]
   return(result);
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	f023 0310 	bic.w	r3, r3, #16
 8006850:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	461a      	mov	r2, r3
 800685a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800685e:	61fb      	str	r3, [r7, #28]
 8006860:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006862:	69b9      	ldr	r1, [r7, #24]
 8006864:	69fa      	ldr	r2, [r7, #28]
 8006866:	e841 2300 	strex	r3, r2, [r1]
 800686a:	617b      	str	r3, [r7, #20]
   return(result);
 800686c:	697b      	ldr	r3, [r7, #20]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d1e4      	bne.n	800683c <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2202      	movs	r2, #2
 8006876:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006878:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800687c:	4619      	mov	r1, r3
 800687e:	6878      	ldr	r0, [r7, #4]
 8006880:	f000 f876 	bl	8006970 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006884:	e063      	b.n	800694e <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006886:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800688a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800688e:	2b00      	cmp	r3, #0
 8006890:	d00e      	beq.n	80068b0 <HAL_UART_IRQHandler+0x5d8>
 8006892:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006896:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800689a:	2b00      	cmp	r3, #0
 800689c:	d008      	beq.n	80068b0 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80068a6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80068a8:	6878      	ldr	r0, [r7, #4]
 80068aa:	f001 fbd9 	bl	8008060 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80068ae:	e051      	b.n	8006954 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80068b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d014      	beq.n	80068e6 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80068bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80068c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d105      	bne.n	80068d4 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80068c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80068cc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d008      	beq.n	80068e6 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d03a      	beq.n	8006952 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80068e0:	6878      	ldr	r0, [r7, #4]
 80068e2:	4798      	blx	r3
    }
    return;
 80068e4:	e035      	b.n	8006952 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80068e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d009      	beq.n	8006906 <HAL_UART_IRQHandler+0x62e>
 80068f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80068f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d003      	beq.n	8006906 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 80068fe:	6878      	ldr	r0, [r7, #4]
 8006900:	f000 fe62 	bl	80075c8 <UART_EndTransmit_IT>
    return;
 8006904:	e026      	b.n	8006954 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006906:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800690a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800690e:	2b00      	cmp	r3, #0
 8006910:	d009      	beq.n	8006926 <HAL_UART_IRQHandler+0x64e>
 8006912:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006916:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800691a:	2b00      	cmp	r3, #0
 800691c:	d003      	beq.n	8006926 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800691e:	6878      	ldr	r0, [r7, #4]
 8006920:	f001 fbb2 	bl	8008088 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006924:	e016      	b.n	8006954 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006926:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800692a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800692e:	2b00      	cmp	r3, #0
 8006930:	d010      	beq.n	8006954 <HAL_UART_IRQHandler+0x67c>
 8006932:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006936:	2b00      	cmp	r3, #0
 8006938:	da0c      	bge.n	8006954 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	f001 fb9a 	bl	8008074 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006940:	e008      	b.n	8006954 <HAL_UART_IRQHandler+0x67c>
      return;
 8006942:	bf00      	nop
 8006944:	e006      	b.n	8006954 <HAL_UART_IRQHandler+0x67c>
    return;
 8006946:	bf00      	nop
 8006948:	e004      	b.n	8006954 <HAL_UART_IRQHandler+0x67c>
      return;
 800694a:	bf00      	nop
 800694c:	e002      	b.n	8006954 <HAL_UART_IRQHandler+0x67c>
      return;
 800694e:	bf00      	nop
 8006950:	e000      	b.n	8006954 <HAL_UART_IRQHandler+0x67c>
    return;
 8006952:	bf00      	nop
  }
}
 8006954:	37e8      	adds	r7, #232	@ 0xe8
 8006956:	46bd      	mov	sp, r7
 8006958:	bd80      	pop	{r7, pc}
 800695a:	bf00      	nop

0800695c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800695c:	b480      	push	{r7}
 800695e:	b083      	sub	sp, #12
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006964:	bf00      	nop
 8006966:	370c      	adds	r7, #12
 8006968:	46bd      	mov	sp, r7
 800696a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696e:	4770      	bx	lr

08006970 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006970:	b480      	push	{r7}
 8006972:	b083      	sub	sp, #12
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
 8006978:	460b      	mov	r3, r1
 800697a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800697c:	bf00      	nop
 800697e:	370c      	adds	r7, #12
 8006980:	46bd      	mov	sp, r7
 8006982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006986:	4770      	bx	lr

08006988 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006988:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800698c:	b08c      	sub	sp, #48	@ 0x30
 800698e:	af00      	add	r7, sp, #0
 8006990:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006992:	2300      	movs	r3, #0
 8006994:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006998:	697b      	ldr	r3, [r7, #20]
 800699a:	689a      	ldr	r2, [r3, #8]
 800699c:	697b      	ldr	r3, [r7, #20]
 800699e:	691b      	ldr	r3, [r3, #16]
 80069a0:	431a      	orrs	r2, r3
 80069a2:	697b      	ldr	r3, [r7, #20]
 80069a4:	695b      	ldr	r3, [r3, #20]
 80069a6:	431a      	orrs	r2, r3
 80069a8:	697b      	ldr	r3, [r7, #20]
 80069aa:	69db      	ldr	r3, [r3, #28]
 80069ac:	4313      	orrs	r3, r2
 80069ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80069b0:	697b      	ldr	r3, [r7, #20]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	681a      	ldr	r2, [r3, #0]
 80069b6:	4bab      	ldr	r3, [pc, #684]	@ (8006c64 <UART_SetConfig+0x2dc>)
 80069b8:	4013      	ands	r3, r2
 80069ba:	697a      	ldr	r2, [r7, #20]
 80069bc:	6812      	ldr	r2, [r2, #0]
 80069be:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80069c0:	430b      	orrs	r3, r1
 80069c2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80069c4:	697b      	ldr	r3, [r7, #20]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	685b      	ldr	r3, [r3, #4]
 80069ca:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80069ce:	697b      	ldr	r3, [r7, #20]
 80069d0:	68da      	ldr	r2, [r3, #12]
 80069d2:	697b      	ldr	r3, [r7, #20]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	430a      	orrs	r2, r1
 80069d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80069da:	697b      	ldr	r3, [r7, #20]
 80069dc:	699b      	ldr	r3, [r3, #24]
 80069de:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80069e0:	697b      	ldr	r3, [r7, #20]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4aa0      	ldr	r2, [pc, #640]	@ (8006c68 <UART_SetConfig+0x2e0>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d004      	beq.n	80069f4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80069ea:	697b      	ldr	r3, [r7, #20]
 80069ec:	6a1b      	ldr	r3, [r3, #32]
 80069ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80069f0:	4313      	orrs	r3, r2
 80069f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80069f4:	697b      	ldr	r3, [r7, #20]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	689b      	ldr	r3, [r3, #8]
 80069fa:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80069fe:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8006a02:	697a      	ldr	r2, [r7, #20]
 8006a04:	6812      	ldr	r2, [r2, #0]
 8006a06:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006a08:	430b      	orrs	r3, r1
 8006a0a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006a0c:	697b      	ldr	r3, [r7, #20]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a12:	f023 010f 	bic.w	r1, r3, #15
 8006a16:	697b      	ldr	r3, [r7, #20]
 8006a18:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006a1a:	697b      	ldr	r3, [r7, #20]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	430a      	orrs	r2, r1
 8006a20:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006a22:	697b      	ldr	r3, [r7, #20]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	4a91      	ldr	r2, [pc, #580]	@ (8006c6c <UART_SetConfig+0x2e4>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d125      	bne.n	8006a78 <UART_SetConfig+0xf0>
 8006a2c:	4b90      	ldr	r3, [pc, #576]	@ (8006c70 <UART_SetConfig+0x2e8>)
 8006a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a32:	f003 0303 	and.w	r3, r3, #3
 8006a36:	2b03      	cmp	r3, #3
 8006a38:	d81a      	bhi.n	8006a70 <UART_SetConfig+0xe8>
 8006a3a:	a201      	add	r2, pc, #4	@ (adr r2, 8006a40 <UART_SetConfig+0xb8>)
 8006a3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a40:	08006a51 	.word	0x08006a51
 8006a44:	08006a61 	.word	0x08006a61
 8006a48:	08006a59 	.word	0x08006a59
 8006a4c:	08006a69 	.word	0x08006a69
 8006a50:	2301      	movs	r3, #1
 8006a52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a56:	e0d6      	b.n	8006c06 <UART_SetConfig+0x27e>
 8006a58:	2302      	movs	r3, #2
 8006a5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a5e:	e0d2      	b.n	8006c06 <UART_SetConfig+0x27e>
 8006a60:	2304      	movs	r3, #4
 8006a62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a66:	e0ce      	b.n	8006c06 <UART_SetConfig+0x27e>
 8006a68:	2308      	movs	r3, #8
 8006a6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a6e:	e0ca      	b.n	8006c06 <UART_SetConfig+0x27e>
 8006a70:	2310      	movs	r3, #16
 8006a72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a76:	e0c6      	b.n	8006c06 <UART_SetConfig+0x27e>
 8006a78:	697b      	ldr	r3, [r7, #20]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4a7d      	ldr	r2, [pc, #500]	@ (8006c74 <UART_SetConfig+0x2ec>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d138      	bne.n	8006af4 <UART_SetConfig+0x16c>
 8006a82:	4b7b      	ldr	r3, [pc, #492]	@ (8006c70 <UART_SetConfig+0x2e8>)
 8006a84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a88:	f003 030c 	and.w	r3, r3, #12
 8006a8c:	2b0c      	cmp	r3, #12
 8006a8e:	d82d      	bhi.n	8006aec <UART_SetConfig+0x164>
 8006a90:	a201      	add	r2, pc, #4	@ (adr r2, 8006a98 <UART_SetConfig+0x110>)
 8006a92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a96:	bf00      	nop
 8006a98:	08006acd 	.word	0x08006acd
 8006a9c:	08006aed 	.word	0x08006aed
 8006aa0:	08006aed 	.word	0x08006aed
 8006aa4:	08006aed 	.word	0x08006aed
 8006aa8:	08006add 	.word	0x08006add
 8006aac:	08006aed 	.word	0x08006aed
 8006ab0:	08006aed 	.word	0x08006aed
 8006ab4:	08006aed 	.word	0x08006aed
 8006ab8:	08006ad5 	.word	0x08006ad5
 8006abc:	08006aed 	.word	0x08006aed
 8006ac0:	08006aed 	.word	0x08006aed
 8006ac4:	08006aed 	.word	0x08006aed
 8006ac8:	08006ae5 	.word	0x08006ae5
 8006acc:	2300      	movs	r3, #0
 8006ace:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ad2:	e098      	b.n	8006c06 <UART_SetConfig+0x27e>
 8006ad4:	2302      	movs	r3, #2
 8006ad6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ada:	e094      	b.n	8006c06 <UART_SetConfig+0x27e>
 8006adc:	2304      	movs	r3, #4
 8006ade:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ae2:	e090      	b.n	8006c06 <UART_SetConfig+0x27e>
 8006ae4:	2308      	movs	r3, #8
 8006ae6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006aea:	e08c      	b.n	8006c06 <UART_SetConfig+0x27e>
 8006aec:	2310      	movs	r3, #16
 8006aee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006af2:	e088      	b.n	8006c06 <UART_SetConfig+0x27e>
 8006af4:	697b      	ldr	r3, [r7, #20]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	4a5f      	ldr	r2, [pc, #380]	@ (8006c78 <UART_SetConfig+0x2f0>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d125      	bne.n	8006b4a <UART_SetConfig+0x1c2>
 8006afe:	4b5c      	ldr	r3, [pc, #368]	@ (8006c70 <UART_SetConfig+0x2e8>)
 8006b00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b04:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006b08:	2b30      	cmp	r3, #48	@ 0x30
 8006b0a:	d016      	beq.n	8006b3a <UART_SetConfig+0x1b2>
 8006b0c:	2b30      	cmp	r3, #48	@ 0x30
 8006b0e:	d818      	bhi.n	8006b42 <UART_SetConfig+0x1ba>
 8006b10:	2b20      	cmp	r3, #32
 8006b12:	d00a      	beq.n	8006b2a <UART_SetConfig+0x1a2>
 8006b14:	2b20      	cmp	r3, #32
 8006b16:	d814      	bhi.n	8006b42 <UART_SetConfig+0x1ba>
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d002      	beq.n	8006b22 <UART_SetConfig+0x19a>
 8006b1c:	2b10      	cmp	r3, #16
 8006b1e:	d008      	beq.n	8006b32 <UART_SetConfig+0x1aa>
 8006b20:	e00f      	b.n	8006b42 <UART_SetConfig+0x1ba>
 8006b22:	2300      	movs	r3, #0
 8006b24:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b28:	e06d      	b.n	8006c06 <UART_SetConfig+0x27e>
 8006b2a:	2302      	movs	r3, #2
 8006b2c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b30:	e069      	b.n	8006c06 <UART_SetConfig+0x27e>
 8006b32:	2304      	movs	r3, #4
 8006b34:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b38:	e065      	b.n	8006c06 <UART_SetConfig+0x27e>
 8006b3a:	2308      	movs	r3, #8
 8006b3c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b40:	e061      	b.n	8006c06 <UART_SetConfig+0x27e>
 8006b42:	2310      	movs	r3, #16
 8006b44:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b48:	e05d      	b.n	8006c06 <UART_SetConfig+0x27e>
 8006b4a:	697b      	ldr	r3, [r7, #20]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	4a4b      	ldr	r2, [pc, #300]	@ (8006c7c <UART_SetConfig+0x2f4>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d125      	bne.n	8006ba0 <UART_SetConfig+0x218>
 8006b54:	4b46      	ldr	r3, [pc, #280]	@ (8006c70 <UART_SetConfig+0x2e8>)
 8006b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b5a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006b5e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006b60:	d016      	beq.n	8006b90 <UART_SetConfig+0x208>
 8006b62:	2bc0      	cmp	r3, #192	@ 0xc0
 8006b64:	d818      	bhi.n	8006b98 <UART_SetConfig+0x210>
 8006b66:	2b80      	cmp	r3, #128	@ 0x80
 8006b68:	d00a      	beq.n	8006b80 <UART_SetConfig+0x1f8>
 8006b6a:	2b80      	cmp	r3, #128	@ 0x80
 8006b6c:	d814      	bhi.n	8006b98 <UART_SetConfig+0x210>
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d002      	beq.n	8006b78 <UART_SetConfig+0x1f0>
 8006b72:	2b40      	cmp	r3, #64	@ 0x40
 8006b74:	d008      	beq.n	8006b88 <UART_SetConfig+0x200>
 8006b76:	e00f      	b.n	8006b98 <UART_SetConfig+0x210>
 8006b78:	2300      	movs	r3, #0
 8006b7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b7e:	e042      	b.n	8006c06 <UART_SetConfig+0x27e>
 8006b80:	2302      	movs	r3, #2
 8006b82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b86:	e03e      	b.n	8006c06 <UART_SetConfig+0x27e>
 8006b88:	2304      	movs	r3, #4
 8006b8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b8e:	e03a      	b.n	8006c06 <UART_SetConfig+0x27e>
 8006b90:	2308      	movs	r3, #8
 8006b92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b96:	e036      	b.n	8006c06 <UART_SetConfig+0x27e>
 8006b98:	2310      	movs	r3, #16
 8006b9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b9e:	e032      	b.n	8006c06 <UART_SetConfig+0x27e>
 8006ba0:	697b      	ldr	r3, [r7, #20]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	4a30      	ldr	r2, [pc, #192]	@ (8006c68 <UART_SetConfig+0x2e0>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d12a      	bne.n	8006c00 <UART_SetConfig+0x278>
 8006baa:	4b31      	ldr	r3, [pc, #196]	@ (8006c70 <UART_SetConfig+0x2e8>)
 8006bac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006bb0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006bb4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006bb8:	d01a      	beq.n	8006bf0 <UART_SetConfig+0x268>
 8006bba:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006bbe:	d81b      	bhi.n	8006bf8 <UART_SetConfig+0x270>
 8006bc0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006bc4:	d00c      	beq.n	8006be0 <UART_SetConfig+0x258>
 8006bc6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006bca:	d815      	bhi.n	8006bf8 <UART_SetConfig+0x270>
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d003      	beq.n	8006bd8 <UART_SetConfig+0x250>
 8006bd0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006bd4:	d008      	beq.n	8006be8 <UART_SetConfig+0x260>
 8006bd6:	e00f      	b.n	8006bf8 <UART_SetConfig+0x270>
 8006bd8:	2300      	movs	r3, #0
 8006bda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006bde:	e012      	b.n	8006c06 <UART_SetConfig+0x27e>
 8006be0:	2302      	movs	r3, #2
 8006be2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006be6:	e00e      	b.n	8006c06 <UART_SetConfig+0x27e>
 8006be8:	2304      	movs	r3, #4
 8006bea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006bee:	e00a      	b.n	8006c06 <UART_SetConfig+0x27e>
 8006bf0:	2308      	movs	r3, #8
 8006bf2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006bf6:	e006      	b.n	8006c06 <UART_SetConfig+0x27e>
 8006bf8:	2310      	movs	r3, #16
 8006bfa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006bfe:	e002      	b.n	8006c06 <UART_SetConfig+0x27e>
 8006c00:	2310      	movs	r3, #16
 8006c02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006c06:	697b      	ldr	r3, [r7, #20]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4a17      	ldr	r2, [pc, #92]	@ (8006c68 <UART_SetConfig+0x2e0>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	f040 80a8 	bne.w	8006d62 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006c12:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006c16:	2b08      	cmp	r3, #8
 8006c18:	d834      	bhi.n	8006c84 <UART_SetConfig+0x2fc>
 8006c1a:	a201      	add	r2, pc, #4	@ (adr r2, 8006c20 <UART_SetConfig+0x298>)
 8006c1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c20:	08006c45 	.word	0x08006c45
 8006c24:	08006c85 	.word	0x08006c85
 8006c28:	08006c4d 	.word	0x08006c4d
 8006c2c:	08006c85 	.word	0x08006c85
 8006c30:	08006c53 	.word	0x08006c53
 8006c34:	08006c85 	.word	0x08006c85
 8006c38:	08006c85 	.word	0x08006c85
 8006c3c:	08006c85 	.word	0x08006c85
 8006c40:	08006c5b 	.word	0x08006c5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c44:	f7fe f97a 	bl	8004f3c <HAL_RCC_GetPCLK1Freq>
 8006c48:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006c4a:	e021      	b.n	8006c90 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c4c:	4b0c      	ldr	r3, [pc, #48]	@ (8006c80 <UART_SetConfig+0x2f8>)
 8006c4e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006c50:	e01e      	b.n	8006c90 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c52:	f7fe f905 	bl	8004e60 <HAL_RCC_GetSysClockFreq>
 8006c56:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006c58:	e01a      	b.n	8006c90 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c5a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006c5e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006c60:	e016      	b.n	8006c90 <UART_SetConfig+0x308>
 8006c62:	bf00      	nop
 8006c64:	cfff69f3 	.word	0xcfff69f3
 8006c68:	40008000 	.word	0x40008000
 8006c6c:	40013800 	.word	0x40013800
 8006c70:	40021000 	.word	0x40021000
 8006c74:	40004400 	.word	0x40004400
 8006c78:	40004800 	.word	0x40004800
 8006c7c:	40004c00 	.word	0x40004c00
 8006c80:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8006c84:	2300      	movs	r3, #0
 8006c86:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006c88:	2301      	movs	r3, #1
 8006c8a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006c8e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006c90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	f000 812a 	beq.w	8006eec <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006c98:	697b      	ldr	r3, [r7, #20]
 8006c9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c9c:	4a9e      	ldr	r2, [pc, #632]	@ (8006f18 <UART_SetConfig+0x590>)
 8006c9e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006ca2:	461a      	mov	r2, r3
 8006ca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ca6:	fbb3 f3f2 	udiv	r3, r3, r2
 8006caa:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006cac:	697b      	ldr	r3, [r7, #20]
 8006cae:	685a      	ldr	r2, [r3, #4]
 8006cb0:	4613      	mov	r3, r2
 8006cb2:	005b      	lsls	r3, r3, #1
 8006cb4:	4413      	add	r3, r2
 8006cb6:	69ba      	ldr	r2, [r7, #24]
 8006cb8:	429a      	cmp	r2, r3
 8006cba:	d305      	bcc.n	8006cc8 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006cbc:	697b      	ldr	r3, [r7, #20]
 8006cbe:	685b      	ldr	r3, [r3, #4]
 8006cc0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006cc2:	69ba      	ldr	r2, [r7, #24]
 8006cc4:	429a      	cmp	r2, r3
 8006cc6:	d903      	bls.n	8006cd0 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8006cc8:	2301      	movs	r3, #1
 8006cca:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006cce:	e10d      	b.n	8006eec <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006cd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	60bb      	str	r3, [r7, #8]
 8006cd6:	60fa      	str	r2, [r7, #12]
 8006cd8:	697b      	ldr	r3, [r7, #20]
 8006cda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cdc:	4a8e      	ldr	r2, [pc, #568]	@ (8006f18 <UART_SetConfig+0x590>)
 8006cde:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006ce2:	b29b      	uxth	r3, r3
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	603b      	str	r3, [r7, #0]
 8006ce8:	607a      	str	r2, [r7, #4]
 8006cea:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006cee:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006cf2:	f7f9 fff1 	bl	8000cd8 <__aeabi_uldivmod>
 8006cf6:	4602      	mov	r2, r0
 8006cf8:	460b      	mov	r3, r1
 8006cfa:	4610      	mov	r0, r2
 8006cfc:	4619      	mov	r1, r3
 8006cfe:	f04f 0200 	mov.w	r2, #0
 8006d02:	f04f 0300 	mov.w	r3, #0
 8006d06:	020b      	lsls	r3, r1, #8
 8006d08:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006d0c:	0202      	lsls	r2, r0, #8
 8006d0e:	6979      	ldr	r1, [r7, #20]
 8006d10:	6849      	ldr	r1, [r1, #4]
 8006d12:	0849      	lsrs	r1, r1, #1
 8006d14:	2000      	movs	r0, #0
 8006d16:	460c      	mov	r4, r1
 8006d18:	4605      	mov	r5, r0
 8006d1a:	eb12 0804 	adds.w	r8, r2, r4
 8006d1e:	eb43 0905 	adc.w	r9, r3, r5
 8006d22:	697b      	ldr	r3, [r7, #20]
 8006d24:	685b      	ldr	r3, [r3, #4]
 8006d26:	2200      	movs	r2, #0
 8006d28:	469a      	mov	sl, r3
 8006d2a:	4693      	mov	fp, r2
 8006d2c:	4652      	mov	r2, sl
 8006d2e:	465b      	mov	r3, fp
 8006d30:	4640      	mov	r0, r8
 8006d32:	4649      	mov	r1, r9
 8006d34:	f7f9 ffd0 	bl	8000cd8 <__aeabi_uldivmod>
 8006d38:	4602      	mov	r2, r0
 8006d3a:	460b      	mov	r3, r1
 8006d3c:	4613      	mov	r3, r2
 8006d3e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006d40:	6a3b      	ldr	r3, [r7, #32]
 8006d42:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006d46:	d308      	bcc.n	8006d5a <UART_SetConfig+0x3d2>
 8006d48:	6a3b      	ldr	r3, [r7, #32]
 8006d4a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006d4e:	d204      	bcs.n	8006d5a <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8006d50:	697b      	ldr	r3, [r7, #20]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	6a3a      	ldr	r2, [r7, #32]
 8006d56:	60da      	str	r2, [r3, #12]
 8006d58:	e0c8      	b.n	8006eec <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006d60:	e0c4      	b.n	8006eec <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d62:	697b      	ldr	r3, [r7, #20]
 8006d64:	69db      	ldr	r3, [r3, #28]
 8006d66:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006d6a:	d167      	bne.n	8006e3c <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8006d6c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006d70:	2b08      	cmp	r3, #8
 8006d72:	d828      	bhi.n	8006dc6 <UART_SetConfig+0x43e>
 8006d74:	a201      	add	r2, pc, #4	@ (adr r2, 8006d7c <UART_SetConfig+0x3f4>)
 8006d76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d7a:	bf00      	nop
 8006d7c:	08006da1 	.word	0x08006da1
 8006d80:	08006da9 	.word	0x08006da9
 8006d84:	08006db1 	.word	0x08006db1
 8006d88:	08006dc7 	.word	0x08006dc7
 8006d8c:	08006db7 	.word	0x08006db7
 8006d90:	08006dc7 	.word	0x08006dc7
 8006d94:	08006dc7 	.word	0x08006dc7
 8006d98:	08006dc7 	.word	0x08006dc7
 8006d9c:	08006dbf 	.word	0x08006dbf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006da0:	f7fe f8cc 	bl	8004f3c <HAL_RCC_GetPCLK1Freq>
 8006da4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006da6:	e014      	b.n	8006dd2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006da8:	f7fe f8de 	bl	8004f68 <HAL_RCC_GetPCLK2Freq>
 8006dac:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006dae:	e010      	b.n	8006dd2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006db0:	4b5a      	ldr	r3, [pc, #360]	@ (8006f1c <UART_SetConfig+0x594>)
 8006db2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006db4:	e00d      	b.n	8006dd2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006db6:	f7fe f853 	bl	8004e60 <HAL_RCC_GetSysClockFreq>
 8006dba:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006dbc:	e009      	b.n	8006dd2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006dbe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006dc2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006dc4:	e005      	b.n	8006dd2 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006dca:	2301      	movs	r3, #1
 8006dcc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006dd0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	f000 8089 	beq.w	8006eec <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006dda:	697b      	ldr	r3, [r7, #20]
 8006ddc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dde:	4a4e      	ldr	r2, [pc, #312]	@ (8006f18 <UART_SetConfig+0x590>)
 8006de0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006de4:	461a      	mov	r2, r3
 8006de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006de8:	fbb3 f3f2 	udiv	r3, r3, r2
 8006dec:	005a      	lsls	r2, r3, #1
 8006dee:	697b      	ldr	r3, [r7, #20]
 8006df0:	685b      	ldr	r3, [r3, #4]
 8006df2:	085b      	lsrs	r3, r3, #1
 8006df4:	441a      	add	r2, r3
 8006df6:	697b      	ldr	r3, [r7, #20]
 8006df8:	685b      	ldr	r3, [r3, #4]
 8006dfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dfe:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e00:	6a3b      	ldr	r3, [r7, #32]
 8006e02:	2b0f      	cmp	r3, #15
 8006e04:	d916      	bls.n	8006e34 <UART_SetConfig+0x4ac>
 8006e06:	6a3b      	ldr	r3, [r7, #32]
 8006e08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006e0c:	d212      	bcs.n	8006e34 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006e0e:	6a3b      	ldr	r3, [r7, #32]
 8006e10:	b29b      	uxth	r3, r3
 8006e12:	f023 030f 	bic.w	r3, r3, #15
 8006e16:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006e18:	6a3b      	ldr	r3, [r7, #32]
 8006e1a:	085b      	lsrs	r3, r3, #1
 8006e1c:	b29b      	uxth	r3, r3
 8006e1e:	f003 0307 	and.w	r3, r3, #7
 8006e22:	b29a      	uxth	r2, r3
 8006e24:	8bfb      	ldrh	r3, [r7, #30]
 8006e26:	4313      	orrs	r3, r2
 8006e28:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006e2a:	697b      	ldr	r3, [r7, #20]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	8bfa      	ldrh	r2, [r7, #30]
 8006e30:	60da      	str	r2, [r3, #12]
 8006e32:	e05b      	b.n	8006eec <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8006e34:	2301      	movs	r3, #1
 8006e36:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006e3a:	e057      	b.n	8006eec <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006e3c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006e40:	2b08      	cmp	r3, #8
 8006e42:	d828      	bhi.n	8006e96 <UART_SetConfig+0x50e>
 8006e44:	a201      	add	r2, pc, #4	@ (adr r2, 8006e4c <UART_SetConfig+0x4c4>)
 8006e46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e4a:	bf00      	nop
 8006e4c:	08006e71 	.word	0x08006e71
 8006e50:	08006e79 	.word	0x08006e79
 8006e54:	08006e81 	.word	0x08006e81
 8006e58:	08006e97 	.word	0x08006e97
 8006e5c:	08006e87 	.word	0x08006e87
 8006e60:	08006e97 	.word	0x08006e97
 8006e64:	08006e97 	.word	0x08006e97
 8006e68:	08006e97 	.word	0x08006e97
 8006e6c:	08006e8f 	.word	0x08006e8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e70:	f7fe f864 	bl	8004f3c <HAL_RCC_GetPCLK1Freq>
 8006e74:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006e76:	e014      	b.n	8006ea2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e78:	f7fe f876 	bl	8004f68 <HAL_RCC_GetPCLK2Freq>
 8006e7c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006e7e:	e010      	b.n	8006ea2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e80:	4b26      	ldr	r3, [pc, #152]	@ (8006f1c <UART_SetConfig+0x594>)
 8006e82:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006e84:	e00d      	b.n	8006ea2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e86:	f7fd ffeb 	bl	8004e60 <HAL_RCC_GetSysClockFreq>
 8006e8a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006e8c:	e009      	b.n	8006ea2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e8e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006e92:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006e94:	e005      	b.n	8006ea2 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8006e96:	2300      	movs	r3, #0
 8006e98:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006e9a:	2301      	movs	r3, #1
 8006e9c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006ea0:	bf00      	nop
    }

    if (pclk != 0U)
 8006ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d021      	beq.n	8006eec <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006ea8:	697b      	ldr	r3, [r7, #20]
 8006eaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006eac:	4a1a      	ldr	r2, [pc, #104]	@ (8006f18 <UART_SetConfig+0x590>)
 8006eae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006eb2:	461a      	mov	r2, r3
 8006eb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eb6:	fbb3 f2f2 	udiv	r2, r3, r2
 8006eba:	697b      	ldr	r3, [r7, #20]
 8006ebc:	685b      	ldr	r3, [r3, #4]
 8006ebe:	085b      	lsrs	r3, r3, #1
 8006ec0:	441a      	add	r2, r3
 8006ec2:	697b      	ldr	r3, [r7, #20]
 8006ec4:	685b      	ldr	r3, [r3, #4]
 8006ec6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006eca:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ecc:	6a3b      	ldr	r3, [r7, #32]
 8006ece:	2b0f      	cmp	r3, #15
 8006ed0:	d909      	bls.n	8006ee6 <UART_SetConfig+0x55e>
 8006ed2:	6a3b      	ldr	r3, [r7, #32]
 8006ed4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ed8:	d205      	bcs.n	8006ee6 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006eda:	6a3b      	ldr	r3, [r7, #32]
 8006edc:	b29a      	uxth	r2, r3
 8006ede:	697b      	ldr	r3, [r7, #20]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	60da      	str	r2, [r3, #12]
 8006ee4:	e002      	b.n	8006eec <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006eec:	697b      	ldr	r3, [r7, #20]
 8006eee:	2201      	movs	r2, #1
 8006ef0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006ef4:	697b      	ldr	r3, [r7, #20]
 8006ef6:	2201      	movs	r2, #1
 8006ef8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006efc:	697b      	ldr	r3, [r7, #20]
 8006efe:	2200      	movs	r2, #0
 8006f00:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006f02:	697b      	ldr	r3, [r7, #20]
 8006f04:	2200      	movs	r2, #0
 8006f06:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006f08:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	3730      	adds	r7, #48	@ 0x30
 8006f10:	46bd      	mov	sp, r7
 8006f12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006f16:	bf00      	nop
 8006f18:	0800cd34 	.word	0x0800cd34
 8006f1c:	00f42400 	.word	0x00f42400

08006f20 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006f20:	b480      	push	{r7}
 8006f22:	b083      	sub	sp, #12
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f2c:	f003 0308 	and.w	r3, r3, #8
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d00a      	beq.n	8006f4a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	685b      	ldr	r3, [r3, #4]
 8006f3a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	430a      	orrs	r2, r1
 8006f48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f4e:	f003 0301 	and.w	r3, r3, #1
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d00a      	beq.n	8006f6c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	685b      	ldr	r3, [r3, #4]
 8006f5c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	430a      	orrs	r2, r1
 8006f6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f70:	f003 0302 	and.w	r3, r3, #2
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d00a      	beq.n	8006f8e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	685b      	ldr	r3, [r3, #4]
 8006f7e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	430a      	orrs	r2, r1
 8006f8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f92:	f003 0304 	and.w	r3, r3, #4
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d00a      	beq.n	8006fb0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	685b      	ldr	r3, [r3, #4]
 8006fa0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	430a      	orrs	r2, r1
 8006fae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fb4:	f003 0310 	and.w	r3, r3, #16
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d00a      	beq.n	8006fd2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	689b      	ldr	r3, [r3, #8]
 8006fc2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	430a      	orrs	r2, r1
 8006fd0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fd6:	f003 0320 	and.w	r3, r3, #32
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d00a      	beq.n	8006ff4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	689b      	ldr	r3, [r3, #8]
 8006fe4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	430a      	orrs	r2, r1
 8006ff2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ff8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d01a      	beq.n	8007036 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	685b      	ldr	r3, [r3, #4]
 8007006:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	430a      	orrs	r2, r1
 8007014:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800701a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800701e:	d10a      	bne.n	8007036 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	685b      	ldr	r3, [r3, #4]
 8007026:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	430a      	orrs	r2, r1
 8007034:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800703a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800703e:	2b00      	cmp	r3, #0
 8007040:	d00a      	beq.n	8007058 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	685b      	ldr	r3, [r3, #4]
 8007048:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	430a      	orrs	r2, r1
 8007056:	605a      	str	r2, [r3, #4]
  }
}
 8007058:	bf00      	nop
 800705a:	370c      	adds	r7, #12
 800705c:	46bd      	mov	sp, r7
 800705e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007062:	4770      	bx	lr

08007064 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b098      	sub	sp, #96	@ 0x60
 8007068:	af02      	add	r7, sp, #8
 800706a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2200      	movs	r2, #0
 8007070:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007074:	f7fb fa2a 	bl	80024cc <HAL_GetTick>
 8007078:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f003 0308 	and.w	r3, r3, #8
 8007084:	2b08      	cmp	r3, #8
 8007086:	d12f      	bne.n	80070e8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007088:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800708c:	9300      	str	r3, [sp, #0]
 800708e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007090:	2200      	movs	r2, #0
 8007092:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007096:	6878      	ldr	r0, [r7, #4]
 8007098:	f000 f88e 	bl	80071b8 <UART_WaitOnFlagUntilTimeout>
 800709c:	4603      	mov	r3, r0
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d022      	beq.n	80070e8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070aa:	e853 3f00 	ldrex	r3, [r3]
 80070ae:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80070b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80070b6:	653b      	str	r3, [r7, #80]	@ 0x50
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	461a      	mov	r2, r3
 80070be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80070c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80070c2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070c4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80070c6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80070c8:	e841 2300 	strex	r3, r2, [r1]
 80070cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80070ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d1e6      	bne.n	80070a2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2220      	movs	r2, #32
 80070d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2200      	movs	r2, #0
 80070e0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80070e4:	2303      	movs	r3, #3
 80070e6:	e063      	b.n	80071b0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f003 0304 	and.w	r3, r3, #4
 80070f2:	2b04      	cmp	r3, #4
 80070f4:	d149      	bne.n	800718a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80070f6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80070fa:	9300      	str	r3, [sp, #0]
 80070fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80070fe:	2200      	movs	r2, #0
 8007100:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007104:	6878      	ldr	r0, [r7, #4]
 8007106:	f000 f857 	bl	80071b8 <UART_WaitOnFlagUntilTimeout>
 800710a:	4603      	mov	r3, r0
 800710c:	2b00      	cmp	r3, #0
 800710e:	d03c      	beq.n	800718a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007118:	e853 3f00 	ldrex	r3, [r3]
 800711c:	623b      	str	r3, [r7, #32]
   return(result);
 800711e:	6a3b      	ldr	r3, [r7, #32]
 8007120:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007124:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	461a      	mov	r2, r3
 800712c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800712e:	633b      	str	r3, [r7, #48]	@ 0x30
 8007130:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007132:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007134:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007136:	e841 2300 	strex	r3, r2, [r1]
 800713a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800713c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800713e:	2b00      	cmp	r3, #0
 8007140:	d1e6      	bne.n	8007110 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	3308      	adds	r3, #8
 8007148:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800714a:	693b      	ldr	r3, [r7, #16]
 800714c:	e853 3f00 	ldrex	r3, [r3]
 8007150:	60fb      	str	r3, [r7, #12]
   return(result);
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	f023 0301 	bic.w	r3, r3, #1
 8007158:	64bb      	str	r3, [r7, #72]	@ 0x48
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	3308      	adds	r3, #8
 8007160:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007162:	61fa      	str	r2, [r7, #28]
 8007164:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007166:	69b9      	ldr	r1, [r7, #24]
 8007168:	69fa      	ldr	r2, [r7, #28]
 800716a:	e841 2300 	strex	r3, r2, [r1]
 800716e:	617b      	str	r3, [r7, #20]
   return(result);
 8007170:	697b      	ldr	r3, [r7, #20]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d1e5      	bne.n	8007142 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2220      	movs	r2, #32
 800717a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2200      	movs	r2, #0
 8007182:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007186:	2303      	movs	r3, #3
 8007188:	e012      	b.n	80071b0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2220      	movs	r2, #32
 800718e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	2220      	movs	r2, #32
 8007196:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	2200      	movs	r2, #0
 800719e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2200      	movs	r2, #0
 80071a4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2200      	movs	r2, #0
 80071aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80071ae:	2300      	movs	r3, #0
}
 80071b0:	4618      	mov	r0, r3
 80071b2:	3758      	adds	r7, #88	@ 0x58
 80071b4:	46bd      	mov	sp, r7
 80071b6:	bd80      	pop	{r7, pc}

080071b8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b084      	sub	sp, #16
 80071bc:	af00      	add	r7, sp, #0
 80071be:	60f8      	str	r0, [r7, #12]
 80071c0:	60b9      	str	r1, [r7, #8]
 80071c2:	603b      	str	r3, [r7, #0]
 80071c4:	4613      	mov	r3, r2
 80071c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80071c8:	e04f      	b.n	800726a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80071ca:	69bb      	ldr	r3, [r7, #24]
 80071cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071d0:	d04b      	beq.n	800726a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80071d2:	f7fb f97b 	bl	80024cc <HAL_GetTick>
 80071d6:	4602      	mov	r2, r0
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	1ad3      	subs	r3, r2, r3
 80071dc:	69ba      	ldr	r2, [r7, #24]
 80071de:	429a      	cmp	r2, r3
 80071e0:	d302      	bcc.n	80071e8 <UART_WaitOnFlagUntilTimeout+0x30>
 80071e2:	69bb      	ldr	r3, [r7, #24]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d101      	bne.n	80071ec <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80071e8:	2303      	movs	r3, #3
 80071ea:	e04e      	b.n	800728a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f003 0304 	and.w	r3, r3, #4
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d037      	beq.n	800726a <UART_WaitOnFlagUntilTimeout+0xb2>
 80071fa:	68bb      	ldr	r3, [r7, #8]
 80071fc:	2b80      	cmp	r3, #128	@ 0x80
 80071fe:	d034      	beq.n	800726a <UART_WaitOnFlagUntilTimeout+0xb2>
 8007200:	68bb      	ldr	r3, [r7, #8]
 8007202:	2b40      	cmp	r3, #64	@ 0x40
 8007204:	d031      	beq.n	800726a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	69db      	ldr	r3, [r3, #28]
 800720c:	f003 0308 	and.w	r3, r3, #8
 8007210:	2b08      	cmp	r3, #8
 8007212:	d110      	bne.n	8007236 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	2208      	movs	r2, #8
 800721a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800721c:	68f8      	ldr	r0, [r7, #12]
 800721e:	f000 f95b 	bl	80074d8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	2208      	movs	r2, #8
 8007226:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	2200      	movs	r2, #0
 800722e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007232:	2301      	movs	r3, #1
 8007234:	e029      	b.n	800728a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	69db      	ldr	r3, [r3, #28]
 800723c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007240:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007244:	d111      	bne.n	800726a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800724e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007250:	68f8      	ldr	r0, [r7, #12]
 8007252:	f000 f941 	bl	80074d8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	2220      	movs	r2, #32
 800725a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	2200      	movs	r2, #0
 8007262:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007266:	2303      	movs	r3, #3
 8007268:	e00f      	b.n	800728a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	69da      	ldr	r2, [r3, #28]
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	4013      	ands	r3, r2
 8007274:	68ba      	ldr	r2, [r7, #8]
 8007276:	429a      	cmp	r2, r3
 8007278:	bf0c      	ite	eq
 800727a:	2301      	moveq	r3, #1
 800727c:	2300      	movne	r3, #0
 800727e:	b2db      	uxtb	r3, r3
 8007280:	461a      	mov	r2, r3
 8007282:	79fb      	ldrb	r3, [r7, #7]
 8007284:	429a      	cmp	r2, r3
 8007286:	d0a0      	beq.n	80071ca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007288:	2300      	movs	r3, #0
}
 800728a:	4618      	mov	r0, r3
 800728c:	3710      	adds	r7, #16
 800728e:	46bd      	mov	sp, r7
 8007290:	bd80      	pop	{r7, pc}
	...

08007294 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007294:	b480      	push	{r7}
 8007296:	b0a3      	sub	sp, #140	@ 0x8c
 8007298:	af00      	add	r7, sp, #0
 800729a:	60f8      	str	r0, [r7, #12]
 800729c:	60b9      	str	r1, [r7, #8]
 800729e:	4613      	mov	r3, r2
 80072a0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	68ba      	ldr	r2, [r7, #8]
 80072a6:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	88fa      	ldrh	r2, [r7, #6]
 80072ac:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	88fa      	ldrh	r2, [r7, #6]
 80072b4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	2200      	movs	r2, #0
 80072bc:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	689b      	ldr	r3, [r3, #8]
 80072c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80072c6:	d10e      	bne.n	80072e6 <UART_Start_Receive_IT+0x52>
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	691b      	ldr	r3, [r3, #16]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d105      	bne.n	80072dc <UART_Start_Receive_IT+0x48>
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80072d6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80072da:	e02d      	b.n	8007338 <UART_Start_Receive_IT+0xa4>
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	22ff      	movs	r2, #255	@ 0xff
 80072e0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80072e4:	e028      	b.n	8007338 <UART_Start_Receive_IT+0xa4>
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	689b      	ldr	r3, [r3, #8]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d10d      	bne.n	800730a <UART_Start_Receive_IT+0x76>
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	691b      	ldr	r3, [r3, #16]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d104      	bne.n	8007300 <UART_Start_Receive_IT+0x6c>
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	22ff      	movs	r2, #255	@ 0xff
 80072fa:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80072fe:	e01b      	b.n	8007338 <UART_Start_Receive_IT+0xa4>
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	227f      	movs	r2, #127	@ 0x7f
 8007304:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007308:	e016      	b.n	8007338 <UART_Start_Receive_IT+0xa4>
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	689b      	ldr	r3, [r3, #8]
 800730e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007312:	d10d      	bne.n	8007330 <UART_Start_Receive_IT+0x9c>
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	691b      	ldr	r3, [r3, #16]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d104      	bne.n	8007326 <UART_Start_Receive_IT+0x92>
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	227f      	movs	r2, #127	@ 0x7f
 8007320:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007324:	e008      	b.n	8007338 <UART_Start_Receive_IT+0xa4>
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	223f      	movs	r2, #63	@ 0x3f
 800732a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800732e:	e003      	b.n	8007338 <UART_Start_Receive_IT+0xa4>
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	2200      	movs	r2, #0
 8007334:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	2200      	movs	r2, #0
 800733c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	2222      	movs	r2, #34	@ 0x22
 8007344:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	3308      	adds	r3, #8
 800734e:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007350:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007352:	e853 3f00 	ldrex	r3, [r3]
 8007356:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8007358:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800735a:	f043 0301 	orr.w	r3, r3, #1
 800735e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	3308      	adds	r3, #8
 8007368:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800736c:	673a      	str	r2, [r7, #112]	@ 0x70
 800736e:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007370:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8007372:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8007374:	e841 2300 	strex	r3, r2, [r1]
 8007378:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800737a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800737c:	2b00      	cmp	r3, #0
 800737e:	d1e3      	bne.n	8007348 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007384:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007388:	d14f      	bne.n	800742a <UART_Start_Receive_IT+0x196>
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007390:	88fa      	ldrh	r2, [r7, #6]
 8007392:	429a      	cmp	r2, r3
 8007394:	d349      	bcc.n	800742a <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	689b      	ldr	r3, [r3, #8]
 800739a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800739e:	d107      	bne.n	80073b0 <UART_Start_Receive_IT+0x11c>
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	691b      	ldr	r3, [r3, #16]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d103      	bne.n	80073b0 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	4a47      	ldr	r2, [pc, #284]	@ (80074c8 <UART_Start_Receive_IT+0x234>)
 80073ac:	675a      	str	r2, [r3, #116]	@ 0x74
 80073ae:	e002      	b.n	80073b6 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	4a46      	ldr	r2, [pc, #280]	@ (80074cc <UART_Start_Receive_IT+0x238>)
 80073b4:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	691b      	ldr	r3, [r3, #16]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d01a      	beq.n	80073f4 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80073c6:	e853 3f00 	ldrex	r3, [r3]
 80073ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80073cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80073ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80073d2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	461a      	mov	r2, r3
 80073dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80073e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80073e2:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073e4:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80073e6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80073e8:	e841 2300 	strex	r3, r2, [r1]
 80073ec:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 80073ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d1e4      	bne.n	80073be <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	3308      	adds	r3, #8
 80073fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80073fe:	e853 3f00 	ldrex	r3, [r3]
 8007402:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007404:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007406:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800740a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	3308      	adds	r3, #8
 8007412:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8007414:	64ba      	str	r2, [r7, #72]	@ 0x48
 8007416:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007418:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800741a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800741c:	e841 2300 	strex	r3, r2, [r1]
 8007420:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8007422:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007424:	2b00      	cmp	r3, #0
 8007426:	d1e5      	bne.n	80073f4 <UART_Start_Receive_IT+0x160>
 8007428:	e046      	b.n	80074b8 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	689b      	ldr	r3, [r3, #8]
 800742e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007432:	d107      	bne.n	8007444 <UART_Start_Receive_IT+0x1b0>
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	691b      	ldr	r3, [r3, #16]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d103      	bne.n	8007444 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	4a24      	ldr	r2, [pc, #144]	@ (80074d0 <UART_Start_Receive_IT+0x23c>)
 8007440:	675a      	str	r2, [r3, #116]	@ 0x74
 8007442:	e002      	b.n	800744a <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	4a23      	ldr	r2, [pc, #140]	@ (80074d4 <UART_Start_Receive_IT+0x240>)
 8007448:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	691b      	ldr	r3, [r3, #16]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d019      	beq.n	8007486 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007458:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800745a:	e853 3f00 	ldrex	r3, [r3]
 800745e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007462:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8007466:	677b      	str	r3, [r7, #116]	@ 0x74
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	461a      	mov	r2, r3
 800746e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007470:	637b      	str	r3, [r7, #52]	@ 0x34
 8007472:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007474:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007476:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007478:	e841 2300 	strex	r3, r2, [r1]
 800747c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800747e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007480:	2b00      	cmp	r3, #0
 8007482:	d1e6      	bne.n	8007452 <UART_Start_Receive_IT+0x1be>
 8007484:	e018      	b.n	80074b8 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800748c:	697b      	ldr	r3, [r7, #20]
 800748e:	e853 3f00 	ldrex	r3, [r3]
 8007492:	613b      	str	r3, [r7, #16]
   return(result);
 8007494:	693b      	ldr	r3, [r7, #16]
 8007496:	f043 0320 	orr.w	r3, r3, #32
 800749a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	461a      	mov	r2, r3
 80074a2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80074a4:	623b      	str	r3, [r7, #32]
 80074a6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074a8:	69f9      	ldr	r1, [r7, #28]
 80074aa:	6a3a      	ldr	r2, [r7, #32]
 80074ac:	e841 2300 	strex	r3, r2, [r1]
 80074b0:	61bb      	str	r3, [r7, #24]
   return(result);
 80074b2:	69bb      	ldr	r3, [r7, #24]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d1e6      	bne.n	8007486 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 80074b8:	2300      	movs	r3, #0
}
 80074ba:	4618      	mov	r0, r3
 80074bc:	378c      	adds	r7, #140	@ 0x8c
 80074be:	46bd      	mov	sp, r7
 80074c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c4:	4770      	bx	lr
 80074c6:	bf00      	nop
 80074c8:	08007cf5 	.word	0x08007cf5
 80074cc:	08007991 	.word	0x08007991
 80074d0:	080077d9 	.word	0x080077d9
 80074d4:	08007621 	.word	0x08007621

080074d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80074d8:	b480      	push	{r7}
 80074da:	b095      	sub	sp, #84	@ 0x54
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074e8:	e853 3f00 	ldrex	r3, [r3]
 80074ec:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80074ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074f0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80074f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	461a      	mov	r2, r3
 80074fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80074fe:	643b      	str	r3, [r7, #64]	@ 0x40
 8007500:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007502:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007504:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007506:	e841 2300 	strex	r3, r2, [r1]
 800750a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800750c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800750e:	2b00      	cmp	r3, #0
 8007510:	d1e6      	bne.n	80074e0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	3308      	adds	r3, #8
 8007518:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800751a:	6a3b      	ldr	r3, [r7, #32]
 800751c:	e853 3f00 	ldrex	r3, [r3]
 8007520:	61fb      	str	r3, [r7, #28]
   return(result);
 8007522:	69fb      	ldr	r3, [r7, #28]
 8007524:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007528:	f023 0301 	bic.w	r3, r3, #1
 800752c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	3308      	adds	r3, #8
 8007534:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007536:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007538:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800753a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800753c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800753e:	e841 2300 	strex	r3, r2, [r1]
 8007542:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007546:	2b00      	cmp	r3, #0
 8007548:	d1e3      	bne.n	8007512 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800754e:	2b01      	cmp	r3, #1
 8007550:	d118      	bne.n	8007584 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	e853 3f00 	ldrex	r3, [r3]
 800755e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007560:	68bb      	ldr	r3, [r7, #8]
 8007562:	f023 0310 	bic.w	r3, r3, #16
 8007566:	647b      	str	r3, [r7, #68]	@ 0x44
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	461a      	mov	r2, r3
 800756e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007570:	61bb      	str	r3, [r7, #24]
 8007572:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007574:	6979      	ldr	r1, [r7, #20]
 8007576:	69ba      	ldr	r2, [r7, #24]
 8007578:	e841 2300 	strex	r3, r2, [r1]
 800757c:	613b      	str	r3, [r7, #16]
   return(result);
 800757e:	693b      	ldr	r3, [r7, #16]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d1e6      	bne.n	8007552 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2220      	movs	r2, #32
 8007588:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2200      	movs	r2, #0
 8007590:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2200      	movs	r2, #0
 8007596:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007598:	bf00      	nop
 800759a:	3754      	adds	r7, #84	@ 0x54
 800759c:	46bd      	mov	sp, r7
 800759e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a2:	4770      	bx	lr

080075a4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b084      	sub	sp, #16
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075b0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	2200      	movs	r2, #0
 80075b6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80075ba:	68f8      	ldr	r0, [r7, #12]
 80075bc:	f7fa f91a 	bl	80017f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80075c0:	bf00      	nop
 80075c2:	3710      	adds	r7, #16
 80075c4:	46bd      	mov	sp, r7
 80075c6:	bd80      	pop	{r7, pc}

080075c8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b088      	sub	sp, #32
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	e853 3f00 	ldrex	r3, [r3]
 80075dc:	60bb      	str	r3, [r7, #8]
   return(result);
 80075de:	68bb      	ldr	r3, [r7, #8]
 80075e0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80075e4:	61fb      	str	r3, [r7, #28]
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	461a      	mov	r2, r3
 80075ec:	69fb      	ldr	r3, [r7, #28]
 80075ee:	61bb      	str	r3, [r7, #24]
 80075f0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075f2:	6979      	ldr	r1, [r7, #20]
 80075f4:	69ba      	ldr	r2, [r7, #24]
 80075f6:	e841 2300 	strex	r3, r2, [r1]
 80075fa:	613b      	str	r3, [r7, #16]
   return(result);
 80075fc:	693b      	ldr	r3, [r7, #16]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d1e6      	bne.n	80075d0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	2220      	movs	r2, #32
 8007606:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	2200      	movs	r2, #0
 800760e:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007610:	6878      	ldr	r0, [r7, #4]
 8007612:	f7ff f9a3 	bl	800695c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007616:	bf00      	nop
 8007618:	3720      	adds	r7, #32
 800761a:	46bd      	mov	sp, r7
 800761c:	bd80      	pop	{r7, pc}
	...

08007620 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b09c      	sub	sp, #112	@ 0x70
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800762e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007638:	2b22      	cmp	r3, #34	@ 0x22
 800763a:	f040 80be 	bne.w	80077ba <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007644:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007648:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800764c:	b2d9      	uxtb	r1, r3
 800764e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8007652:	b2da      	uxtb	r2, r3
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007658:	400a      	ands	r2, r1
 800765a:	b2d2      	uxtb	r2, r2
 800765c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007662:	1c5a      	adds	r2, r3, #1
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800766e:	b29b      	uxth	r3, r3
 8007670:	3b01      	subs	r3, #1
 8007672:	b29a      	uxth	r2, r3
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007680:	b29b      	uxth	r3, r3
 8007682:	2b00      	cmp	r3, #0
 8007684:	f040 80a1 	bne.w	80077ca <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800768e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007690:	e853 3f00 	ldrex	r3, [r3]
 8007694:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007696:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007698:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800769c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	461a      	mov	r2, r3
 80076a4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80076a6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80076a8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076aa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80076ac:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80076ae:	e841 2300 	strex	r3, r2, [r1]
 80076b2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80076b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d1e6      	bne.n	8007688 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	3308      	adds	r3, #8
 80076c0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076c4:	e853 3f00 	ldrex	r3, [r3]
 80076c8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80076ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076cc:	f023 0301 	bic.w	r3, r3, #1
 80076d0:	667b      	str	r3, [r7, #100]	@ 0x64
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	3308      	adds	r3, #8
 80076d8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80076da:	647a      	str	r2, [r7, #68]	@ 0x44
 80076dc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076de:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80076e0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80076e2:	e841 2300 	strex	r3, r2, [r1]
 80076e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80076e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d1e5      	bne.n	80076ba <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	2220      	movs	r2, #32
 80076f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2200      	movs	r2, #0
 80076fa:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2200      	movs	r2, #0
 8007700:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	4a33      	ldr	r2, [pc, #204]	@ (80077d4 <UART_RxISR_8BIT+0x1b4>)
 8007708:	4293      	cmp	r3, r2
 800770a:	d01f      	beq.n	800774c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	685b      	ldr	r3, [r3, #4]
 8007712:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007716:	2b00      	cmp	r3, #0
 8007718:	d018      	beq.n	800774c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007722:	e853 3f00 	ldrex	r3, [r3]
 8007726:	623b      	str	r3, [r7, #32]
   return(result);
 8007728:	6a3b      	ldr	r3, [r7, #32]
 800772a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800772e:	663b      	str	r3, [r7, #96]	@ 0x60
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	461a      	mov	r2, r3
 8007736:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007738:	633b      	str	r3, [r7, #48]	@ 0x30
 800773a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800773c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800773e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007740:	e841 2300 	strex	r3, r2, [r1]
 8007744:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007746:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007748:	2b00      	cmp	r3, #0
 800774a:	d1e6      	bne.n	800771a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007750:	2b01      	cmp	r3, #1
 8007752:	d12e      	bne.n	80077b2 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2200      	movs	r2, #0
 8007758:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007760:	693b      	ldr	r3, [r7, #16]
 8007762:	e853 3f00 	ldrex	r3, [r3]
 8007766:	60fb      	str	r3, [r7, #12]
   return(result);
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	f023 0310 	bic.w	r3, r3, #16
 800776e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	461a      	mov	r2, r3
 8007776:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007778:	61fb      	str	r3, [r7, #28]
 800777a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800777c:	69b9      	ldr	r1, [r7, #24]
 800777e:	69fa      	ldr	r2, [r7, #28]
 8007780:	e841 2300 	strex	r3, r2, [r1]
 8007784:	617b      	str	r3, [r7, #20]
   return(result);
 8007786:	697b      	ldr	r3, [r7, #20]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d1e6      	bne.n	800775a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	69db      	ldr	r3, [r3, #28]
 8007792:	f003 0310 	and.w	r3, r3, #16
 8007796:	2b10      	cmp	r3, #16
 8007798:	d103      	bne.n	80077a2 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	2210      	movs	r2, #16
 80077a0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80077a8:	4619      	mov	r1, r3
 80077aa:	6878      	ldr	r0, [r7, #4]
 80077ac:	f7ff f8e0 	bl	8006970 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80077b0:	e00b      	b.n	80077ca <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	f7f9 ffb2 	bl	800171c <HAL_UART_RxCpltCallback>
}
 80077b8:	e007      	b.n	80077ca <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	699a      	ldr	r2, [r3, #24]
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f042 0208 	orr.w	r2, r2, #8
 80077c8:	619a      	str	r2, [r3, #24]
}
 80077ca:	bf00      	nop
 80077cc:	3770      	adds	r7, #112	@ 0x70
 80077ce:	46bd      	mov	sp, r7
 80077d0:	bd80      	pop	{r7, pc}
 80077d2:	bf00      	nop
 80077d4:	40008000 	.word	0x40008000

080077d8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b09c      	sub	sp, #112	@ 0x70
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80077e6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80077f0:	2b22      	cmp	r3, #34	@ 0x22
 80077f2:	f040 80be 	bne.w	8007972 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077fc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007804:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8007806:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800780a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800780e:	4013      	ands	r3, r2
 8007810:	b29a      	uxth	r2, r3
 8007812:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007814:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800781a:	1c9a      	adds	r2, r3, #2
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007826:	b29b      	uxth	r3, r3
 8007828:	3b01      	subs	r3, #1
 800782a:	b29a      	uxth	r2, r3
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007838:	b29b      	uxth	r3, r3
 800783a:	2b00      	cmp	r3, #0
 800783c:	f040 80a1 	bne.w	8007982 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007846:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007848:	e853 3f00 	ldrex	r3, [r3]
 800784c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800784e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007850:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007854:	667b      	str	r3, [r7, #100]	@ 0x64
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	461a      	mov	r2, r3
 800785c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800785e:	657b      	str	r3, [r7, #84]	@ 0x54
 8007860:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007862:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007864:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007866:	e841 2300 	strex	r3, r2, [r1]
 800786a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800786c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800786e:	2b00      	cmp	r3, #0
 8007870:	d1e6      	bne.n	8007840 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	3308      	adds	r3, #8
 8007878:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800787a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800787c:	e853 3f00 	ldrex	r3, [r3]
 8007880:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007882:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007884:	f023 0301 	bic.w	r3, r3, #1
 8007888:	663b      	str	r3, [r7, #96]	@ 0x60
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	3308      	adds	r3, #8
 8007890:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007892:	643a      	str	r2, [r7, #64]	@ 0x40
 8007894:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007896:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007898:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800789a:	e841 2300 	strex	r3, r2, [r1]
 800789e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80078a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d1e5      	bne.n	8007872 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	2220      	movs	r2, #32
 80078aa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	2200      	movs	r2, #0
 80078b2:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2200      	movs	r2, #0
 80078b8:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	4a33      	ldr	r2, [pc, #204]	@ (800798c <UART_RxISR_16BIT+0x1b4>)
 80078c0:	4293      	cmp	r3, r2
 80078c2:	d01f      	beq.n	8007904 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	685b      	ldr	r3, [r3, #4]
 80078ca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d018      	beq.n	8007904 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078d8:	6a3b      	ldr	r3, [r7, #32]
 80078da:	e853 3f00 	ldrex	r3, [r3]
 80078de:	61fb      	str	r3, [r7, #28]
   return(result);
 80078e0:	69fb      	ldr	r3, [r7, #28]
 80078e2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80078e6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	461a      	mov	r2, r3
 80078ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80078f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80078f2:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078f4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80078f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80078f8:	e841 2300 	strex	r3, r2, [r1]
 80078fc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80078fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007900:	2b00      	cmp	r3, #0
 8007902:	d1e6      	bne.n	80078d2 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007908:	2b01      	cmp	r3, #1
 800790a:	d12e      	bne.n	800796a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2200      	movs	r2, #0
 8007910:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	e853 3f00 	ldrex	r3, [r3]
 800791e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007920:	68bb      	ldr	r3, [r7, #8]
 8007922:	f023 0310 	bic.w	r3, r3, #16
 8007926:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	461a      	mov	r2, r3
 800792e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007930:	61bb      	str	r3, [r7, #24]
 8007932:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007934:	6979      	ldr	r1, [r7, #20]
 8007936:	69ba      	ldr	r2, [r7, #24]
 8007938:	e841 2300 	strex	r3, r2, [r1]
 800793c:	613b      	str	r3, [r7, #16]
   return(result);
 800793e:	693b      	ldr	r3, [r7, #16]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d1e6      	bne.n	8007912 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	69db      	ldr	r3, [r3, #28]
 800794a:	f003 0310 	and.w	r3, r3, #16
 800794e:	2b10      	cmp	r3, #16
 8007950:	d103      	bne.n	800795a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	2210      	movs	r2, #16
 8007958:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007960:	4619      	mov	r1, r3
 8007962:	6878      	ldr	r0, [r7, #4]
 8007964:	f7ff f804 	bl	8006970 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007968:	e00b      	b.n	8007982 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800796a:	6878      	ldr	r0, [r7, #4]
 800796c:	f7f9 fed6 	bl	800171c <HAL_UART_RxCpltCallback>
}
 8007970:	e007      	b.n	8007982 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	699a      	ldr	r2, [r3, #24]
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	f042 0208 	orr.w	r2, r2, #8
 8007980:	619a      	str	r2, [r3, #24]
}
 8007982:	bf00      	nop
 8007984:	3770      	adds	r7, #112	@ 0x70
 8007986:	46bd      	mov	sp, r7
 8007988:	bd80      	pop	{r7, pc}
 800798a:	bf00      	nop
 800798c:	40008000 	.word	0x40008000

08007990 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b0ac      	sub	sp, #176	@ 0xb0
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800799e:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	69db      	ldr	r3, [r3, #28]
 80079a8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	689b      	ldr	r3, [r3, #8]
 80079bc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80079c6:	2b22      	cmp	r3, #34	@ 0x22
 80079c8:	f040 8183 	bne.w	8007cd2 <UART_RxISR_8BIT_FIFOEN+0x342>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80079d2:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80079d6:	e126      	b.n	8007c26 <UART_RxISR_8BIT_FIFOEN+0x296>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079de:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80079e2:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 80079e6:	b2d9      	uxtb	r1, r3
 80079e8:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 80079ec:	b2da      	uxtb	r2, r3
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80079f2:	400a      	ands	r2, r1
 80079f4:	b2d2      	uxtb	r2, r2
 80079f6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80079fc:	1c5a      	adds	r2, r3, #1
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007a08:	b29b      	uxth	r3, r3
 8007a0a:	3b01      	subs	r3, #1
 8007a0c:	b29a      	uxth	r2, r3
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	69db      	ldr	r3, [r3, #28]
 8007a1a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007a1e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007a22:	f003 0307 	and.w	r3, r3, #7
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d053      	beq.n	8007ad2 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007a2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007a2e:	f003 0301 	and.w	r3, r3, #1
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d011      	beq.n	8007a5a <UART_RxISR_8BIT_FIFOEN+0xca>
 8007a36:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007a3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d00b      	beq.n	8007a5a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	2201      	movs	r2, #1
 8007a48:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a50:	f043 0201 	orr.w	r2, r3, #1
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007a5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007a5e:	f003 0302 	and.w	r3, r3, #2
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d011      	beq.n	8007a8a <UART_RxISR_8BIT_FIFOEN+0xfa>
 8007a66:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007a6a:	f003 0301 	and.w	r3, r3, #1
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d00b      	beq.n	8007a8a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	2202      	movs	r2, #2
 8007a78:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a80:	f043 0204 	orr.w	r2, r3, #4
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007a8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007a8e:	f003 0304 	and.w	r3, r3, #4
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d011      	beq.n	8007aba <UART_RxISR_8BIT_FIFOEN+0x12a>
 8007a96:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007a9a:	f003 0301 	and.w	r3, r3, #1
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d00b      	beq.n	8007aba <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	2204      	movs	r2, #4
 8007aa8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ab0:	f043 0202 	orr.w	r2, r3, #2
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d006      	beq.n	8007ad2 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007ac4:	6878      	ldr	r0, [r7, #4]
 8007ac6:	f7f9 fe95 	bl	80017f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	2200      	movs	r2, #0
 8007ace:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007ad8:	b29b      	uxth	r3, r3
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	f040 80a3 	bne.w	8007c26 <UART_RxISR_8BIT_FIFOEN+0x296>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ae6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007ae8:	e853 3f00 	ldrex	r3, [r3]
 8007aec:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8007aee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007af0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007af4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	461a      	mov	r2, r3
 8007afe:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007b02:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007b04:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b06:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8007b08:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8007b0a:	e841 2300 	strex	r3, r2, [r1]
 8007b0e:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8007b10:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d1e4      	bne.n	8007ae0 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	3308      	adds	r3, #8
 8007b1c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b1e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007b20:	e853 3f00 	ldrex	r3, [r3]
 8007b24:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8007b26:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007b28:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007b2c:	f023 0301 	bic.w	r3, r3, #1
 8007b30:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	3308      	adds	r3, #8
 8007b3a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007b3e:	66ba      	str	r2, [r7, #104]	@ 0x68
 8007b40:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b42:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8007b44:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8007b46:	e841 2300 	strex	r3, r2, [r1]
 8007b4a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8007b4c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d1e1      	bne.n	8007b16 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	2220      	movs	r2, #32
 8007b56:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2200      	movs	r2, #0
 8007b64:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	4a60      	ldr	r2, [pc, #384]	@ (8007cec <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8007b6c:	4293      	cmp	r3, r2
 8007b6e:	d021      	beq.n	8007bb4 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	685b      	ldr	r3, [r3, #4]
 8007b76:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d01a      	beq.n	8007bb4 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b84:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007b86:	e853 3f00 	ldrex	r3, [r3]
 8007b8a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007b8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007b8e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007b92:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	461a      	mov	r2, r3
 8007b9c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007ba0:	657b      	str	r3, [r7, #84]	@ 0x54
 8007ba2:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ba4:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007ba6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007ba8:	e841 2300 	strex	r3, r2, [r1]
 8007bac:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007bae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d1e4      	bne.n	8007b7e <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007bb8:	2b01      	cmp	r3, #1
 8007bba:	d130      	bne.n	8007c1e <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007bca:	e853 3f00 	ldrex	r3, [r3]
 8007bce:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007bd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bd2:	f023 0310 	bic.w	r3, r3, #16
 8007bd6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	461a      	mov	r2, r3
 8007be0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007be4:	643b      	str	r3, [r7, #64]	@ 0x40
 8007be6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007be8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007bea:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007bec:	e841 2300 	strex	r3, r2, [r1]
 8007bf0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007bf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d1e4      	bne.n	8007bc2 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	69db      	ldr	r3, [r3, #28]
 8007bfe:	f003 0310 	and.w	r3, r3, #16
 8007c02:	2b10      	cmp	r3, #16
 8007c04:	d103      	bne.n	8007c0e <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	2210      	movs	r2, #16
 8007c0c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007c14:	4619      	mov	r1, r3
 8007c16:	6878      	ldr	r0, [r7, #4]
 8007c18:	f7fe feaa 	bl	8006970 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8007c1c:	e00e      	b.n	8007c3c <UART_RxISR_8BIT_FIFOEN+0x2ac>
          HAL_UART_RxCpltCallback(huart);
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	f7f9 fd7c 	bl	800171c <HAL_UART_RxCpltCallback>
        break;
 8007c24:	e00a      	b.n	8007c3c <UART_RxISR_8BIT_FIFOEN+0x2ac>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007c26:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d006      	beq.n	8007c3c <UART_RxISR_8BIT_FIFOEN+0x2ac>
 8007c2e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007c32:	f003 0320 	and.w	r3, r3, #32
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	f47f aece 	bne.w	80079d8 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007c42:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007c46:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d049      	beq.n	8007ce2 <UART_RxISR_8BIT_FIFOEN+0x352>
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007c54:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8007c58:	429a      	cmp	r2, r3
 8007c5a:	d242      	bcs.n	8007ce2 <UART_RxISR_8BIT_FIFOEN+0x352>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	3308      	adds	r3, #8
 8007c62:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c64:	6a3b      	ldr	r3, [r7, #32]
 8007c66:	e853 3f00 	ldrex	r3, [r3]
 8007c6a:	61fb      	str	r3, [r7, #28]
   return(result);
 8007c6c:	69fb      	ldr	r3, [r7, #28]
 8007c6e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007c72:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	3308      	adds	r3, #8
 8007c7c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8007c80:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007c82:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c84:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007c86:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007c88:	e841 2300 	strex	r3, r2, [r1]
 8007c8c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d1e3      	bne.n	8007c5c <UART_RxISR_8BIT_FIFOEN+0x2cc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	4a16      	ldr	r2, [pc, #88]	@ (8007cf0 <UART_RxISR_8BIT_FIFOEN+0x360>)
 8007c98:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	e853 3f00 	ldrex	r3, [r3]
 8007ca6:	60bb      	str	r3, [r7, #8]
   return(result);
 8007ca8:	68bb      	ldr	r3, [r7, #8]
 8007caa:	f043 0320 	orr.w	r3, r3, #32
 8007cae:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	461a      	mov	r2, r3
 8007cb8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007cbc:	61bb      	str	r3, [r7, #24]
 8007cbe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cc0:	6979      	ldr	r1, [r7, #20]
 8007cc2:	69ba      	ldr	r2, [r7, #24]
 8007cc4:	e841 2300 	strex	r3, r2, [r1]
 8007cc8:	613b      	str	r3, [r7, #16]
   return(result);
 8007cca:	693b      	ldr	r3, [r7, #16]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d1e4      	bne.n	8007c9a <UART_RxISR_8BIT_FIFOEN+0x30a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007cd0:	e007      	b.n	8007ce2 <UART_RxISR_8BIT_FIFOEN+0x352>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	699a      	ldr	r2, [r3, #24]
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	f042 0208 	orr.w	r2, r2, #8
 8007ce0:	619a      	str	r2, [r3, #24]
}
 8007ce2:	bf00      	nop
 8007ce4:	37b0      	adds	r7, #176	@ 0xb0
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	bd80      	pop	{r7, pc}
 8007cea:	bf00      	nop
 8007cec:	40008000 	.word	0x40008000
 8007cf0:	08007621 	.word	0x08007621

08007cf4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b0ae      	sub	sp, #184	@ 0xb8
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007d02:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	69db      	ldr	r3, [r3, #28]
 8007d0c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	689b      	ldr	r3, [r3, #8]
 8007d20:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007d2a:	2b22      	cmp	r3, #34	@ 0x22
 8007d2c:	f040 8187 	bne.w	800803e <UART_RxISR_16BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007d36:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007d3a:	e12a      	b.n	8007f92 <UART_RxISR_16BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d42:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d4a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8007d4e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8007d52:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8007d56:	4013      	ands	r3, r2
 8007d58:	b29a      	uxth	r2, r3
 8007d5a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007d5e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d64:	1c9a      	adds	r2, r3, #2
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007d70:	b29b      	uxth	r3, r3
 8007d72:	3b01      	subs	r3, #1
 8007d74:	b29a      	uxth	r2, r3
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	69db      	ldr	r3, [r3, #28]
 8007d82:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007d86:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007d8a:	f003 0307 	and.w	r3, r3, #7
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d053      	beq.n	8007e3a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007d92:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007d96:	f003 0301 	and.w	r3, r3, #1
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d011      	beq.n	8007dc2 <UART_RxISR_16BIT_FIFOEN+0xce>
 8007d9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007da2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d00b      	beq.n	8007dc2 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	2201      	movs	r2, #1
 8007db0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007db8:	f043 0201 	orr.w	r2, r3, #1
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007dc2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007dc6:	f003 0302 	and.w	r3, r3, #2
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d011      	beq.n	8007df2 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8007dce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007dd2:	f003 0301 	and.w	r3, r3, #1
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d00b      	beq.n	8007df2 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	2202      	movs	r2, #2
 8007de0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007de8:	f043 0204 	orr.w	r2, r3, #4
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007df2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007df6:	f003 0304 	and.w	r3, r3, #4
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d011      	beq.n	8007e22 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8007dfe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007e02:	f003 0301 	and.w	r3, r3, #1
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d00b      	beq.n	8007e22 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	2204      	movs	r2, #4
 8007e10:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e18:	f043 0202 	orr.w	r2, r3, #2
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d006      	beq.n	8007e3a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007e2c:	6878      	ldr	r0, [r7, #4]
 8007e2e:	f7f9 fce1 	bl	80017f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2200      	movs	r2, #0
 8007e36:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007e40:	b29b      	uxth	r3, r3
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	f040 80a5 	bne.w	8007f92 <UART_RxISR_16BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e4e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007e50:	e853 3f00 	ldrex	r3, [r3]
 8007e54:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007e56:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007e58:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007e5c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	461a      	mov	r2, r3
 8007e66:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007e6a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007e6e:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e70:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007e72:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007e76:	e841 2300 	strex	r3, r2, [r1]
 8007e7a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007e7c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d1e2      	bne.n	8007e48 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	3308      	adds	r3, #8
 8007e88:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e8a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007e8c:	e853 3f00 	ldrex	r3, [r3]
 8007e90:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007e92:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007e94:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007e98:	f023 0301 	bic.w	r3, r3, #1
 8007e9c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	3308      	adds	r3, #8
 8007ea6:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8007eaa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007eac:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eae:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007eb0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007eb2:	e841 2300 	strex	r3, r2, [r1]
 8007eb6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007eb8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d1e1      	bne.n	8007e82 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2220      	movs	r2, #32
 8007ec2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	2200      	movs	r2, #0
 8007eca:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2200      	movs	r2, #0
 8007ed0:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	4a60      	ldr	r2, [pc, #384]	@ (8008058 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8007ed8:	4293      	cmp	r3, r2
 8007eda:	d021      	beq.n	8007f20 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	685b      	ldr	r3, [r3, #4]
 8007ee2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d01a      	beq.n	8007f20 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ef0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007ef2:	e853 3f00 	ldrex	r3, [r3]
 8007ef6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007ef8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007efa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007efe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	461a      	mov	r2, r3
 8007f08:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007f0c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007f0e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f10:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007f12:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007f14:	e841 2300 	strex	r3, r2, [r1]
 8007f18:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007f1a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d1e4      	bne.n	8007eea <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007f24:	2b01      	cmp	r3, #1
 8007f26:	d130      	bne.n	8007f8a <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f36:	e853 3f00 	ldrex	r3, [r3]
 8007f3a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007f3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f3e:	f023 0310 	bic.w	r3, r3, #16
 8007f42:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	461a      	mov	r2, r3
 8007f4c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007f50:	647b      	str	r3, [r7, #68]	@ 0x44
 8007f52:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f54:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007f56:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007f58:	e841 2300 	strex	r3, r2, [r1]
 8007f5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007f5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d1e4      	bne.n	8007f2e <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	69db      	ldr	r3, [r3, #28]
 8007f6a:	f003 0310 	and.w	r3, r3, #16
 8007f6e:	2b10      	cmp	r3, #16
 8007f70:	d103      	bne.n	8007f7a <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	2210      	movs	r2, #16
 8007f78:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007f80:	4619      	mov	r1, r3
 8007f82:	6878      	ldr	r0, [r7, #4]
 8007f84:	f7fe fcf4 	bl	8006970 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8007f88:	e00e      	b.n	8007fa8 <UART_RxISR_16BIT_FIFOEN+0x2b4>
          HAL_UART_RxCpltCallback(huart);
 8007f8a:	6878      	ldr	r0, [r7, #4]
 8007f8c:	f7f9 fbc6 	bl	800171c <HAL_UART_RxCpltCallback>
        break;
 8007f90:	e00a      	b.n	8007fa8 <UART_RxISR_16BIT_FIFOEN+0x2b4>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007f92:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d006      	beq.n	8007fa8 <UART_RxISR_16BIT_FIFOEN+0x2b4>
 8007f9a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007f9e:	f003 0320 	and.w	r3, r3, #32
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	f47f aeca 	bne.w	8007d3c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007fae:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007fb2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d049      	beq.n	800804e <UART_RxISR_16BIT_FIFOEN+0x35a>
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007fc0:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8007fc4:	429a      	cmp	r2, r3
 8007fc6:	d242      	bcs.n	800804e <UART_RxISR_16BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	3308      	adds	r3, #8
 8007fce:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fd2:	e853 3f00 	ldrex	r3, [r3]
 8007fd6:	623b      	str	r3, [r7, #32]
   return(result);
 8007fd8:	6a3b      	ldr	r3, [r7, #32]
 8007fda:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007fde:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	3308      	adds	r3, #8
 8007fe8:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8007fec:	633a      	str	r2, [r7, #48]	@ 0x30
 8007fee:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ff0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007ff2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007ff4:	e841 2300 	strex	r3, r2, [r1]
 8007ff8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007ffa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d1e3      	bne.n	8007fc8 <UART_RxISR_16BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	4a16      	ldr	r2, [pc, #88]	@ (800805c <UART_RxISR_16BIT_FIFOEN+0x368>)
 8008004:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800800c:	693b      	ldr	r3, [r7, #16]
 800800e:	e853 3f00 	ldrex	r3, [r3]
 8008012:	60fb      	str	r3, [r7, #12]
   return(result);
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	f043 0320 	orr.w	r3, r3, #32
 800801a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	461a      	mov	r2, r3
 8008024:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008028:	61fb      	str	r3, [r7, #28]
 800802a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800802c:	69b9      	ldr	r1, [r7, #24]
 800802e:	69fa      	ldr	r2, [r7, #28]
 8008030:	e841 2300 	strex	r3, r2, [r1]
 8008034:	617b      	str	r3, [r7, #20]
   return(result);
 8008036:	697b      	ldr	r3, [r7, #20]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d1e4      	bne.n	8008006 <UART_RxISR_16BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800803c:	e007      	b.n	800804e <UART_RxISR_16BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	699a      	ldr	r2, [r3, #24]
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	f042 0208 	orr.w	r2, r2, #8
 800804c:	619a      	str	r2, [r3, #24]
}
 800804e:	bf00      	nop
 8008050:	37b8      	adds	r7, #184	@ 0xb8
 8008052:	46bd      	mov	sp, r7
 8008054:	bd80      	pop	{r7, pc}
 8008056:	bf00      	nop
 8008058:	40008000 	.word	0x40008000
 800805c:	080077d9 	.word	0x080077d9

08008060 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008060:	b480      	push	{r7}
 8008062:	b083      	sub	sp, #12
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008068:	bf00      	nop
 800806a:	370c      	adds	r7, #12
 800806c:	46bd      	mov	sp, r7
 800806e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008072:	4770      	bx	lr

08008074 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008074:	b480      	push	{r7}
 8008076:	b083      	sub	sp, #12
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800807c:	bf00      	nop
 800807e:	370c      	adds	r7, #12
 8008080:	46bd      	mov	sp, r7
 8008082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008086:	4770      	bx	lr

08008088 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008088:	b480      	push	{r7}
 800808a:	b083      	sub	sp, #12
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008090:	bf00      	nop
 8008092:	370c      	adds	r7, #12
 8008094:	46bd      	mov	sp, r7
 8008096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809a:	4770      	bx	lr

0800809c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800809c:	b480      	push	{r7}
 800809e:	b085      	sub	sp, #20
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80080aa:	2b01      	cmp	r3, #1
 80080ac:	d101      	bne.n	80080b2 <HAL_UARTEx_DisableFifoMode+0x16>
 80080ae:	2302      	movs	r3, #2
 80080b0:	e027      	b.n	8008102 <HAL_UARTEx_DisableFifoMode+0x66>
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2201      	movs	r2, #1
 80080b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	2224      	movs	r2, #36	@ 0x24
 80080be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	681a      	ldr	r2, [r3, #0]
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	f022 0201 	bic.w	r2, r2, #1
 80080d8:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80080e0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	2200      	movs	r2, #0
 80080e6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	68fa      	ldr	r2, [r7, #12]
 80080ee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2220      	movs	r2, #32
 80080f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2200      	movs	r2, #0
 80080fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008100:	2300      	movs	r3, #0
}
 8008102:	4618      	mov	r0, r3
 8008104:	3714      	adds	r7, #20
 8008106:	46bd      	mov	sp, r7
 8008108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810c:	4770      	bx	lr

0800810e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800810e:	b580      	push	{r7, lr}
 8008110:	b084      	sub	sp, #16
 8008112:	af00      	add	r7, sp, #0
 8008114:	6078      	str	r0, [r7, #4]
 8008116:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800811e:	2b01      	cmp	r3, #1
 8008120:	d101      	bne.n	8008126 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008122:	2302      	movs	r3, #2
 8008124:	e02d      	b.n	8008182 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	2201      	movs	r2, #1
 800812a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	2224      	movs	r2, #36	@ 0x24
 8008132:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	681a      	ldr	r2, [r3, #0]
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	f022 0201 	bic.w	r2, r2, #1
 800814c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	689b      	ldr	r3, [r3, #8]
 8008154:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	683a      	ldr	r2, [r7, #0]
 800815e:	430a      	orrs	r2, r1
 8008160:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008162:	6878      	ldr	r0, [r7, #4]
 8008164:	f000 f850 	bl	8008208 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	68fa      	ldr	r2, [r7, #12]
 800816e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2220      	movs	r2, #32
 8008174:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2200      	movs	r2, #0
 800817c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008180:	2300      	movs	r3, #0
}
 8008182:	4618      	mov	r0, r3
 8008184:	3710      	adds	r7, #16
 8008186:	46bd      	mov	sp, r7
 8008188:	bd80      	pop	{r7, pc}

0800818a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800818a:	b580      	push	{r7, lr}
 800818c:	b084      	sub	sp, #16
 800818e:	af00      	add	r7, sp, #0
 8008190:	6078      	str	r0, [r7, #4]
 8008192:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800819a:	2b01      	cmp	r3, #1
 800819c:	d101      	bne.n	80081a2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800819e:	2302      	movs	r3, #2
 80081a0:	e02d      	b.n	80081fe <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	2201      	movs	r2, #1
 80081a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	2224      	movs	r2, #36	@ 0x24
 80081ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	681a      	ldr	r2, [r3, #0]
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	f022 0201 	bic.w	r2, r2, #1
 80081c8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	689b      	ldr	r3, [r3, #8]
 80081d0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	683a      	ldr	r2, [r7, #0]
 80081da:	430a      	orrs	r2, r1
 80081dc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80081de:	6878      	ldr	r0, [r7, #4]
 80081e0:	f000 f812 	bl	8008208 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	68fa      	ldr	r2, [r7, #12]
 80081ea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2220      	movs	r2, #32
 80081f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2200      	movs	r2, #0
 80081f8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80081fc:	2300      	movs	r3, #0
}
 80081fe:	4618      	mov	r0, r3
 8008200:	3710      	adds	r7, #16
 8008202:	46bd      	mov	sp, r7
 8008204:	bd80      	pop	{r7, pc}
	...

08008208 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008208:	b480      	push	{r7}
 800820a:	b085      	sub	sp, #20
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008214:	2b00      	cmp	r3, #0
 8008216:	d108      	bne.n	800822a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2201      	movs	r2, #1
 800821c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2201      	movs	r2, #1
 8008224:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008228:	e031      	b.n	800828e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800822a:	2308      	movs	r3, #8
 800822c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800822e:	2308      	movs	r3, #8
 8008230:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	689b      	ldr	r3, [r3, #8]
 8008238:	0e5b      	lsrs	r3, r3, #25
 800823a:	b2db      	uxtb	r3, r3
 800823c:	f003 0307 	and.w	r3, r3, #7
 8008240:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	689b      	ldr	r3, [r3, #8]
 8008248:	0f5b      	lsrs	r3, r3, #29
 800824a:	b2db      	uxtb	r3, r3
 800824c:	f003 0307 	and.w	r3, r3, #7
 8008250:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008252:	7bbb      	ldrb	r3, [r7, #14]
 8008254:	7b3a      	ldrb	r2, [r7, #12]
 8008256:	4911      	ldr	r1, [pc, #68]	@ (800829c <UARTEx_SetNbDataToProcess+0x94>)
 8008258:	5c8a      	ldrb	r2, [r1, r2]
 800825a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800825e:	7b3a      	ldrb	r2, [r7, #12]
 8008260:	490f      	ldr	r1, [pc, #60]	@ (80082a0 <UARTEx_SetNbDataToProcess+0x98>)
 8008262:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008264:	fb93 f3f2 	sdiv	r3, r3, r2
 8008268:	b29a      	uxth	r2, r3
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008270:	7bfb      	ldrb	r3, [r7, #15]
 8008272:	7b7a      	ldrb	r2, [r7, #13]
 8008274:	4909      	ldr	r1, [pc, #36]	@ (800829c <UARTEx_SetNbDataToProcess+0x94>)
 8008276:	5c8a      	ldrb	r2, [r1, r2]
 8008278:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800827c:	7b7a      	ldrb	r2, [r7, #13]
 800827e:	4908      	ldr	r1, [pc, #32]	@ (80082a0 <UARTEx_SetNbDataToProcess+0x98>)
 8008280:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008282:	fb93 f3f2 	sdiv	r3, r3, r2
 8008286:	b29a      	uxth	r2, r3
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800828e:	bf00      	nop
 8008290:	3714      	adds	r7, #20
 8008292:	46bd      	mov	sp, r7
 8008294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008298:	4770      	bx	lr
 800829a:	bf00      	nop
 800829c:	0800cd4c 	.word	0x0800cd4c
 80082a0:	0800cd54 	.word	0x0800cd54

080082a4 <sulp>:
 80082a4:	b570      	push	{r4, r5, r6, lr}
 80082a6:	4604      	mov	r4, r0
 80082a8:	460d      	mov	r5, r1
 80082aa:	ec45 4b10 	vmov	d0, r4, r5
 80082ae:	4616      	mov	r6, r2
 80082b0:	f003 fe72 	bl	800bf98 <__ulp>
 80082b4:	ec51 0b10 	vmov	r0, r1, d0
 80082b8:	b17e      	cbz	r6, 80082da <sulp+0x36>
 80082ba:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80082be:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	dd09      	ble.n	80082da <sulp+0x36>
 80082c6:	051b      	lsls	r3, r3, #20
 80082c8:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80082cc:	2400      	movs	r4, #0
 80082ce:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80082d2:	4622      	mov	r2, r4
 80082d4:	462b      	mov	r3, r5
 80082d6:	f7f8 f9b7 	bl	8000648 <__aeabi_dmul>
 80082da:	ec41 0b10 	vmov	d0, r0, r1
 80082de:	bd70      	pop	{r4, r5, r6, pc}

080082e0 <_strtod_l>:
 80082e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082e4:	b09f      	sub	sp, #124	@ 0x7c
 80082e6:	460c      	mov	r4, r1
 80082e8:	9217      	str	r2, [sp, #92]	@ 0x5c
 80082ea:	2200      	movs	r2, #0
 80082ec:	921a      	str	r2, [sp, #104]	@ 0x68
 80082ee:	9005      	str	r0, [sp, #20]
 80082f0:	f04f 0a00 	mov.w	sl, #0
 80082f4:	f04f 0b00 	mov.w	fp, #0
 80082f8:	460a      	mov	r2, r1
 80082fa:	9219      	str	r2, [sp, #100]	@ 0x64
 80082fc:	7811      	ldrb	r1, [r2, #0]
 80082fe:	292b      	cmp	r1, #43	@ 0x2b
 8008300:	d04a      	beq.n	8008398 <_strtod_l+0xb8>
 8008302:	d838      	bhi.n	8008376 <_strtod_l+0x96>
 8008304:	290d      	cmp	r1, #13
 8008306:	d832      	bhi.n	800836e <_strtod_l+0x8e>
 8008308:	2908      	cmp	r1, #8
 800830a:	d832      	bhi.n	8008372 <_strtod_l+0x92>
 800830c:	2900      	cmp	r1, #0
 800830e:	d03b      	beq.n	8008388 <_strtod_l+0xa8>
 8008310:	2200      	movs	r2, #0
 8008312:	920b      	str	r2, [sp, #44]	@ 0x2c
 8008314:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8008316:	782a      	ldrb	r2, [r5, #0]
 8008318:	2a30      	cmp	r2, #48	@ 0x30
 800831a:	f040 80b3 	bne.w	8008484 <_strtod_l+0x1a4>
 800831e:	786a      	ldrb	r2, [r5, #1]
 8008320:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008324:	2a58      	cmp	r2, #88	@ 0x58
 8008326:	d16e      	bne.n	8008406 <_strtod_l+0x126>
 8008328:	9302      	str	r3, [sp, #8]
 800832a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800832c:	9301      	str	r3, [sp, #4]
 800832e:	ab1a      	add	r3, sp, #104	@ 0x68
 8008330:	9300      	str	r3, [sp, #0]
 8008332:	4a8e      	ldr	r2, [pc, #568]	@ (800856c <_strtod_l+0x28c>)
 8008334:	9805      	ldr	r0, [sp, #20]
 8008336:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008338:	a919      	add	r1, sp, #100	@ 0x64
 800833a:	f002 ff1f 	bl	800b17c <__gethex>
 800833e:	f010 060f 	ands.w	r6, r0, #15
 8008342:	4604      	mov	r4, r0
 8008344:	d005      	beq.n	8008352 <_strtod_l+0x72>
 8008346:	2e06      	cmp	r6, #6
 8008348:	d128      	bne.n	800839c <_strtod_l+0xbc>
 800834a:	3501      	adds	r5, #1
 800834c:	2300      	movs	r3, #0
 800834e:	9519      	str	r5, [sp, #100]	@ 0x64
 8008350:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008352:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008354:	2b00      	cmp	r3, #0
 8008356:	f040 858e 	bne.w	8008e76 <_strtod_l+0xb96>
 800835a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800835c:	b1cb      	cbz	r3, 8008392 <_strtod_l+0xb2>
 800835e:	4652      	mov	r2, sl
 8008360:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8008364:	ec43 2b10 	vmov	d0, r2, r3
 8008368:	b01f      	add	sp, #124	@ 0x7c
 800836a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800836e:	2920      	cmp	r1, #32
 8008370:	d1ce      	bne.n	8008310 <_strtod_l+0x30>
 8008372:	3201      	adds	r2, #1
 8008374:	e7c1      	b.n	80082fa <_strtod_l+0x1a>
 8008376:	292d      	cmp	r1, #45	@ 0x2d
 8008378:	d1ca      	bne.n	8008310 <_strtod_l+0x30>
 800837a:	2101      	movs	r1, #1
 800837c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800837e:	1c51      	adds	r1, r2, #1
 8008380:	9119      	str	r1, [sp, #100]	@ 0x64
 8008382:	7852      	ldrb	r2, [r2, #1]
 8008384:	2a00      	cmp	r2, #0
 8008386:	d1c5      	bne.n	8008314 <_strtod_l+0x34>
 8008388:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800838a:	9419      	str	r4, [sp, #100]	@ 0x64
 800838c:	2b00      	cmp	r3, #0
 800838e:	f040 8570 	bne.w	8008e72 <_strtod_l+0xb92>
 8008392:	4652      	mov	r2, sl
 8008394:	465b      	mov	r3, fp
 8008396:	e7e5      	b.n	8008364 <_strtod_l+0x84>
 8008398:	2100      	movs	r1, #0
 800839a:	e7ef      	b.n	800837c <_strtod_l+0x9c>
 800839c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800839e:	b13a      	cbz	r2, 80083b0 <_strtod_l+0xd0>
 80083a0:	2135      	movs	r1, #53	@ 0x35
 80083a2:	a81c      	add	r0, sp, #112	@ 0x70
 80083a4:	f003 fef2 	bl	800c18c <__copybits>
 80083a8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80083aa:	9805      	ldr	r0, [sp, #20]
 80083ac:	f003 fac0 	bl	800b930 <_Bfree>
 80083b0:	3e01      	subs	r6, #1
 80083b2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80083b4:	2e04      	cmp	r6, #4
 80083b6:	d806      	bhi.n	80083c6 <_strtod_l+0xe6>
 80083b8:	e8df f006 	tbb	[pc, r6]
 80083bc:	201d0314 	.word	0x201d0314
 80083c0:	14          	.byte	0x14
 80083c1:	00          	.byte	0x00
 80083c2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80083c6:	05e1      	lsls	r1, r4, #23
 80083c8:	bf48      	it	mi
 80083ca:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80083ce:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80083d2:	0d1b      	lsrs	r3, r3, #20
 80083d4:	051b      	lsls	r3, r3, #20
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d1bb      	bne.n	8008352 <_strtod_l+0x72>
 80083da:	f001 ff85 	bl	800a2e8 <__errno>
 80083de:	2322      	movs	r3, #34	@ 0x22
 80083e0:	6003      	str	r3, [r0, #0]
 80083e2:	e7b6      	b.n	8008352 <_strtod_l+0x72>
 80083e4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80083e8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80083ec:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80083f0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80083f4:	e7e7      	b.n	80083c6 <_strtod_l+0xe6>
 80083f6:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8008574 <_strtod_l+0x294>
 80083fa:	e7e4      	b.n	80083c6 <_strtod_l+0xe6>
 80083fc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8008400:	f04f 3aff 	mov.w	sl, #4294967295
 8008404:	e7df      	b.n	80083c6 <_strtod_l+0xe6>
 8008406:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008408:	1c5a      	adds	r2, r3, #1
 800840a:	9219      	str	r2, [sp, #100]	@ 0x64
 800840c:	785b      	ldrb	r3, [r3, #1]
 800840e:	2b30      	cmp	r3, #48	@ 0x30
 8008410:	d0f9      	beq.n	8008406 <_strtod_l+0x126>
 8008412:	2b00      	cmp	r3, #0
 8008414:	d09d      	beq.n	8008352 <_strtod_l+0x72>
 8008416:	2301      	movs	r3, #1
 8008418:	9309      	str	r3, [sp, #36]	@ 0x24
 800841a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800841c:	930c      	str	r3, [sp, #48]	@ 0x30
 800841e:	2300      	movs	r3, #0
 8008420:	9308      	str	r3, [sp, #32]
 8008422:	930a      	str	r3, [sp, #40]	@ 0x28
 8008424:	461f      	mov	r7, r3
 8008426:	220a      	movs	r2, #10
 8008428:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800842a:	7805      	ldrb	r5, [r0, #0]
 800842c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8008430:	b2d9      	uxtb	r1, r3
 8008432:	2909      	cmp	r1, #9
 8008434:	d928      	bls.n	8008488 <_strtod_l+0x1a8>
 8008436:	494e      	ldr	r1, [pc, #312]	@ (8008570 <_strtod_l+0x290>)
 8008438:	2201      	movs	r2, #1
 800843a:	f001 fef9 	bl	800a230 <strncmp>
 800843e:	2800      	cmp	r0, #0
 8008440:	d032      	beq.n	80084a8 <_strtod_l+0x1c8>
 8008442:	2000      	movs	r0, #0
 8008444:	462a      	mov	r2, r5
 8008446:	4681      	mov	r9, r0
 8008448:	463d      	mov	r5, r7
 800844a:	4603      	mov	r3, r0
 800844c:	2a65      	cmp	r2, #101	@ 0x65
 800844e:	d001      	beq.n	8008454 <_strtod_l+0x174>
 8008450:	2a45      	cmp	r2, #69	@ 0x45
 8008452:	d114      	bne.n	800847e <_strtod_l+0x19e>
 8008454:	b91d      	cbnz	r5, 800845e <_strtod_l+0x17e>
 8008456:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008458:	4302      	orrs	r2, r0
 800845a:	d095      	beq.n	8008388 <_strtod_l+0xa8>
 800845c:	2500      	movs	r5, #0
 800845e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8008460:	1c62      	adds	r2, r4, #1
 8008462:	9219      	str	r2, [sp, #100]	@ 0x64
 8008464:	7862      	ldrb	r2, [r4, #1]
 8008466:	2a2b      	cmp	r2, #43	@ 0x2b
 8008468:	d077      	beq.n	800855a <_strtod_l+0x27a>
 800846a:	2a2d      	cmp	r2, #45	@ 0x2d
 800846c:	d07b      	beq.n	8008566 <_strtod_l+0x286>
 800846e:	f04f 0c00 	mov.w	ip, #0
 8008472:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8008476:	2909      	cmp	r1, #9
 8008478:	f240 8082 	bls.w	8008580 <_strtod_l+0x2a0>
 800847c:	9419      	str	r4, [sp, #100]	@ 0x64
 800847e:	f04f 0800 	mov.w	r8, #0
 8008482:	e0a2      	b.n	80085ca <_strtod_l+0x2ea>
 8008484:	2300      	movs	r3, #0
 8008486:	e7c7      	b.n	8008418 <_strtod_l+0x138>
 8008488:	2f08      	cmp	r7, #8
 800848a:	bfd5      	itete	le
 800848c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800848e:	9908      	ldrgt	r1, [sp, #32]
 8008490:	fb02 3301 	mlale	r3, r2, r1, r3
 8008494:	fb02 3301 	mlagt	r3, r2, r1, r3
 8008498:	f100 0001 	add.w	r0, r0, #1
 800849c:	bfd4      	ite	le
 800849e:	930a      	strle	r3, [sp, #40]	@ 0x28
 80084a0:	9308      	strgt	r3, [sp, #32]
 80084a2:	3701      	adds	r7, #1
 80084a4:	9019      	str	r0, [sp, #100]	@ 0x64
 80084a6:	e7bf      	b.n	8008428 <_strtod_l+0x148>
 80084a8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80084aa:	1c5a      	adds	r2, r3, #1
 80084ac:	9219      	str	r2, [sp, #100]	@ 0x64
 80084ae:	785a      	ldrb	r2, [r3, #1]
 80084b0:	b37f      	cbz	r7, 8008512 <_strtod_l+0x232>
 80084b2:	4681      	mov	r9, r0
 80084b4:	463d      	mov	r5, r7
 80084b6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80084ba:	2b09      	cmp	r3, #9
 80084bc:	d912      	bls.n	80084e4 <_strtod_l+0x204>
 80084be:	2301      	movs	r3, #1
 80084c0:	e7c4      	b.n	800844c <_strtod_l+0x16c>
 80084c2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80084c4:	1c5a      	adds	r2, r3, #1
 80084c6:	9219      	str	r2, [sp, #100]	@ 0x64
 80084c8:	785a      	ldrb	r2, [r3, #1]
 80084ca:	3001      	adds	r0, #1
 80084cc:	2a30      	cmp	r2, #48	@ 0x30
 80084ce:	d0f8      	beq.n	80084c2 <_strtod_l+0x1e2>
 80084d0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80084d4:	2b08      	cmp	r3, #8
 80084d6:	f200 84d3 	bhi.w	8008e80 <_strtod_l+0xba0>
 80084da:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80084dc:	930c      	str	r3, [sp, #48]	@ 0x30
 80084de:	4681      	mov	r9, r0
 80084e0:	2000      	movs	r0, #0
 80084e2:	4605      	mov	r5, r0
 80084e4:	3a30      	subs	r2, #48	@ 0x30
 80084e6:	f100 0301 	add.w	r3, r0, #1
 80084ea:	d02a      	beq.n	8008542 <_strtod_l+0x262>
 80084ec:	4499      	add	r9, r3
 80084ee:	eb00 0c05 	add.w	ip, r0, r5
 80084f2:	462b      	mov	r3, r5
 80084f4:	210a      	movs	r1, #10
 80084f6:	4563      	cmp	r3, ip
 80084f8:	d10d      	bne.n	8008516 <_strtod_l+0x236>
 80084fa:	1c69      	adds	r1, r5, #1
 80084fc:	4401      	add	r1, r0
 80084fe:	4428      	add	r0, r5
 8008500:	2808      	cmp	r0, #8
 8008502:	dc16      	bgt.n	8008532 <_strtod_l+0x252>
 8008504:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008506:	230a      	movs	r3, #10
 8008508:	fb03 2300 	mla	r3, r3, r0, r2
 800850c:	930a      	str	r3, [sp, #40]	@ 0x28
 800850e:	2300      	movs	r3, #0
 8008510:	e018      	b.n	8008544 <_strtod_l+0x264>
 8008512:	4638      	mov	r0, r7
 8008514:	e7da      	b.n	80084cc <_strtod_l+0x1ec>
 8008516:	2b08      	cmp	r3, #8
 8008518:	f103 0301 	add.w	r3, r3, #1
 800851c:	dc03      	bgt.n	8008526 <_strtod_l+0x246>
 800851e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8008520:	434e      	muls	r6, r1
 8008522:	960a      	str	r6, [sp, #40]	@ 0x28
 8008524:	e7e7      	b.n	80084f6 <_strtod_l+0x216>
 8008526:	2b10      	cmp	r3, #16
 8008528:	bfde      	ittt	le
 800852a:	9e08      	ldrle	r6, [sp, #32]
 800852c:	434e      	mulle	r6, r1
 800852e:	9608      	strle	r6, [sp, #32]
 8008530:	e7e1      	b.n	80084f6 <_strtod_l+0x216>
 8008532:	280f      	cmp	r0, #15
 8008534:	dceb      	bgt.n	800850e <_strtod_l+0x22e>
 8008536:	9808      	ldr	r0, [sp, #32]
 8008538:	230a      	movs	r3, #10
 800853a:	fb03 2300 	mla	r3, r3, r0, r2
 800853e:	9308      	str	r3, [sp, #32]
 8008540:	e7e5      	b.n	800850e <_strtod_l+0x22e>
 8008542:	4629      	mov	r1, r5
 8008544:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008546:	1c50      	adds	r0, r2, #1
 8008548:	9019      	str	r0, [sp, #100]	@ 0x64
 800854a:	7852      	ldrb	r2, [r2, #1]
 800854c:	4618      	mov	r0, r3
 800854e:	460d      	mov	r5, r1
 8008550:	e7b1      	b.n	80084b6 <_strtod_l+0x1d6>
 8008552:	f04f 0900 	mov.w	r9, #0
 8008556:	2301      	movs	r3, #1
 8008558:	e77d      	b.n	8008456 <_strtod_l+0x176>
 800855a:	f04f 0c00 	mov.w	ip, #0
 800855e:	1ca2      	adds	r2, r4, #2
 8008560:	9219      	str	r2, [sp, #100]	@ 0x64
 8008562:	78a2      	ldrb	r2, [r4, #2]
 8008564:	e785      	b.n	8008472 <_strtod_l+0x192>
 8008566:	f04f 0c01 	mov.w	ip, #1
 800856a:	e7f8      	b.n	800855e <_strtod_l+0x27e>
 800856c:	0800cd74 	.word	0x0800cd74
 8008570:	0800cd5c 	.word	0x0800cd5c
 8008574:	7ff00000 	.word	0x7ff00000
 8008578:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800857a:	1c51      	adds	r1, r2, #1
 800857c:	9119      	str	r1, [sp, #100]	@ 0x64
 800857e:	7852      	ldrb	r2, [r2, #1]
 8008580:	2a30      	cmp	r2, #48	@ 0x30
 8008582:	d0f9      	beq.n	8008578 <_strtod_l+0x298>
 8008584:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8008588:	2908      	cmp	r1, #8
 800858a:	f63f af78 	bhi.w	800847e <_strtod_l+0x19e>
 800858e:	3a30      	subs	r2, #48	@ 0x30
 8008590:	920e      	str	r2, [sp, #56]	@ 0x38
 8008592:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008594:	920f      	str	r2, [sp, #60]	@ 0x3c
 8008596:	f04f 080a 	mov.w	r8, #10
 800859a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800859c:	1c56      	adds	r6, r2, #1
 800859e:	9619      	str	r6, [sp, #100]	@ 0x64
 80085a0:	7852      	ldrb	r2, [r2, #1]
 80085a2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80085a6:	f1be 0f09 	cmp.w	lr, #9
 80085aa:	d939      	bls.n	8008620 <_strtod_l+0x340>
 80085ac:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80085ae:	1a76      	subs	r6, r6, r1
 80085b0:	2e08      	cmp	r6, #8
 80085b2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80085b6:	dc03      	bgt.n	80085c0 <_strtod_l+0x2e0>
 80085b8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80085ba:	4588      	cmp	r8, r1
 80085bc:	bfa8      	it	ge
 80085be:	4688      	movge	r8, r1
 80085c0:	f1bc 0f00 	cmp.w	ip, #0
 80085c4:	d001      	beq.n	80085ca <_strtod_l+0x2ea>
 80085c6:	f1c8 0800 	rsb	r8, r8, #0
 80085ca:	2d00      	cmp	r5, #0
 80085cc:	d14e      	bne.n	800866c <_strtod_l+0x38c>
 80085ce:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80085d0:	4308      	orrs	r0, r1
 80085d2:	f47f aebe 	bne.w	8008352 <_strtod_l+0x72>
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	f47f aed6 	bne.w	8008388 <_strtod_l+0xa8>
 80085dc:	2a69      	cmp	r2, #105	@ 0x69
 80085de:	d028      	beq.n	8008632 <_strtod_l+0x352>
 80085e0:	dc25      	bgt.n	800862e <_strtod_l+0x34e>
 80085e2:	2a49      	cmp	r2, #73	@ 0x49
 80085e4:	d025      	beq.n	8008632 <_strtod_l+0x352>
 80085e6:	2a4e      	cmp	r2, #78	@ 0x4e
 80085e8:	f47f aece 	bne.w	8008388 <_strtod_l+0xa8>
 80085ec:	499b      	ldr	r1, [pc, #620]	@ (800885c <_strtod_l+0x57c>)
 80085ee:	a819      	add	r0, sp, #100	@ 0x64
 80085f0:	f002 ffe6 	bl	800b5c0 <__match>
 80085f4:	2800      	cmp	r0, #0
 80085f6:	f43f aec7 	beq.w	8008388 <_strtod_l+0xa8>
 80085fa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80085fc:	781b      	ldrb	r3, [r3, #0]
 80085fe:	2b28      	cmp	r3, #40	@ 0x28
 8008600:	d12e      	bne.n	8008660 <_strtod_l+0x380>
 8008602:	4997      	ldr	r1, [pc, #604]	@ (8008860 <_strtod_l+0x580>)
 8008604:	aa1c      	add	r2, sp, #112	@ 0x70
 8008606:	a819      	add	r0, sp, #100	@ 0x64
 8008608:	f002 ffee 	bl	800b5e8 <__hexnan>
 800860c:	2805      	cmp	r0, #5
 800860e:	d127      	bne.n	8008660 <_strtod_l+0x380>
 8008610:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008612:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8008616:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800861a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800861e:	e698      	b.n	8008352 <_strtod_l+0x72>
 8008620:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8008622:	fb08 2101 	mla	r1, r8, r1, r2
 8008626:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800862a:	920e      	str	r2, [sp, #56]	@ 0x38
 800862c:	e7b5      	b.n	800859a <_strtod_l+0x2ba>
 800862e:	2a6e      	cmp	r2, #110	@ 0x6e
 8008630:	e7da      	b.n	80085e8 <_strtod_l+0x308>
 8008632:	498c      	ldr	r1, [pc, #560]	@ (8008864 <_strtod_l+0x584>)
 8008634:	a819      	add	r0, sp, #100	@ 0x64
 8008636:	f002 ffc3 	bl	800b5c0 <__match>
 800863a:	2800      	cmp	r0, #0
 800863c:	f43f aea4 	beq.w	8008388 <_strtod_l+0xa8>
 8008640:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008642:	4989      	ldr	r1, [pc, #548]	@ (8008868 <_strtod_l+0x588>)
 8008644:	3b01      	subs	r3, #1
 8008646:	a819      	add	r0, sp, #100	@ 0x64
 8008648:	9319      	str	r3, [sp, #100]	@ 0x64
 800864a:	f002 ffb9 	bl	800b5c0 <__match>
 800864e:	b910      	cbnz	r0, 8008656 <_strtod_l+0x376>
 8008650:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008652:	3301      	adds	r3, #1
 8008654:	9319      	str	r3, [sp, #100]	@ 0x64
 8008656:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8008878 <_strtod_l+0x598>
 800865a:	f04f 0a00 	mov.w	sl, #0
 800865e:	e678      	b.n	8008352 <_strtod_l+0x72>
 8008660:	4882      	ldr	r0, [pc, #520]	@ (800886c <_strtod_l+0x58c>)
 8008662:	f001 fe7d 	bl	800a360 <nan>
 8008666:	ec5b ab10 	vmov	sl, fp, d0
 800866a:	e672      	b.n	8008352 <_strtod_l+0x72>
 800866c:	eba8 0309 	sub.w	r3, r8, r9
 8008670:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008672:	9309      	str	r3, [sp, #36]	@ 0x24
 8008674:	2f00      	cmp	r7, #0
 8008676:	bf08      	it	eq
 8008678:	462f      	moveq	r7, r5
 800867a:	2d10      	cmp	r5, #16
 800867c:	462c      	mov	r4, r5
 800867e:	bfa8      	it	ge
 8008680:	2410      	movge	r4, #16
 8008682:	f7f7 ff67 	bl	8000554 <__aeabi_ui2d>
 8008686:	2d09      	cmp	r5, #9
 8008688:	4682      	mov	sl, r0
 800868a:	468b      	mov	fp, r1
 800868c:	dc13      	bgt.n	80086b6 <_strtod_l+0x3d6>
 800868e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008690:	2b00      	cmp	r3, #0
 8008692:	f43f ae5e 	beq.w	8008352 <_strtod_l+0x72>
 8008696:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008698:	dd78      	ble.n	800878c <_strtod_l+0x4ac>
 800869a:	2b16      	cmp	r3, #22
 800869c:	dc5f      	bgt.n	800875e <_strtod_l+0x47e>
 800869e:	4974      	ldr	r1, [pc, #464]	@ (8008870 <_strtod_l+0x590>)
 80086a0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80086a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80086a8:	4652      	mov	r2, sl
 80086aa:	465b      	mov	r3, fp
 80086ac:	f7f7 ffcc 	bl	8000648 <__aeabi_dmul>
 80086b0:	4682      	mov	sl, r0
 80086b2:	468b      	mov	fp, r1
 80086b4:	e64d      	b.n	8008352 <_strtod_l+0x72>
 80086b6:	4b6e      	ldr	r3, [pc, #440]	@ (8008870 <_strtod_l+0x590>)
 80086b8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80086bc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80086c0:	f7f7 ffc2 	bl	8000648 <__aeabi_dmul>
 80086c4:	4682      	mov	sl, r0
 80086c6:	9808      	ldr	r0, [sp, #32]
 80086c8:	468b      	mov	fp, r1
 80086ca:	f7f7 ff43 	bl	8000554 <__aeabi_ui2d>
 80086ce:	4602      	mov	r2, r0
 80086d0:	460b      	mov	r3, r1
 80086d2:	4650      	mov	r0, sl
 80086d4:	4659      	mov	r1, fp
 80086d6:	f7f7 fe01 	bl	80002dc <__adddf3>
 80086da:	2d0f      	cmp	r5, #15
 80086dc:	4682      	mov	sl, r0
 80086de:	468b      	mov	fp, r1
 80086e0:	ddd5      	ble.n	800868e <_strtod_l+0x3ae>
 80086e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086e4:	1b2c      	subs	r4, r5, r4
 80086e6:	441c      	add	r4, r3
 80086e8:	2c00      	cmp	r4, #0
 80086ea:	f340 8096 	ble.w	800881a <_strtod_l+0x53a>
 80086ee:	f014 030f 	ands.w	r3, r4, #15
 80086f2:	d00a      	beq.n	800870a <_strtod_l+0x42a>
 80086f4:	495e      	ldr	r1, [pc, #376]	@ (8008870 <_strtod_l+0x590>)
 80086f6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80086fa:	4652      	mov	r2, sl
 80086fc:	465b      	mov	r3, fp
 80086fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008702:	f7f7 ffa1 	bl	8000648 <__aeabi_dmul>
 8008706:	4682      	mov	sl, r0
 8008708:	468b      	mov	fp, r1
 800870a:	f034 040f 	bics.w	r4, r4, #15
 800870e:	d073      	beq.n	80087f8 <_strtod_l+0x518>
 8008710:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8008714:	dd48      	ble.n	80087a8 <_strtod_l+0x4c8>
 8008716:	2400      	movs	r4, #0
 8008718:	46a0      	mov	r8, r4
 800871a:	940a      	str	r4, [sp, #40]	@ 0x28
 800871c:	46a1      	mov	r9, r4
 800871e:	9a05      	ldr	r2, [sp, #20]
 8008720:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8008878 <_strtod_l+0x598>
 8008724:	2322      	movs	r3, #34	@ 0x22
 8008726:	6013      	str	r3, [r2, #0]
 8008728:	f04f 0a00 	mov.w	sl, #0
 800872c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800872e:	2b00      	cmp	r3, #0
 8008730:	f43f ae0f 	beq.w	8008352 <_strtod_l+0x72>
 8008734:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008736:	9805      	ldr	r0, [sp, #20]
 8008738:	f003 f8fa 	bl	800b930 <_Bfree>
 800873c:	9805      	ldr	r0, [sp, #20]
 800873e:	4649      	mov	r1, r9
 8008740:	f003 f8f6 	bl	800b930 <_Bfree>
 8008744:	9805      	ldr	r0, [sp, #20]
 8008746:	4641      	mov	r1, r8
 8008748:	f003 f8f2 	bl	800b930 <_Bfree>
 800874c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800874e:	9805      	ldr	r0, [sp, #20]
 8008750:	f003 f8ee 	bl	800b930 <_Bfree>
 8008754:	9805      	ldr	r0, [sp, #20]
 8008756:	4621      	mov	r1, r4
 8008758:	f003 f8ea 	bl	800b930 <_Bfree>
 800875c:	e5f9      	b.n	8008352 <_strtod_l+0x72>
 800875e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008760:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8008764:	4293      	cmp	r3, r2
 8008766:	dbbc      	blt.n	80086e2 <_strtod_l+0x402>
 8008768:	4c41      	ldr	r4, [pc, #260]	@ (8008870 <_strtod_l+0x590>)
 800876a:	f1c5 050f 	rsb	r5, r5, #15
 800876e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008772:	4652      	mov	r2, sl
 8008774:	465b      	mov	r3, fp
 8008776:	e9d1 0100 	ldrd	r0, r1, [r1]
 800877a:	f7f7 ff65 	bl	8000648 <__aeabi_dmul>
 800877e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008780:	1b5d      	subs	r5, r3, r5
 8008782:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008786:	e9d4 2300 	ldrd	r2, r3, [r4]
 800878a:	e78f      	b.n	80086ac <_strtod_l+0x3cc>
 800878c:	3316      	adds	r3, #22
 800878e:	dba8      	blt.n	80086e2 <_strtod_l+0x402>
 8008790:	4b37      	ldr	r3, [pc, #220]	@ (8008870 <_strtod_l+0x590>)
 8008792:	eba9 0808 	sub.w	r8, r9, r8
 8008796:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800879a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800879e:	4650      	mov	r0, sl
 80087a0:	4659      	mov	r1, fp
 80087a2:	f7f8 f87b 	bl	800089c <__aeabi_ddiv>
 80087a6:	e783      	b.n	80086b0 <_strtod_l+0x3d0>
 80087a8:	4b32      	ldr	r3, [pc, #200]	@ (8008874 <_strtod_l+0x594>)
 80087aa:	9308      	str	r3, [sp, #32]
 80087ac:	2300      	movs	r3, #0
 80087ae:	1124      	asrs	r4, r4, #4
 80087b0:	4650      	mov	r0, sl
 80087b2:	4659      	mov	r1, fp
 80087b4:	461e      	mov	r6, r3
 80087b6:	2c01      	cmp	r4, #1
 80087b8:	dc21      	bgt.n	80087fe <_strtod_l+0x51e>
 80087ba:	b10b      	cbz	r3, 80087c0 <_strtod_l+0x4e0>
 80087bc:	4682      	mov	sl, r0
 80087be:	468b      	mov	fp, r1
 80087c0:	492c      	ldr	r1, [pc, #176]	@ (8008874 <_strtod_l+0x594>)
 80087c2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80087c6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80087ca:	4652      	mov	r2, sl
 80087cc:	465b      	mov	r3, fp
 80087ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80087d2:	f7f7 ff39 	bl	8000648 <__aeabi_dmul>
 80087d6:	4b28      	ldr	r3, [pc, #160]	@ (8008878 <_strtod_l+0x598>)
 80087d8:	460a      	mov	r2, r1
 80087da:	400b      	ands	r3, r1
 80087dc:	4927      	ldr	r1, [pc, #156]	@ (800887c <_strtod_l+0x59c>)
 80087de:	428b      	cmp	r3, r1
 80087e0:	4682      	mov	sl, r0
 80087e2:	d898      	bhi.n	8008716 <_strtod_l+0x436>
 80087e4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80087e8:	428b      	cmp	r3, r1
 80087ea:	bf86      	itte	hi
 80087ec:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8008880 <_strtod_l+0x5a0>
 80087f0:	f04f 3aff 	movhi.w	sl, #4294967295
 80087f4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80087f8:	2300      	movs	r3, #0
 80087fa:	9308      	str	r3, [sp, #32]
 80087fc:	e07a      	b.n	80088f4 <_strtod_l+0x614>
 80087fe:	07e2      	lsls	r2, r4, #31
 8008800:	d505      	bpl.n	800880e <_strtod_l+0x52e>
 8008802:	9b08      	ldr	r3, [sp, #32]
 8008804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008808:	f7f7 ff1e 	bl	8000648 <__aeabi_dmul>
 800880c:	2301      	movs	r3, #1
 800880e:	9a08      	ldr	r2, [sp, #32]
 8008810:	3208      	adds	r2, #8
 8008812:	3601      	adds	r6, #1
 8008814:	1064      	asrs	r4, r4, #1
 8008816:	9208      	str	r2, [sp, #32]
 8008818:	e7cd      	b.n	80087b6 <_strtod_l+0x4d6>
 800881a:	d0ed      	beq.n	80087f8 <_strtod_l+0x518>
 800881c:	4264      	negs	r4, r4
 800881e:	f014 020f 	ands.w	r2, r4, #15
 8008822:	d00a      	beq.n	800883a <_strtod_l+0x55a>
 8008824:	4b12      	ldr	r3, [pc, #72]	@ (8008870 <_strtod_l+0x590>)
 8008826:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800882a:	4650      	mov	r0, sl
 800882c:	4659      	mov	r1, fp
 800882e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008832:	f7f8 f833 	bl	800089c <__aeabi_ddiv>
 8008836:	4682      	mov	sl, r0
 8008838:	468b      	mov	fp, r1
 800883a:	1124      	asrs	r4, r4, #4
 800883c:	d0dc      	beq.n	80087f8 <_strtod_l+0x518>
 800883e:	2c1f      	cmp	r4, #31
 8008840:	dd20      	ble.n	8008884 <_strtod_l+0x5a4>
 8008842:	2400      	movs	r4, #0
 8008844:	46a0      	mov	r8, r4
 8008846:	940a      	str	r4, [sp, #40]	@ 0x28
 8008848:	46a1      	mov	r9, r4
 800884a:	9a05      	ldr	r2, [sp, #20]
 800884c:	2322      	movs	r3, #34	@ 0x22
 800884e:	f04f 0a00 	mov.w	sl, #0
 8008852:	f04f 0b00 	mov.w	fp, #0
 8008856:	6013      	str	r3, [r2, #0]
 8008858:	e768      	b.n	800872c <_strtod_l+0x44c>
 800885a:	bf00      	nop
 800885c:	0800cdbd 	.word	0x0800cdbd
 8008860:	0800cd60 	.word	0x0800cd60
 8008864:	0800cdb5 	.word	0x0800cdb5
 8008868:	0800cdf4 	.word	0x0800cdf4
 800886c:	0800d185 	.word	0x0800d185
 8008870:	0800cf70 	.word	0x0800cf70
 8008874:	0800cf48 	.word	0x0800cf48
 8008878:	7ff00000 	.word	0x7ff00000
 800887c:	7ca00000 	.word	0x7ca00000
 8008880:	7fefffff 	.word	0x7fefffff
 8008884:	f014 0310 	ands.w	r3, r4, #16
 8008888:	bf18      	it	ne
 800888a:	236a      	movne	r3, #106	@ 0x6a
 800888c:	4ea9      	ldr	r6, [pc, #676]	@ (8008b34 <_strtod_l+0x854>)
 800888e:	9308      	str	r3, [sp, #32]
 8008890:	4650      	mov	r0, sl
 8008892:	4659      	mov	r1, fp
 8008894:	2300      	movs	r3, #0
 8008896:	07e2      	lsls	r2, r4, #31
 8008898:	d504      	bpl.n	80088a4 <_strtod_l+0x5c4>
 800889a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800889e:	f7f7 fed3 	bl	8000648 <__aeabi_dmul>
 80088a2:	2301      	movs	r3, #1
 80088a4:	1064      	asrs	r4, r4, #1
 80088a6:	f106 0608 	add.w	r6, r6, #8
 80088aa:	d1f4      	bne.n	8008896 <_strtod_l+0x5b6>
 80088ac:	b10b      	cbz	r3, 80088b2 <_strtod_l+0x5d2>
 80088ae:	4682      	mov	sl, r0
 80088b0:	468b      	mov	fp, r1
 80088b2:	9b08      	ldr	r3, [sp, #32]
 80088b4:	b1b3      	cbz	r3, 80088e4 <_strtod_l+0x604>
 80088b6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80088ba:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80088be:	2b00      	cmp	r3, #0
 80088c0:	4659      	mov	r1, fp
 80088c2:	dd0f      	ble.n	80088e4 <_strtod_l+0x604>
 80088c4:	2b1f      	cmp	r3, #31
 80088c6:	dd55      	ble.n	8008974 <_strtod_l+0x694>
 80088c8:	2b34      	cmp	r3, #52	@ 0x34
 80088ca:	bfde      	ittt	le
 80088cc:	f04f 33ff 	movle.w	r3, #4294967295
 80088d0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80088d4:	4093      	lslle	r3, r2
 80088d6:	f04f 0a00 	mov.w	sl, #0
 80088da:	bfcc      	ite	gt
 80088dc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80088e0:	ea03 0b01 	andle.w	fp, r3, r1
 80088e4:	2200      	movs	r2, #0
 80088e6:	2300      	movs	r3, #0
 80088e8:	4650      	mov	r0, sl
 80088ea:	4659      	mov	r1, fp
 80088ec:	f7f8 f914 	bl	8000b18 <__aeabi_dcmpeq>
 80088f0:	2800      	cmp	r0, #0
 80088f2:	d1a6      	bne.n	8008842 <_strtod_l+0x562>
 80088f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80088f6:	9300      	str	r3, [sp, #0]
 80088f8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80088fa:	9805      	ldr	r0, [sp, #20]
 80088fc:	462b      	mov	r3, r5
 80088fe:	463a      	mov	r2, r7
 8008900:	f003 f87e 	bl	800ba00 <__s2b>
 8008904:	900a      	str	r0, [sp, #40]	@ 0x28
 8008906:	2800      	cmp	r0, #0
 8008908:	f43f af05 	beq.w	8008716 <_strtod_l+0x436>
 800890c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800890e:	2a00      	cmp	r2, #0
 8008910:	eba9 0308 	sub.w	r3, r9, r8
 8008914:	bfa8      	it	ge
 8008916:	2300      	movge	r3, #0
 8008918:	9312      	str	r3, [sp, #72]	@ 0x48
 800891a:	2400      	movs	r4, #0
 800891c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008920:	9316      	str	r3, [sp, #88]	@ 0x58
 8008922:	46a0      	mov	r8, r4
 8008924:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008926:	9805      	ldr	r0, [sp, #20]
 8008928:	6859      	ldr	r1, [r3, #4]
 800892a:	f002 ffc1 	bl	800b8b0 <_Balloc>
 800892e:	4681      	mov	r9, r0
 8008930:	2800      	cmp	r0, #0
 8008932:	f43f aef4 	beq.w	800871e <_strtod_l+0x43e>
 8008936:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008938:	691a      	ldr	r2, [r3, #16]
 800893a:	3202      	adds	r2, #2
 800893c:	f103 010c 	add.w	r1, r3, #12
 8008940:	0092      	lsls	r2, r2, #2
 8008942:	300c      	adds	r0, #12
 8008944:	f001 fcfd 	bl	800a342 <memcpy>
 8008948:	ec4b ab10 	vmov	d0, sl, fp
 800894c:	9805      	ldr	r0, [sp, #20]
 800894e:	aa1c      	add	r2, sp, #112	@ 0x70
 8008950:	a91b      	add	r1, sp, #108	@ 0x6c
 8008952:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8008956:	f003 fb8f 	bl	800c078 <__d2b>
 800895a:	901a      	str	r0, [sp, #104]	@ 0x68
 800895c:	2800      	cmp	r0, #0
 800895e:	f43f aede 	beq.w	800871e <_strtod_l+0x43e>
 8008962:	9805      	ldr	r0, [sp, #20]
 8008964:	2101      	movs	r1, #1
 8008966:	f003 f8e1 	bl	800bb2c <__i2b>
 800896a:	4680      	mov	r8, r0
 800896c:	b948      	cbnz	r0, 8008982 <_strtod_l+0x6a2>
 800896e:	f04f 0800 	mov.w	r8, #0
 8008972:	e6d4      	b.n	800871e <_strtod_l+0x43e>
 8008974:	f04f 32ff 	mov.w	r2, #4294967295
 8008978:	fa02 f303 	lsl.w	r3, r2, r3
 800897c:	ea03 0a0a 	and.w	sl, r3, sl
 8008980:	e7b0      	b.n	80088e4 <_strtod_l+0x604>
 8008982:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8008984:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8008986:	2d00      	cmp	r5, #0
 8008988:	bfab      	itete	ge
 800898a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800898c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800898e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8008990:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8008992:	bfac      	ite	ge
 8008994:	18ef      	addge	r7, r5, r3
 8008996:	1b5e      	sublt	r6, r3, r5
 8008998:	9b08      	ldr	r3, [sp, #32]
 800899a:	1aed      	subs	r5, r5, r3
 800899c:	4415      	add	r5, r2
 800899e:	4b66      	ldr	r3, [pc, #408]	@ (8008b38 <_strtod_l+0x858>)
 80089a0:	3d01      	subs	r5, #1
 80089a2:	429d      	cmp	r5, r3
 80089a4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80089a8:	da50      	bge.n	8008a4c <_strtod_l+0x76c>
 80089aa:	1b5b      	subs	r3, r3, r5
 80089ac:	2b1f      	cmp	r3, #31
 80089ae:	eba2 0203 	sub.w	r2, r2, r3
 80089b2:	f04f 0101 	mov.w	r1, #1
 80089b6:	dc3d      	bgt.n	8008a34 <_strtod_l+0x754>
 80089b8:	fa01 f303 	lsl.w	r3, r1, r3
 80089bc:	9313      	str	r3, [sp, #76]	@ 0x4c
 80089be:	2300      	movs	r3, #0
 80089c0:	9310      	str	r3, [sp, #64]	@ 0x40
 80089c2:	18bd      	adds	r5, r7, r2
 80089c4:	9b08      	ldr	r3, [sp, #32]
 80089c6:	42af      	cmp	r7, r5
 80089c8:	4416      	add	r6, r2
 80089ca:	441e      	add	r6, r3
 80089cc:	463b      	mov	r3, r7
 80089ce:	bfa8      	it	ge
 80089d0:	462b      	movge	r3, r5
 80089d2:	42b3      	cmp	r3, r6
 80089d4:	bfa8      	it	ge
 80089d6:	4633      	movge	r3, r6
 80089d8:	2b00      	cmp	r3, #0
 80089da:	bfc2      	ittt	gt
 80089dc:	1aed      	subgt	r5, r5, r3
 80089de:	1af6      	subgt	r6, r6, r3
 80089e0:	1aff      	subgt	r7, r7, r3
 80089e2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	dd16      	ble.n	8008a16 <_strtod_l+0x736>
 80089e8:	4641      	mov	r1, r8
 80089ea:	9805      	ldr	r0, [sp, #20]
 80089ec:	461a      	mov	r2, r3
 80089ee:	f003 f95d 	bl	800bcac <__pow5mult>
 80089f2:	4680      	mov	r8, r0
 80089f4:	2800      	cmp	r0, #0
 80089f6:	d0ba      	beq.n	800896e <_strtod_l+0x68e>
 80089f8:	4601      	mov	r1, r0
 80089fa:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80089fc:	9805      	ldr	r0, [sp, #20]
 80089fe:	f003 f8ab 	bl	800bb58 <__multiply>
 8008a02:	900e      	str	r0, [sp, #56]	@ 0x38
 8008a04:	2800      	cmp	r0, #0
 8008a06:	f43f ae8a 	beq.w	800871e <_strtod_l+0x43e>
 8008a0a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008a0c:	9805      	ldr	r0, [sp, #20]
 8008a0e:	f002 ff8f 	bl	800b930 <_Bfree>
 8008a12:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008a14:	931a      	str	r3, [sp, #104]	@ 0x68
 8008a16:	2d00      	cmp	r5, #0
 8008a18:	dc1d      	bgt.n	8008a56 <_strtod_l+0x776>
 8008a1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	dd23      	ble.n	8008a68 <_strtod_l+0x788>
 8008a20:	4649      	mov	r1, r9
 8008a22:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8008a24:	9805      	ldr	r0, [sp, #20]
 8008a26:	f003 f941 	bl	800bcac <__pow5mult>
 8008a2a:	4681      	mov	r9, r0
 8008a2c:	b9e0      	cbnz	r0, 8008a68 <_strtod_l+0x788>
 8008a2e:	f04f 0900 	mov.w	r9, #0
 8008a32:	e674      	b.n	800871e <_strtod_l+0x43e>
 8008a34:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8008a38:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8008a3c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8008a40:	35e2      	adds	r5, #226	@ 0xe2
 8008a42:	fa01 f305 	lsl.w	r3, r1, r5
 8008a46:	9310      	str	r3, [sp, #64]	@ 0x40
 8008a48:	9113      	str	r1, [sp, #76]	@ 0x4c
 8008a4a:	e7ba      	b.n	80089c2 <_strtod_l+0x6e2>
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	9310      	str	r3, [sp, #64]	@ 0x40
 8008a50:	2301      	movs	r3, #1
 8008a52:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008a54:	e7b5      	b.n	80089c2 <_strtod_l+0x6e2>
 8008a56:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008a58:	9805      	ldr	r0, [sp, #20]
 8008a5a:	462a      	mov	r2, r5
 8008a5c:	f003 f980 	bl	800bd60 <__lshift>
 8008a60:	901a      	str	r0, [sp, #104]	@ 0x68
 8008a62:	2800      	cmp	r0, #0
 8008a64:	d1d9      	bne.n	8008a1a <_strtod_l+0x73a>
 8008a66:	e65a      	b.n	800871e <_strtod_l+0x43e>
 8008a68:	2e00      	cmp	r6, #0
 8008a6a:	dd07      	ble.n	8008a7c <_strtod_l+0x79c>
 8008a6c:	4649      	mov	r1, r9
 8008a6e:	9805      	ldr	r0, [sp, #20]
 8008a70:	4632      	mov	r2, r6
 8008a72:	f003 f975 	bl	800bd60 <__lshift>
 8008a76:	4681      	mov	r9, r0
 8008a78:	2800      	cmp	r0, #0
 8008a7a:	d0d8      	beq.n	8008a2e <_strtod_l+0x74e>
 8008a7c:	2f00      	cmp	r7, #0
 8008a7e:	dd08      	ble.n	8008a92 <_strtod_l+0x7b2>
 8008a80:	4641      	mov	r1, r8
 8008a82:	9805      	ldr	r0, [sp, #20]
 8008a84:	463a      	mov	r2, r7
 8008a86:	f003 f96b 	bl	800bd60 <__lshift>
 8008a8a:	4680      	mov	r8, r0
 8008a8c:	2800      	cmp	r0, #0
 8008a8e:	f43f ae46 	beq.w	800871e <_strtod_l+0x43e>
 8008a92:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008a94:	9805      	ldr	r0, [sp, #20]
 8008a96:	464a      	mov	r2, r9
 8008a98:	f003 f9ea 	bl	800be70 <__mdiff>
 8008a9c:	4604      	mov	r4, r0
 8008a9e:	2800      	cmp	r0, #0
 8008aa0:	f43f ae3d 	beq.w	800871e <_strtod_l+0x43e>
 8008aa4:	68c3      	ldr	r3, [r0, #12]
 8008aa6:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	60c3      	str	r3, [r0, #12]
 8008aac:	4641      	mov	r1, r8
 8008aae:	f003 f9c3 	bl	800be38 <__mcmp>
 8008ab2:	2800      	cmp	r0, #0
 8008ab4:	da46      	bge.n	8008b44 <_strtod_l+0x864>
 8008ab6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008ab8:	ea53 030a 	orrs.w	r3, r3, sl
 8008abc:	d16c      	bne.n	8008b98 <_strtod_l+0x8b8>
 8008abe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d168      	bne.n	8008b98 <_strtod_l+0x8b8>
 8008ac6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008aca:	0d1b      	lsrs	r3, r3, #20
 8008acc:	051b      	lsls	r3, r3, #20
 8008ace:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008ad2:	d961      	bls.n	8008b98 <_strtod_l+0x8b8>
 8008ad4:	6963      	ldr	r3, [r4, #20]
 8008ad6:	b913      	cbnz	r3, 8008ade <_strtod_l+0x7fe>
 8008ad8:	6923      	ldr	r3, [r4, #16]
 8008ada:	2b01      	cmp	r3, #1
 8008adc:	dd5c      	ble.n	8008b98 <_strtod_l+0x8b8>
 8008ade:	4621      	mov	r1, r4
 8008ae0:	2201      	movs	r2, #1
 8008ae2:	9805      	ldr	r0, [sp, #20]
 8008ae4:	f003 f93c 	bl	800bd60 <__lshift>
 8008ae8:	4641      	mov	r1, r8
 8008aea:	4604      	mov	r4, r0
 8008aec:	f003 f9a4 	bl	800be38 <__mcmp>
 8008af0:	2800      	cmp	r0, #0
 8008af2:	dd51      	ble.n	8008b98 <_strtod_l+0x8b8>
 8008af4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008af8:	9a08      	ldr	r2, [sp, #32]
 8008afa:	0d1b      	lsrs	r3, r3, #20
 8008afc:	051b      	lsls	r3, r3, #20
 8008afe:	2a00      	cmp	r2, #0
 8008b00:	d06b      	beq.n	8008bda <_strtod_l+0x8fa>
 8008b02:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008b06:	d868      	bhi.n	8008bda <_strtod_l+0x8fa>
 8008b08:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8008b0c:	f67f ae9d 	bls.w	800884a <_strtod_l+0x56a>
 8008b10:	4b0a      	ldr	r3, [pc, #40]	@ (8008b3c <_strtod_l+0x85c>)
 8008b12:	4650      	mov	r0, sl
 8008b14:	4659      	mov	r1, fp
 8008b16:	2200      	movs	r2, #0
 8008b18:	f7f7 fd96 	bl	8000648 <__aeabi_dmul>
 8008b1c:	4b08      	ldr	r3, [pc, #32]	@ (8008b40 <_strtod_l+0x860>)
 8008b1e:	400b      	ands	r3, r1
 8008b20:	4682      	mov	sl, r0
 8008b22:	468b      	mov	fp, r1
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	f47f ae05 	bne.w	8008734 <_strtod_l+0x454>
 8008b2a:	9a05      	ldr	r2, [sp, #20]
 8008b2c:	2322      	movs	r3, #34	@ 0x22
 8008b2e:	6013      	str	r3, [r2, #0]
 8008b30:	e600      	b.n	8008734 <_strtod_l+0x454>
 8008b32:	bf00      	nop
 8008b34:	0800cd88 	.word	0x0800cd88
 8008b38:	fffffc02 	.word	0xfffffc02
 8008b3c:	39500000 	.word	0x39500000
 8008b40:	7ff00000 	.word	0x7ff00000
 8008b44:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008b48:	d165      	bne.n	8008c16 <_strtod_l+0x936>
 8008b4a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8008b4c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008b50:	b35a      	cbz	r2, 8008baa <_strtod_l+0x8ca>
 8008b52:	4a9f      	ldr	r2, [pc, #636]	@ (8008dd0 <_strtod_l+0xaf0>)
 8008b54:	4293      	cmp	r3, r2
 8008b56:	d12b      	bne.n	8008bb0 <_strtod_l+0x8d0>
 8008b58:	9b08      	ldr	r3, [sp, #32]
 8008b5a:	4651      	mov	r1, sl
 8008b5c:	b303      	cbz	r3, 8008ba0 <_strtod_l+0x8c0>
 8008b5e:	4b9d      	ldr	r3, [pc, #628]	@ (8008dd4 <_strtod_l+0xaf4>)
 8008b60:	465a      	mov	r2, fp
 8008b62:	4013      	ands	r3, r2
 8008b64:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8008b68:	f04f 32ff 	mov.w	r2, #4294967295
 8008b6c:	d81b      	bhi.n	8008ba6 <_strtod_l+0x8c6>
 8008b6e:	0d1b      	lsrs	r3, r3, #20
 8008b70:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008b74:	fa02 f303 	lsl.w	r3, r2, r3
 8008b78:	4299      	cmp	r1, r3
 8008b7a:	d119      	bne.n	8008bb0 <_strtod_l+0x8d0>
 8008b7c:	4b96      	ldr	r3, [pc, #600]	@ (8008dd8 <_strtod_l+0xaf8>)
 8008b7e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008b80:	429a      	cmp	r2, r3
 8008b82:	d102      	bne.n	8008b8a <_strtod_l+0x8aa>
 8008b84:	3101      	adds	r1, #1
 8008b86:	f43f adca 	beq.w	800871e <_strtod_l+0x43e>
 8008b8a:	4b92      	ldr	r3, [pc, #584]	@ (8008dd4 <_strtod_l+0xaf4>)
 8008b8c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008b8e:	401a      	ands	r2, r3
 8008b90:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8008b94:	f04f 0a00 	mov.w	sl, #0
 8008b98:	9b08      	ldr	r3, [sp, #32]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d1b8      	bne.n	8008b10 <_strtod_l+0x830>
 8008b9e:	e5c9      	b.n	8008734 <_strtod_l+0x454>
 8008ba0:	f04f 33ff 	mov.w	r3, #4294967295
 8008ba4:	e7e8      	b.n	8008b78 <_strtod_l+0x898>
 8008ba6:	4613      	mov	r3, r2
 8008ba8:	e7e6      	b.n	8008b78 <_strtod_l+0x898>
 8008baa:	ea53 030a 	orrs.w	r3, r3, sl
 8008bae:	d0a1      	beq.n	8008af4 <_strtod_l+0x814>
 8008bb0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008bb2:	b1db      	cbz	r3, 8008bec <_strtod_l+0x90c>
 8008bb4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008bb6:	4213      	tst	r3, r2
 8008bb8:	d0ee      	beq.n	8008b98 <_strtod_l+0x8b8>
 8008bba:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008bbc:	9a08      	ldr	r2, [sp, #32]
 8008bbe:	4650      	mov	r0, sl
 8008bc0:	4659      	mov	r1, fp
 8008bc2:	b1bb      	cbz	r3, 8008bf4 <_strtod_l+0x914>
 8008bc4:	f7ff fb6e 	bl	80082a4 <sulp>
 8008bc8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008bcc:	ec53 2b10 	vmov	r2, r3, d0
 8008bd0:	f7f7 fb84 	bl	80002dc <__adddf3>
 8008bd4:	4682      	mov	sl, r0
 8008bd6:	468b      	mov	fp, r1
 8008bd8:	e7de      	b.n	8008b98 <_strtod_l+0x8b8>
 8008bda:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8008bde:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008be2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008be6:	f04f 3aff 	mov.w	sl, #4294967295
 8008bea:	e7d5      	b.n	8008b98 <_strtod_l+0x8b8>
 8008bec:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008bee:	ea13 0f0a 	tst.w	r3, sl
 8008bf2:	e7e1      	b.n	8008bb8 <_strtod_l+0x8d8>
 8008bf4:	f7ff fb56 	bl	80082a4 <sulp>
 8008bf8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008bfc:	ec53 2b10 	vmov	r2, r3, d0
 8008c00:	f7f7 fb6a 	bl	80002d8 <__aeabi_dsub>
 8008c04:	2200      	movs	r2, #0
 8008c06:	2300      	movs	r3, #0
 8008c08:	4682      	mov	sl, r0
 8008c0a:	468b      	mov	fp, r1
 8008c0c:	f7f7 ff84 	bl	8000b18 <__aeabi_dcmpeq>
 8008c10:	2800      	cmp	r0, #0
 8008c12:	d0c1      	beq.n	8008b98 <_strtod_l+0x8b8>
 8008c14:	e619      	b.n	800884a <_strtod_l+0x56a>
 8008c16:	4641      	mov	r1, r8
 8008c18:	4620      	mov	r0, r4
 8008c1a:	f003 fa85 	bl	800c128 <__ratio>
 8008c1e:	ec57 6b10 	vmov	r6, r7, d0
 8008c22:	2200      	movs	r2, #0
 8008c24:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008c28:	4630      	mov	r0, r6
 8008c2a:	4639      	mov	r1, r7
 8008c2c:	f7f7 ff88 	bl	8000b40 <__aeabi_dcmple>
 8008c30:	2800      	cmp	r0, #0
 8008c32:	d06f      	beq.n	8008d14 <_strtod_l+0xa34>
 8008c34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d17a      	bne.n	8008d30 <_strtod_l+0xa50>
 8008c3a:	f1ba 0f00 	cmp.w	sl, #0
 8008c3e:	d158      	bne.n	8008cf2 <_strtod_l+0xa12>
 8008c40:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008c42:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d15a      	bne.n	8008d00 <_strtod_l+0xa20>
 8008c4a:	4b64      	ldr	r3, [pc, #400]	@ (8008ddc <_strtod_l+0xafc>)
 8008c4c:	2200      	movs	r2, #0
 8008c4e:	4630      	mov	r0, r6
 8008c50:	4639      	mov	r1, r7
 8008c52:	f7f7 ff6b 	bl	8000b2c <__aeabi_dcmplt>
 8008c56:	2800      	cmp	r0, #0
 8008c58:	d159      	bne.n	8008d0e <_strtod_l+0xa2e>
 8008c5a:	4630      	mov	r0, r6
 8008c5c:	4639      	mov	r1, r7
 8008c5e:	4b60      	ldr	r3, [pc, #384]	@ (8008de0 <_strtod_l+0xb00>)
 8008c60:	2200      	movs	r2, #0
 8008c62:	f7f7 fcf1 	bl	8000648 <__aeabi_dmul>
 8008c66:	4606      	mov	r6, r0
 8008c68:	460f      	mov	r7, r1
 8008c6a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8008c6e:	9606      	str	r6, [sp, #24]
 8008c70:	9307      	str	r3, [sp, #28]
 8008c72:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008c76:	4d57      	ldr	r5, [pc, #348]	@ (8008dd4 <_strtod_l+0xaf4>)
 8008c78:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008c7c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008c7e:	401d      	ands	r5, r3
 8008c80:	4b58      	ldr	r3, [pc, #352]	@ (8008de4 <_strtod_l+0xb04>)
 8008c82:	429d      	cmp	r5, r3
 8008c84:	f040 80b2 	bne.w	8008dec <_strtod_l+0xb0c>
 8008c88:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008c8a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8008c8e:	ec4b ab10 	vmov	d0, sl, fp
 8008c92:	f003 f981 	bl	800bf98 <__ulp>
 8008c96:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008c9a:	ec51 0b10 	vmov	r0, r1, d0
 8008c9e:	f7f7 fcd3 	bl	8000648 <__aeabi_dmul>
 8008ca2:	4652      	mov	r2, sl
 8008ca4:	465b      	mov	r3, fp
 8008ca6:	f7f7 fb19 	bl	80002dc <__adddf3>
 8008caa:	460b      	mov	r3, r1
 8008cac:	4949      	ldr	r1, [pc, #292]	@ (8008dd4 <_strtod_l+0xaf4>)
 8008cae:	4a4e      	ldr	r2, [pc, #312]	@ (8008de8 <_strtod_l+0xb08>)
 8008cb0:	4019      	ands	r1, r3
 8008cb2:	4291      	cmp	r1, r2
 8008cb4:	4682      	mov	sl, r0
 8008cb6:	d942      	bls.n	8008d3e <_strtod_l+0xa5e>
 8008cb8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008cba:	4b47      	ldr	r3, [pc, #284]	@ (8008dd8 <_strtod_l+0xaf8>)
 8008cbc:	429a      	cmp	r2, r3
 8008cbe:	d103      	bne.n	8008cc8 <_strtod_l+0x9e8>
 8008cc0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008cc2:	3301      	adds	r3, #1
 8008cc4:	f43f ad2b 	beq.w	800871e <_strtod_l+0x43e>
 8008cc8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8008dd8 <_strtod_l+0xaf8>
 8008ccc:	f04f 3aff 	mov.w	sl, #4294967295
 8008cd0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008cd2:	9805      	ldr	r0, [sp, #20]
 8008cd4:	f002 fe2c 	bl	800b930 <_Bfree>
 8008cd8:	9805      	ldr	r0, [sp, #20]
 8008cda:	4649      	mov	r1, r9
 8008cdc:	f002 fe28 	bl	800b930 <_Bfree>
 8008ce0:	9805      	ldr	r0, [sp, #20]
 8008ce2:	4641      	mov	r1, r8
 8008ce4:	f002 fe24 	bl	800b930 <_Bfree>
 8008ce8:	9805      	ldr	r0, [sp, #20]
 8008cea:	4621      	mov	r1, r4
 8008cec:	f002 fe20 	bl	800b930 <_Bfree>
 8008cf0:	e618      	b.n	8008924 <_strtod_l+0x644>
 8008cf2:	f1ba 0f01 	cmp.w	sl, #1
 8008cf6:	d103      	bne.n	8008d00 <_strtod_l+0xa20>
 8008cf8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	f43f ada5 	beq.w	800884a <_strtod_l+0x56a>
 8008d00:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8008db0 <_strtod_l+0xad0>
 8008d04:	4f35      	ldr	r7, [pc, #212]	@ (8008ddc <_strtod_l+0xafc>)
 8008d06:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008d0a:	2600      	movs	r6, #0
 8008d0c:	e7b1      	b.n	8008c72 <_strtod_l+0x992>
 8008d0e:	4f34      	ldr	r7, [pc, #208]	@ (8008de0 <_strtod_l+0xb00>)
 8008d10:	2600      	movs	r6, #0
 8008d12:	e7aa      	b.n	8008c6a <_strtod_l+0x98a>
 8008d14:	4b32      	ldr	r3, [pc, #200]	@ (8008de0 <_strtod_l+0xb00>)
 8008d16:	4630      	mov	r0, r6
 8008d18:	4639      	mov	r1, r7
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	f7f7 fc94 	bl	8000648 <__aeabi_dmul>
 8008d20:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008d22:	4606      	mov	r6, r0
 8008d24:	460f      	mov	r7, r1
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d09f      	beq.n	8008c6a <_strtod_l+0x98a>
 8008d2a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8008d2e:	e7a0      	b.n	8008c72 <_strtod_l+0x992>
 8008d30:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8008db8 <_strtod_l+0xad8>
 8008d34:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008d38:	ec57 6b17 	vmov	r6, r7, d7
 8008d3c:	e799      	b.n	8008c72 <_strtod_l+0x992>
 8008d3e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8008d42:	9b08      	ldr	r3, [sp, #32]
 8008d44:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d1c1      	bne.n	8008cd0 <_strtod_l+0x9f0>
 8008d4c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008d50:	0d1b      	lsrs	r3, r3, #20
 8008d52:	051b      	lsls	r3, r3, #20
 8008d54:	429d      	cmp	r5, r3
 8008d56:	d1bb      	bne.n	8008cd0 <_strtod_l+0x9f0>
 8008d58:	4630      	mov	r0, r6
 8008d5a:	4639      	mov	r1, r7
 8008d5c:	f7f7 ffd4 	bl	8000d08 <__aeabi_d2lz>
 8008d60:	f7f7 fc44 	bl	80005ec <__aeabi_l2d>
 8008d64:	4602      	mov	r2, r0
 8008d66:	460b      	mov	r3, r1
 8008d68:	4630      	mov	r0, r6
 8008d6a:	4639      	mov	r1, r7
 8008d6c:	f7f7 fab4 	bl	80002d8 <__aeabi_dsub>
 8008d70:	460b      	mov	r3, r1
 8008d72:	4602      	mov	r2, r0
 8008d74:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8008d78:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8008d7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008d7e:	ea46 060a 	orr.w	r6, r6, sl
 8008d82:	431e      	orrs	r6, r3
 8008d84:	d06f      	beq.n	8008e66 <_strtod_l+0xb86>
 8008d86:	a30e      	add	r3, pc, #56	@ (adr r3, 8008dc0 <_strtod_l+0xae0>)
 8008d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d8c:	f7f7 fece 	bl	8000b2c <__aeabi_dcmplt>
 8008d90:	2800      	cmp	r0, #0
 8008d92:	f47f accf 	bne.w	8008734 <_strtod_l+0x454>
 8008d96:	a30c      	add	r3, pc, #48	@ (adr r3, 8008dc8 <_strtod_l+0xae8>)
 8008d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d9c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008da0:	f7f7 fee2 	bl	8000b68 <__aeabi_dcmpgt>
 8008da4:	2800      	cmp	r0, #0
 8008da6:	d093      	beq.n	8008cd0 <_strtod_l+0x9f0>
 8008da8:	e4c4      	b.n	8008734 <_strtod_l+0x454>
 8008daa:	bf00      	nop
 8008dac:	f3af 8000 	nop.w
 8008db0:	00000000 	.word	0x00000000
 8008db4:	bff00000 	.word	0xbff00000
 8008db8:	00000000 	.word	0x00000000
 8008dbc:	3ff00000 	.word	0x3ff00000
 8008dc0:	94a03595 	.word	0x94a03595
 8008dc4:	3fdfffff 	.word	0x3fdfffff
 8008dc8:	35afe535 	.word	0x35afe535
 8008dcc:	3fe00000 	.word	0x3fe00000
 8008dd0:	000fffff 	.word	0x000fffff
 8008dd4:	7ff00000 	.word	0x7ff00000
 8008dd8:	7fefffff 	.word	0x7fefffff
 8008ddc:	3ff00000 	.word	0x3ff00000
 8008de0:	3fe00000 	.word	0x3fe00000
 8008de4:	7fe00000 	.word	0x7fe00000
 8008de8:	7c9fffff 	.word	0x7c9fffff
 8008dec:	9b08      	ldr	r3, [sp, #32]
 8008dee:	b323      	cbz	r3, 8008e3a <_strtod_l+0xb5a>
 8008df0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8008df4:	d821      	bhi.n	8008e3a <_strtod_l+0xb5a>
 8008df6:	a328      	add	r3, pc, #160	@ (adr r3, 8008e98 <_strtod_l+0xbb8>)
 8008df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dfc:	4630      	mov	r0, r6
 8008dfe:	4639      	mov	r1, r7
 8008e00:	f7f7 fe9e 	bl	8000b40 <__aeabi_dcmple>
 8008e04:	b1a0      	cbz	r0, 8008e30 <_strtod_l+0xb50>
 8008e06:	4639      	mov	r1, r7
 8008e08:	4630      	mov	r0, r6
 8008e0a:	f7f7 fef5 	bl	8000bf8 <__aeabi_d2uiz>
 8008e0e:	2801      	cmp	r0, #1
 8008e10:	bf38      	it	cc
 8008e12:	2001      	movcc	r0, #1
 8008e14:	f7f7 fb9e 	bl	8000554 <__aeabi_ui2d>
 8008e18:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008e1a:	4606      	mov	r6, r0
 8008e1c:	460f      	mov	r7, r1
 8008e1e:	b9fb      	cbnz	r3, 8008e60 <_strtod_l+0xb80>
 8008e20:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008e24:	9014      	str	r0, [sp, #80]	@ 0x50
 8008e26:	9315      	str	r3, [sp, #84]	@ 0x54
 8008e28:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8008e2c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008e30:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008e32:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8008e36:	1b5b      	subs	r3, r3, r5
 8008e38:	9311      	str	r3, [sp, #68]	@ 0x44
 8008e3a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8008e3e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8008e42:	f003 f8a9 	bl	800bf98 <__ulp>
 8008e46:	4650      	mov	r0, sl
 8008e48:	ec53 2b10 	vmov	r2, r3, d0
 8008e4c:	4659      	mov	r1, fp
 8008e4e:	f7f7 fbfb 	bl	8000648 <__aeabi_dmul>
 8008e52:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8008e56:	f7f7 fa41 	bl	80002dc <__adddf3>
 8008e5a:	4682      	mov	sl, r0
 8008e5c:	468b      	mov	fp, r1
 8008e5e:	e770      	b.n	8008d42 <_strtod_l+0xa62>
 8008e60:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8008e64:	e7e0      	b.n	8008e28 <_strtod_l+0xb48>
 8008e66:	a30e      	add	r3, pc, #56	@ (adr r3, 8008ea0 <_strtod_l+0xbc0>)
 8008e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e6c:	f7f7 fe5e 	bl	8000b2c <__aeabi_dcmplt>
 8008e70:	e798      	b.n	8008da4 <_strtod_l+0xac4>
 8008e72:	2300      	movs	r3, #0
 8008e74:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008e76:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8008e78:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008e7a:	6013      	str	r3, [r2, #0]
 8008e7c:	f7ff ba6d 	b.w	800835a <_strtod_l+0x7a>
 8008e80:	2a65      	cmp	r2, #101	@ 0x65
 8008e82:	f43f ab66 	beq.w	8008552 <_strtod_l+0x272>
 8008e86:	2a45      	cmp	r2, #69	@ 0x45
 8008e88:	f43f ab63 	beq.w	8008552 <_strtod_l+0x272>
 8008e8c:	2301      	movs	r3, #1
 8008e8e:	f7ff bb9e 	b.w	80085ce <_strtod_l+0x2ee>
 8008e92:	bf00      	nop
 8008e94:	f3af 8000 	nop.w
 8008e98:	ffc00000 	.word	0xffc00000
 8008e9c:	41dfffff 	.word	0x41dfffff
 8008ea0:	94a03595 	.word	0x94a03595
 8008ea4:	3fcfffff 	.word	0x3fcfffff

08008ea8 <_strtod_r>:
 8008ea8:	4b01      	ldr	r3, [pc, #4]	@ (8008eb0 <_strtod_r+0x8>)
 8008eaa:	f7ff ba19 	b.w	80082e0 <_strtod_l>
 8008eae:	bf00      	nop
 8008eb0:	20000028 	.word	0x20000028

08008eb4 <strtof>:
 8008eb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008eb8:	f8df 80bc 	ldr.w	r8, [pc, #188]	@ 8008f78 <strtof+0xc4>
 8008ebc:	4b29      	ldr	r3, [pc, #164]	@ (8008f64 <strtof+0xb0>)
 8008ebe:	460a      	mov	r2, r1
 8008ec0:	ed2d 8b02 	vpush	{d8}
 8008ec4:	4601      	mov	r1, r0
 8008ec6:	f8d8 0000 	ldr.w	r0, [r8]
 8008eca:	f7ff fa09 	bl	80082e0 <_strtod_l>
 8008ece:	ec55 4b10 	vmov	r4, r5, d0
 8008ed2:	4622      	mov	r2, r4
 8008ed4:	462b      	mov	r3, r5
 8008ed6:	4620      	mov	r0, r4
 8008ed8:	4629      	mov	r1, r5
 8008eda:	f7f7 fe4f 	bl	8000b7c <__aeabi_dcmpun>
 8008ede:	b190      	cbz	r0, 8008f06 <strtof+0x52>
 8008ee0:	2d00      	cmp	r5, #0
 8008ee2:	4821      	ldr	r0, [pc, #132]	@ (8008f68 <strtof+0xb4>)
 8008ee4:	da09      	bge.n	8008efa <strtof+0x46>
 8008ee6:	f001 fa43 	bl	800a370 <nanf>
 8008eea:	eeb1 8a40 	vneg.f32	s16, s0
 8008eee:	eeb0 0a48 	vmov.f32	s0, s16
 8008ef2:	ecbd 8b02 	vpop	{d8}
 8008ef6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008efa:	ecbd 8b02 	vpop	{d8}
 8008efe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008f02:	f001 ba35 	b.w	800a370 <nanf>
 8008f06:	4620      	mov	r0, r4
 8008f08:	4629      	mov	r1, r5
 8008f0a:	f7f7 fe95 	bl	8000c38 <__aeabi_d2f>
 8008f0e:	ee08 0a10 	vmov	s16, r0
 8008f12:	eddf 7a16 	vldr	s15, [pc, #88]	@ 8008f6c <strtof+0xb8>
 8008f16:	eeb0 7ac8 	vabs.f32	s14, s16
 8008f1a:	eeb4 7a67 	vcmp.f32	s14, s15
 8008f1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f22:	dd11      	ble.n	8008f48 <strtof+0x94>
 8008f24:	f025 4700 	bic.w	r7, r5, #2147483648	@ 0x80000000
 8008f28:	4b11      	ldr	r3, [pc, #68]	@ (8008f70 <strtof+0xbc>)
 8008f2a:	f04f 32ff 	mov.w	r2, #4294967295
 8008f2e:	4620      	mov	r0, r4
 8008f30:	4639      	mov	r1, r7
 8008f32:	f7f7 fe23 	bl	8000b7c <__aeabi_dcmpun>
 8008f36:	b980      	cbnz	r0, 8008f5a <strtof+0xa6>
 8008f38:	4b0d      	ldr	r3, [pc, #52]	@ (8008f70 <strtof+0xbc>)
 8008f3a:	f04f 32ff 	mov.w	r2, #4294967295
 8008f3e:	4620      	mov	r0, r4
 8008f40:	4639      	mov	r1, r7
 8008f42:	f7f7 fdfd 	bl	8000b40 <__aeabi_dcmple>
 8008f46:	b940      	cbnz	r0, 8008f5a <strtof+0xa6>
 8008f48:	ee18 3a10 	vmov	r3, s16
 8008f4c:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8008f50:	d1cd      	bne.n	8008eee <strtof+0x3a>
 8008f52:	4b08      	ldr	r3, [pc, #32]	@ (8008f74 <strtof+0xc0>)
 8008f54:	402b      	ands	r3, r5
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d0c9      	beq.n	8008eee <strtof+0x3a>
 8008f5a:	f8d8 3000 	ldr.w	r3, [r8]
 8008f5e:	2222      	movs	r2, #34	@ 0x22
 8008f60:	601a      	str	r2, [r3, #0]
 8008f62:	e7c4      	b.n	8008eee <strtof+0x3a>
 8008f64:	20000028 	.word	0x20000028
 8008f68:	0800d185 	.word	0x0800d185
 8008f6c:	7f7fffff 	.word	0x7f7fffff
 8008f70:	7fefffff 	.word	0x7fefffff
 8008f74:	7ff00000 	.word	0x7ff00000
 8008f78:	20000194 	.word	0x20000194

08008f7c <__cvt>:
 8008f7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008f80:	ec57 6b10 	vmov	r6, r7, d0
 8008f84:	2f00      	cmp	r7, #0
 8008f86:	460c      	mov	r4, r1
 8008f88:	4619      	mov	r1, r3
 8008f8a:	463b      	mov	r3, r7
 8008f8c:	bfbb      	ittet	lt
 8008f8e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8008f92:	461f      	movlt	r7, r3
 8008f94:	2300      	movge	r3, #0
 8008f96:	232d      	movlt	r3, #45	@ 0x2d
 8008f98:	700b      	strb	r3, [r1, #0]
 8008f9a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008f9c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008fa0:	4691      	mov	r9, r2
 8008fa2:	f023 0820 	bic.w	r8, r3, #32
 8008fa6:	bfbc      	itt	lt
 8008fa8:	4632      	movlt	r2, r6
 8008faa:	4616      	movlt	r6, r2
 8008fac:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008fb0:	d005      	beq.n	8008fbe <__cvt+0x42>
 8008fb2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8008fb6:	d100      	bne.n	8008fba <__cvt+0x3e>
 8008fb8:	3401      	adds	r4, #1
 8008fba:	2102      	movs	r1, #2
 8008fbc:	e000      	b.n	8008fc0 <__cvt+0x44>
 8008fbe:	2103      	movs	r1, #3
 8008fc0:	ab03      	add	r3, sp, #12
 8008fc2:	9301      	str	r3, [sp, #4]
 8008fc4:	ab02      	add	r3, sp, #8
 8008fc6:	9300      	str	r3, [sp, #0]
 8008fc8:	ec47 6b10 	vmov	d0, r6, r7
 8008fcc:	4653      	mov	r3, sl
 8008fce:	4622      	mov	r2, r4
 8008fd0:	f001 fa5e 	bl	800a490 <_dtoa_r>
 8008fd4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008fd8:	4605      	mov	r5, r0
 8008fda:	d119      	bne.n	8009010 <__cvt+0x94>
 8008fdc:	f019 0f01 	tst.w	r9, #1
 8008fe0:	d00e      	beq.n	8009000 <__cvt+0x84>
 8008fe2:	eb00 0904 	add.w	r9, r0, r4
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	2300      	movs	r3, #0
 8008fea:	4630      	mov	r0, r6
 8008fec:	4639      	mov	r1, r7
 8008fee:	f7f7 fd93 	bl	8000b18 <__aeabi_dcmpeq>
 8008ff2:	b108      	cbz	r0, 8008ff8 <__cvt+0x7c>
 8008ff4:	f8cd 900c 	str.w	r9, [sp, #12]
 8008ff8:	2230      	movs	r2, #48	@ 0x30
 8008ffa:	9b03      	ldr	r3, [sp, #12]
 8008ffc:	454b      	cmp	r3, r9
 8008ffe:	d31e      	bcc.n	800903e <__cvt+0xc2>
 8009000:	9b03      	ldr	r3, [sp, #12]
 8009002:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009004:	1b5b      	subs	r3, r3, r5
 8009006:	4628      	mov	r0, r5
 8009008:	6013      	str	r3, [r2, #0]
 800900a:	b004      	add	sp, #16
 800900c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009010:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009014:	eb00 0904 	add.w	r9, r0, r4
 8009018:	d1e5      	bne.n	8008fe6 <__cvt+0x6a>
 800901a:	7803      	ldrb	r3, [r0, #0]
 800901c:	2b30      	cmp	r3, #48	@ 0x30
 800901e:	d10a      	bne.n	8009036 <__cvt+0xba>
 8009020:	2200      	movs	r2, #0
 8009022:	2300      	movs	r3, #0
 8009024:	4630      	mov	r0, r6
 8009026:	4639      	mov	r1, r7
 8009028:	f7f7 fd76 	bl	8000b18 <__aeabi_dcmpeq>
 800902c:	b918      	cbnz	r0, 8009036 <__cvt+0xba>
 800902e:	f1c4 0401 	rsb	r4, r4, #1
 8009032:	f8ca 4000 	str.w	r4, [sl]
 8009036:	f8da 3000 	ldr.w	r3, [sl]
 800903a:	4499      	add	r9, r3
 800903c:	e7d3      	b.n	8008fe6 <__cvt+0x6a>
 800903e:	1c59      	adds	r1, r3, #1
 8009040:	9103      	str	r1, [sp, #12]
 8009042:	701a      	strb	r2, [r3, #0]
 8009044:	e7d9      	b.n	8008ffa <__cvt+0x7e>

08009046 <__exponent>:
 8009046:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009048:	2900      	cmp	r1, #0
 800904a:	bfba      	itte	lt
 800904c:	4249      	neglt	r1, r1
 800904e:	232d      	movlt	r3, #45	@ 0x2d
 8009050:	232b      	movge	r3, #43	@ 0x2b
 8009052:	2909      	cmp	r1, #9
 8009054:	7002      	strb	r2, [r0, #0]
 8009056:	7043      	strb	r3, [r0, #1]
 8009058:	dd29      	ble.n	80090ae <__exponent+0x68>
 800905a:	f10d 0307 	add.w	r3, sp, #7
 800905e:	461d      	mov	r5, r3
 8009060:	270a      	movs	r7, #10
 8009062:	461a      	mov	r2, r3
 8009064:	fbb1 f6f7 	udiv	r6, r1, r7
 8009068:	fb07 1416 	mls	r4, r7, r6, r1
 800906c:	3430      	adds	r4, #48	@ 0x30
 800906e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009072:	460c      	mov	r4, r1
 8009074:	2c63      	cmp	r4, #99	@ 0x63
 8009076:	f103 33ff 	add.w	r3, r3, #4294967295
 800907a:	4631      	mov	r1, r6
 800907c:	dcf1      	bgt.n	8009062 <__exponent+0x1c>
 800907e:	3130      	adds	r1, #48	@ 0x30
 8009080:	1e94      	subs	r4, r2, #2
 8009082:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009086:	1c41      	adds	r1, r0, #1
 8009088:	4623      	mov	r3, r4
 800908a:	42ab      	cmp	r3, r5
 800908c:	d30a      	bcc.n	80090a4 <__exponent+0x5e>
 800908e:	f10d 0309 	add.w	r3, sp, #9
 8009092:	1a9b      	subs	r3, r3, r2
 8009094:	42ac      	cmp	r4, r5
 8009096:	bf88      	it	hi
 8009098:	2300      	movhi	r3, #0
 800909a:	3302      	adds	r3, #2
 800909c:	4403      	add	r3, r0
 800909e:	1a18      	subs	r0, r3, r0
 80090a0:	b003      	add	sp, #12
 80090a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80090a4:	f813 6b01 	ldrb.w	r6, [r3], #1
 80090a8:	f801 6f01 	strb.w	r6, [r1, #1]!
 80090ac:	e7ed      	b.n	800908a <__exponent+0x44>
 80090ae:	2330      	movs	r3, #48	@ 0x30
 80090b0:	3130      	adds	r1, #48	@ 0x30
 80090b2:	7083      	strb	r3, [r0, #2]
 80090b4:	70c1      	strb	r1, [r0, #3]
 80090b6:	1d03      	adds	r3, r0, #4
 80090b8:	e7f1      	b.n	800909e <__exponent+0x58>
	...

080090bc <_printf_float>:
 80090bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090c0:	b08d      	sub	sp, #52	@ 0x34
 80090c2:	460c      	mov	r4, r1
 80090c4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80090c8:	4616      	mov	r6, r2
 80090ca:	461f      	mov	r7, r3
 80090cc:	4605      	mov	r5, r0
 80090ce:	f001 f8c1 	bl	800a254 <_localeconv_r>
 80090d2:	6803      	ldr	r3, [r0, #0]
 80090d4:	9304      	str	r3, [sp, #16]
 80090d6:	4618      	mov	r0, r3
 80090d8:	f7f7 f8f2 	bl	80002c0 <strlen>
 80090dc:	2300      	movs	r3, #0
 80090de:	930a      	str	r3, [sp, #40]	@ 0x28
 80090e0:	f8d8 3000 	ldr.w	r3, [r8]
 80090e4:	9005      	str	r0, [sp, #20]
 80090e6:	3307      	adds	r3, #7
 80090e8:	f023 0307 	bic.w	r3, r3, #7
 80090ec:	f103 0208 	add.w	r2, r3, #8
 80090f0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80090f4:	f8d4 b000 	ldr.w	fp, [r4]
 80090f8:	f8c8 2000 	str.w	r2, [r8]
 80090fc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009100:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009104:	9307      	str	r3, [sp, #28]
 8009106:	f8cd 8018 	str.w	r8, [sp, #24]
 800910a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800910e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009112:	4b9c      	ldr	r3, [pc, #624]	@ (8009384 <_printf_float+0x2c8>)
 8009114:	f04f 32ff 	mov.w	r2, #4294967295
 8009118:	f7f7 fd30 	bl	8000b7c <__aeabi_dcmpun>
 800911c:	bb70      	cbnz	r0, 800917c <_printf_float+0xc0>
 800911e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009122:	4b98      	ldr	r3, [pc, #608]	@ (8009384 <_printf_float+0x2c8>)
 8009124:	f04f 32ff 	mov.w	r2, #4294967295
 8009128:	f7f7 fd0a 	bl	8000b40 <__aeabi_dcmple>
 800912c:	bb30      	cbnz	r0, 800917c <_printf_float+0xc0>
 800912e:	2200      	movs	r2, #0
 8009130:	2300      	movs	r3, #0
 8009132:	4640      	mov	r0, r8
 8009134:	4649      	mov	r1, r9
 8009136:	f7f7 fcf9 	bl	8000b2c <__aeabi_dcmplt>
 800913a:	b110      	cbz	r0, 8009142 <_printf_float+0x86>
 800913c:	232d      	movs	r3, #45	@ 0x2d
 800913e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009142:	4a91      	ldr	r2, [pc, #580]	@ (8009388 <_printf_float+0x2cc>)
 8009144:	4b91      	ldr	r3, [pc, #580]	@ (800938c <_printf_float+0x2d0>)
 8009146:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800914a:	bf94      	ite	ls
 800914c:	4690      	movls	r8, r2
 800914e:	4698      	movhi	r8, r3
 8009150:	2303      	movs	r3, #3
 8009152:	6123      	str	r3, [r4, #16]
 8009154:	f02b 0304 	bic.w	r3, fp, #4
 8009158:	6023      	str	r3, [r4, #0]
 800915a:	f04f 0900 	mov.w	r9, #0
 800915e:	9700      	str	r7, [sp, #0]
 8009160:	4633      	mov	r3, r6
 8009162:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009164:	4621      	mov	r1, r4
 8009166:	4628      	mov	r0, r5
 8009168:	f000 f9d2 	bl	8009510 <_printf_common>
 800916c:	3001      	adds	r0, #1
 800916e:	f040 808d 	bne.w	800928c <_printf_float+0x1d0>
 8009172:	f04f 30ff 	mov.w	r0, #4294967295
 8009176:	b00d      	add	sp, #52	@ 0x34
 8009178:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800917c:	4642      	mov	r2, r8
 800917e:	464b      	mov	r3, r9
 8009180:	4640      	mov	r0, r8
 8009182:	4649      	mov	r1, r9
 8009184:	f7f7 fcfa 	bl	8000b7c <__aeabi_dcmpun>
 8009188:	b140      	cbz	r0, 800919c <_printf_float+0xe0>
 800918a:	464b      	mov	r3, r9
 800918c:	2b00      	cmp	r3, #0
 800918e:	bfbc      	itt	lt
 8009190:	232d      	movlt	r3, #45	@ 0x2d
 8009192:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009196:	4a7e      	ldr	r2, [pc, #504]	@ (8009390 <_printf_float+0x2d4>)
 8009198:	4b7e      	ldr	r3, [pc, #504]	@ (8009394 <_printf_float+0x2d8>)
 800919a:	e7d4      	b.n	8009146 <_printf_float+0x8a>
 800919c:	6863      	ldr	r3, [r4, #4]
 800919e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80091a2:	9206      	str	r2, [sp, #24]
 80091a4:	1c5a      	adds	r2, r3, #1
 80091a6:	d13b      	bne.n	8009220 <_printf_float+0x164>
 80091a8:	2306      	movs	r3, #6
 80091aa:	6063      	str	r3, [r4, #4]
 80091ac:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80091b0:	2300      	movs	r3, #0
 80091b2:	6022      	str	r2, [r4, #0]
 80091b4:	9303      	str	r3, [sp, #12]
 80091b6:	ab0a      	add	r3, sp, #40	@ 0x28
 80091b8:	e9cd a301 	strd	sl, r3, [sp, #4]
 80091bc:	ab09      	add	r3, sp, #36	@ 0x24
 80091be:	9300      	str	r3, [sp, #0]
 80091c0:	6861      	ldr	r1, [r4, #4]
 80091c2:	ec49 8b10 	vmov	d0, r8, r9
 80091c6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80091ca:	4628      	mov	r0, r5
 80091cc:	f7ff fed6 	bl	8008f7c <__cvt>
 80091d0:	9b06      	ldr	r3, [sp, #24]
 80091d2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80091d4:	2b47      	cmp	r3, #71	@ 0x47
 80091d6:	4680      	mov	r8, r0
 80091d8:	d129      	bne.n	800922e <_printf_float+0x172>
 80091da:	1cc8      	adds	r0, r1, #3
 80091dc:	db02      	blt.n	80091e4 <_printf_float+0x128>
 80091de:	6863      	ldr	r3, [r4, #4]
 80091e0:	4299      	cmp	r1, r3
 80091e2:	dd41      	ble.n	8009268 <_printf_float+0x1ac>
 80091e4:	f1aa 0a02 	sub.w	sl, sl, #2
 80091e8:	fa5f fa8a 	uxtb.w	sl, sl
 80091ec:	3901      	subs	r1, #1
 80091ee:	4652      	mov	r2, sl
 80091f0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80091f4:	9109      	str	r1, [sp, #36]	@ 0x24
 80091f6:	f7ff ff26 	bl	8009046 <__exponent>
 80091fa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80091fc:	1813      	adds	r3, r2, r0
 80091fe:	2a01      	cmp	r2, #1
 8009200:	4681      	mov	r9, r0
 8009202:	6123      	str	r3, [r4, #16]
 8009204:	dc02      	bgt.n	800920c <_printf_float+0x150>
 8009206:	6822      	ldr	r2, [r4, #0]
 8009208:	07d2      	lsls	r2, r2, #31
 800920a:	d501      	bpl.n	8009210 <_printf_float+0x154>
 800920c:	3301      	adds	r3, #1
 800920e:	6123      	str	r3, [r4, #16]
 8009210:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8009214:	2b00      	cmp	r3, #0
 8009216:	d0a2      	beq.n	800915e <_printf_float+0xa2>
 8009218:	232d      	movs	r3, #45	@ 0x2d
 800921a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800921e:	e79e      	b.n	800915e <_printf_float+0xa2>
 8009220:	9a06      	ldr	r2, [sp, #24]
 8009222:	2a47      	cmp	r2, #71	@ 0x47
 8009224:	d1c2      	bne.n	80091ac <_printf_float+0xf0>
 8009226:	2b00      	cmp	r3, #0
 8009228:	d1c0      	bne.n	80091ac <_printf_float+0xf0>
 800922a:	2301      	movs	r3, #1
 800922c:	e7bd      	b.n	80091aa <_printf_float+0xee>
 800922e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009232:	d9db      	bls.n	80091ec <_printf_float+0x130>
 8009234:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009238:	d118      	bne.n	800926c <_printf_float+0x1b0>
 800923a:	2900      	cmp	r1, #0
 800923c:	6863      	ldr	r3, [r4, #4]
 800923e:	dd0b      	ble.n	8009258 <_printf_float+0x19c>
 8009240:	6121      	str	r1, [r4, #16]
 8009242:	b913      	cbnz	r3, 800924a <_printf_float+0x18e>
 8009244:	6822      	ldr	r2, [r4, #0]
 8009246:	07d0      	lsls	r0, r2, #31
 8009248:	d502      	bpl.n	8009250 <_printf_float+0x194>
 800924a:	3301      	adds	r3, #1
 800924c:	440b      	add	r3, r1
 800924e:	6123      	str	r3, [r4, #16]
 8009250:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009252:	f04f 0900 	mov.w	r9, #0
 8009256:	e7db      	b.n	8009210 <_printf_float+0x154>
 8009258:	b913      	cbnz	r3, 8009260 <_printf_float+0x1a4>
 800925a:	6822      	ldr	r2, [r4, #0]
 800925c:	07d2      	lsls	r2, r2, #31
 800925e:	d501      	bpl.n	8009264 <_printf_float+0x1a8>
 8009260:	3302      	adds	r3, #2
 8009262:	e7f4      	b.n	800924e <_printf_float+0x192>
 8009264:	2301      	movs	r3, #1
 8009266:	e7f2      	b.n	800924e <_printf_float+0x192>
 8009268:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800926c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800926e:	4299      	cmp	r1, r3
 8009270:	db05      	blt.n	800927e <_printf_float+0x1c2>
 8009272:	6823      	ldr	r3, [r4, #0]
 8009274:	6121      	str	r1, [r4, #16]
 8009276:	07d8      	lsls	r0, r3, #31
 8009278:	d5ea      	bpl.n	8009250 <_printf_float+0x194>
 800927a:	1c4b      	adds	r3, r1, #1
 800927c:	e7e7      	b.n	800924e <_printf_float+0x192>
 800927e:	2900      	cmp	r1, #0
 8009280:	bfd4      	ite	le
 8009282:	f1c1 0202 	rsble	r2, r1, #2
 8009286:	2201      	movgt	r2, #1
 8009288:	4413      	add	r3, r2
 800928a:	e7e0      	b.n	800924e <_printf_float+0x192>
 800928c:	6823      	ldr	r3, [r4, #0]
 800928e:	055a      	lsls	r2, r3, #21
 8009290:	d407      	bmi.n	80092a2 <_printf_float+0x1e6>
 8009292:	6923      	ldr	r3, [r4, #16]
 8009294:	4642      	mov	r2, r8
 8009296:	4631      	mov	r1, r6
 8009298:	4628      	mov	r0, r5
 800929a:	47b8      	blx	r7
 800929c:	3001      	adds	r0, #1
 800929e:	d12b      	bne.n	80092f8 <_printf_float+0x23c>
 80092a0:	e767      	b.n	8009172 <_printf_float+0xb6>
 80092a2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80092a6:	f240 80dd 	bls.w	8009464 <_printf_float+0x3a8>
 80092aa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80092ae:	2200      	movs	r2, #0
 80092b0:	2300      	movs	r3, #0
 80092b2:	f7f7 fc31 	bl	8000b18 <__aeabi_dcmpeq>
 80092b6:	2800      	cmp	r0, #0
 80092b8:	d033      	beq.n	8009322 <_printf_float+0x266>
 80092ba:	4a37      	ldr	r2, [pc, #220]	@ (8009398 <_printf_float+0x2dc>)
 80092bc:	2301      	movs	r3, #1
 80092be:	4631      	mov	r1, r6
 80092c0:	4628      	mov	r0, r5
 80092c2:	47b8      	blx	r7
 80092c4:	3001      	adds	r0, #1
 80092c6:	f43f af54 	beq.w	8009172 <_printf_float+0xb6>
 80092ca:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80092ce:	4543      	cmp	r3, r8
 80092d0:	db02      	blt.n	80092d8 <_printf_float+0x21c>
 80092d2:	6823      	ldr	r3, [r4, #0]
 80092d4:	07d8      	lsls	r0, r3, #31
 80092d6:	d50f      	bpl.n	80092f8 <_printf_float+0x23c>
 80092d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80092dc:	4631      	mov	r1, r6
 80092de:	4628      	mov	r0, r5
 80092e0:	47b8      	blx	r7
 80092e2:	3001      	adds	r0, #1
 80092e4:	f43f af45 	beq.w	8009172 <_printf_float+0xb6>
 80092e8:	f04f 0900 	mov.w	r9, #0
 80092ec:	f108 38ff 	add.w	r8, r8, #4294967295
 80092f0:	f104 0a1a 	add.w	sl, r4, #26
 80092f4:	45c8      	cmp	r8, r9
 80092f6:	dc09      	bgt.n	800930c <_printf_float+0x250>
 80092f8:	6823      	ldr	r3, [r4, #0]
 80092fa:	079b      	lsls	r3, r3, #30
 80092fc:	f100 8103 	bmi.w	8009506 <_printf_float+0x44a>
 8009300:	68e0      	ldr	r0, [r4, #12]
 8009302:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009304:	4298      	cmp	r0, r3
 8009306:	bfb8      	it	lt
 8009308:	4618      	movlt	r0, r3
 800930a:	e734      	b.n	8009176 <_printf_float+0xba>
 800930c:	2301      	movs	r3, #1
 800930e:	4652      	mov	r2, sl
 8009310:	4631      	mov	r1, r6
 8009312:	4628      	mov	r0, r5
 8009314:	47b8      	blx	r7
 8009316:	3001      	adds	r0, #1
 8009318:	f43f af2b 	beq.w	8009172 <_printf_float+0xb6>
 800931c:	f109 0901 	add.w	r9, r9, #1
 8009320:	e7e8      	b.n	80092f4 <_printf_float+0x238>
 8009322:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009324:	2b00      	cmp	r3, #0
 8009326:	dc39      	bgt.n	800939c <_printf_float+0x2e0>
 8009328:	4a1b      	ldr	r2, [pc, #108]	@ (8009398 <_printf_float+0x2dc>)
 800932a:	2301      	movs	r3, #1
 800932c:	4631      	mov	r1, r6
 800932e:	4628      	mov	r0, r5
 8009330:	47b8      	blx	r7
 8009332:	3001      	adds	r0, #1
 8009334:	f43f af1d 	beq.w	8009172 <_printf_float+0xb6>
 8009338:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800933c:	ea59 0303 	orrs.w	r3, r9, r3
 8009340:	d102      	bne.n	8009348 <_printf_float+0x28c>
 8009342:	6823      	ldr	r3, [r4, #0]
 8009344:	07d9      	lsls	r1, r3, #31
 8009346:	d5d7      	bpl.n	80092f8 <_printf_float+0x23c>
 8009348:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800934c:	4631      	mov	r1, r6
 800934e:	4628      	mov	r0, r5
 8009350:	47b8      	blx	r7
 8009352:	3001      	adds	r0, #1
 8009354:	f43f af0d 	beq.w	8009172 <_printf_float+0xb6>
 8009358:	f04f 0a00 	mov.w	sl, #0
 800935c:	f104 0b1a 	add.w	fp, r4, #26
 8009360:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009362:	425b      	negs	r3, r3
 8009364:	4553      	cmp	r3, sl
 8009366:	dc01      	bgt.n	800936c <_printf_float+0x2b0>
 8009368:	464b      	mov	r3, r9
 800936a:	e793      	b.n	8009294 <_printf_float+0x1d8>
 800936c:	2301      	movs	r3, #1
 800936e:	465a      	mov	r2, fp
 8009370:	4631      	mov	r1, r6
 8009372:	4628      	mov	r0, r5
 8009374:	47b8      	blx	r7
 8009376:	3001      	adds	r0, #1
 8009378:	f43f aefb 	beq.w	8009172 <_printf_float+0xb6>
 800937c:	f10a 0a01 	add.w	sl, sl, #1
 8009380:	e7ee      	b.n	8009360 <_printf_float+0x2a4>
 8009382:	bf00      	nop
 8009384:	7fefffff 	.word	0x7fefffff
 8009388:	0800cdb0 	.word	0x0800cdb0
 800938c:	0800cdb4 	.word	0x0800cdb4
 8009390:	0800cdb8 	.word	0x0800cdb8
 8009394:	0800cdbc 	.word	0x0800cdbc
 8009398:	0800cdc0 	.word	0x0800cdc0
 800939c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800939e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80093a2:	4553      	cmp	r3, sl
 80093a4:	bfa8      	it	ge
 80093a6:	4653      	movge	r3, sl
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	4699      	mov	r9, r3
 80093ac:	dc36      	bgt.n	800941c <_printf_float+0x360>
 80093ae:	f04f 0b00 	mov.w	fp, #0
 80093b2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80093b6:	f104 021a 	add.w	r2, r4, #26
 80093ba:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80093bc:	9306      	str	r3, [sp, #24]
 80093be:	eba3 0309 	sub.w	r3, r3, r9
 80093c2:	455b      	cmp	r3, fp
 80093c4:	dc31      	bgt.n	800942a <_printf_float+0x36e>
 80093c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093c8:	459a      	cmp	sl, r3
 80093ca:	dc3a      	bgt.n	8009442 <_printf_float+0x386>
 80093cc:	6823      	ldr	r3, [r4, #0]
 80093ce:	07da      	lsls	r2, r3, #31
 80093d0:	d437      	bmi.n	8009442 <_printf_float+0x386>
 80093d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093d4:	ebaa 0903 	sub.w	r9, sl, r3
 80093d8:	9b06      	ldr	r3, [sp, #24]
 80093da:	ebaa 0303 	sub.w	r3, sl, r3
 80093de:	4599      	cmp	r9, r3
 80093e0:	bfa8      	it	ge
 80093e2:	4699      	movge	r9, r3
 80093e4:	f1b9 0f00 	cmp.w	r9, #0
 80093e8:	dc33      	bgt.n	8009452 <_printf_float+0x396>
 80093ea:	f04f 0800 	mov.w	r8, #0
 80093ee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80093f2:	f104 0b1a 	add.w	fp, r4, #26
 80093f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093f8:	ebaa 0303 	sub.w	r3, sl, r3
 80093fc:	eba3 0309 	sub.w	r3, r3, r9
 8009400:	4543      	cmp	r3, r8
 8009402:	f77f af79 	ble.w	80092f8 <_printf_float+0x23c>
 8009406:	2301      	movs	r3, #1
 8009408:	465a      	mov	r2, fp
 800940a:	4631      	mov	r1, r6
 800940c:	4628      	mov	r0, r5
 800940e:	47b8      	blx	r7
 8009410:	3001      	adds	r0, #1
 8009412:	f43f aeae 	beq.w	8009172 <_printf_float+0xb6>
 8009416:	f108 0801 	add.w	r8, r8, #1
 800941a:	e7ec      	b.n	80093f6 <_printf_float+0x33a>
 800941c:	4642      	mov	r2, r8
 800941e:	4631      	mov	r1, r6
 8009420:	4628      	mov	r0, r5
 8009422:	47b8      	blx	r7
 8009424:	3001      	adds	r0, #1
 8009426:	d1c2      	bne.n	80093ae <_printf_float+0x2f2>
 8009428:	e6a3      	b.n	8009172 <_printf_float+0xb6>
 800942a:	2301      	movs	r3, #1
 800942c:	4631      	mov	r1, r6
 800942e:	4628      	mov	r0, r5
 8009430:	9206      	str	r2, [sp, #24]
 8009432:	47b8      	blx	r7
 8009434:	3001      	adds	r0, #1
 8009436:	f43f ae9c 	beq.w	8009172 <_printf_float+0xb6>
 800943a:	9a06      	ldr	r2, [sp, #24]
 800943c:	f10b 0b01 	add.w	fp, fp, #1
 8009440:	e7bb      	b.n	80093ba <_printf_float+0x2fe>
 8009442:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009446:	4631      	mov	r1, r6
 8009448:	4628      	mov	r0, r5
 800944a:	47b8      	blx	r7
 800944c:	3001      	adds	r0, #1
 800944e:	d1c0      	bne.n	80093d2 <_printf_float+0x316>
 8009450:	e68f      	b.n	8009172 <_printf_float+0xb6>
 8009452:	9a06      	ldr	r2, [sp, #24]
 8009454:	464b      	mov	r3, r9
 8009456:	4442      	add	r2, r8
 8009458:	4631      	mov	r1, r6
 800945a:	4628      	mov	r0, r5
 800945c:	47b8      	blx	r7
 800945e:	3001      	adds	r0, #1
 8009460:	d1c3      	bne.n	80093ea <_printf_float+0x32e>
 8009462:	e686      	b.n	8009172 <_printf_float+0xb6>
 8009464:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009468:	f1ba 0f01 	cmp.w	sl, #1
 800946c:	dc01      	bgt.n	8009472 <_printf_float+0x3b6>
 800946e:	07db      	lsls	r3, r3, #31
 8009470:	d536      	bpl.n	80094e0 <_printf_float+0x424>
 8009472:	2301      	movs	r3, #1
 8009474:	4642      	mov	r2, r8
 8009476:	4631      	mov	r1, r6
 8009478:	4628      	mov	r0, r5
 800947a:	47b8      	blx	r7
 800947c:	3001      	adds	r0, #1
 800947e:	f43f ae78 	beq.w	8009172 <_printf_float+0xb6>
 8009482:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009486:	4631      	mov	r1, r6
 8009488:	4628      	mov	r0, r5
 800948a:	47b8      	blx	r7
 800948c:	3001      	adds	r0, #1
 800948e:	f43f ae70 	beq.w	8009172 <_printf_float+0xb6>
 8009492:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009496:	2200      	movs	r2, #0
 8009498:	2300      	movs	r3, #0
 800949a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800949e:	f7f7 fb3b 	bl	8000b18 <__aeabi_dcmpeq>
 80094a2:	b9c0      	cbnz	r0, 80094d6 <_printf_float+0x41a>
 80094a4:	4653      	mov	r3, sl
 80094a6:	f108 0201 	add.w	r2, r8, #1
 80094aa:	4631      	mov	r1, r6
 80094ac:	4628      	mov	r0, r5
 80094ae:	47b8      	blx	r7
 80094b0:	3001      	adds	r0, #1
 80094b2:	d10c      	bne.n	80094ce <_printf_float+0x412>
 80094b4:	e65d      	b.n	8009172 <_printf_float+0xb6>
 80094b6:	2301      	movs	r3, #1
 80094b8:	465a      	mov	r2, fp
 80094ba:	4631      	mov	r1, r6
 80094bc:	4628      	mov	r0, r5
 80094be:	47b8      	blx	r7
 80094c0:	3001      	adds	r0, #1
 80094c2:	f43f ae56 	beq.w	8009172 <_printf_float+0xb6>
 80094c6:	f108 0801 	add.w	r8, r8, #1
 80094ca:	45d0      	cmp	r8, sl
 80094cc:	dbf3      	blt.n	80094b6 <_printf_float+0x3fa>
 80094ce:	464b      	mov	r3, r9
 80094d0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80094d4:	e6df      	b.n	8009296 <_printf_float+0x1da>
 80094d6:	f04f 0800 	mov.w	r8, #0
 80094da:	f104 0b1a 	add.w	fp, r4, #26
 80094de:	e7f4      	b.n	80094ca <_printf_float+0x40e>
 80094e0:	2301      	movs	r3, #1
 80094e2:	4642      	mov	r2, r8
 80094e4:	e7e1      	b.n	80094aa <_printf_float+0x3ee>
 80094e6:	2301      	movs	r3, #1
 80094e8:	464a      	mov	r2, r9
 80094ea:	4631      	mov	r1, r6
 80094ec:	4628      	mov	r0, r5
 80094ee:	47b8      	blx	r7
 80094f0:	3001      	adds	r0, #1
 80094f2:	f43f ae3e 	beq.w	8009172 <_printf_float+0xb6>
 80094f6:	f108 0801 	add.w	r8, r8, #1
 80094fa:	68e3      	ldr	r3, [r4, #12]
 80094fc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80094fe:	1a5b      	subs	r3, r3, r1
 8009500:	4543      	cmp	r3, r8
 8009502:	dcf0      	bgt.n	80094e6 <_printf_float+0x42a>
 8009504:	e6fc      	b.n	8009300 <_printf_float+0x244>
 8009506:	f04f 0800 	mov.w	r8, #0
 800950a:	f104 0919 	add.w	r9, r4, #25
 800950e:	e7f4      	b.n	80094fa <_printf_float+0x43e>

08009510 <_printf_common>:
 8009510:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009514:	4616      	mov	r6, r2
 8009516:	4698      	mov	r8, r3
 8009518:	688a      	ldr	r2, [r1, #8]
 800951a:	690b      	ldr	r3, [r1, #16]
 800951c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009520:	4293      	cmp	r3, r2
 8009522:	bfb8      	it	lt
 8009524:	4613      	movlt	r3, r2
 8009526:	6033      	str	r3, [r6, #0]
 8009528:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800952c:	4607      	mov	r7, r0
 800952e:	460c      	mov	r4, r1
 8009530:	b10a      	cbz	r2, 8009536 <_printf_common+0x26>
 8009532:	3301      	adds	r3, #1
 8009534:	6033      	str	r3, [r6, #0]
 8009536:	6823      	ldr	r3, [r4, #0]
 8009538:	0699      	lsls	r1, r3, #26
 800953a:	bf42      	ittt	mi
 800953c:	6833      	ldrmi	r3, [r6, #0]
 800953e:	3302      	addmi	r3, #2
 8009540:	6033      	strmi	r3, [r6, #0]
 8009542:	6825      	ldr	r5, [r4, #0]
 8009544:	f015 0506 	ands.w	r5, r5, #6
 8009548:	d106      	bne.n	8009558 <_printf_common+0x48>
 800954a:	f104 0a19 	add.w	sl, r4, #25
 800954e:	68e3      	ldr	r3, [r4, #12]
 8009550:	6832      	ldr	r2, [r6, #0]
 8009552:	1a9b      	subs	r3, r3, r2
 8009554:	42ab      	cmp	r3, r5
 8009556:	dc26      	bgt.n	80095a6 <_printf_common+0x96>
 8009558:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800955c:	6822      	ldr	r2, [r4, #0]
 800955e:	3b00      	subs	r3, #0
 8009560:	bf18      	it	ne
 8009562:	2301      	movne	r3, #1
 8009564:	0692      	lsls	r2, r2, #26
 8009566:	d42b      	bmi.n	80095c0 <_printf_common+0xb0>
 8009568:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800956c:	4641      	mov	r1, r8
 800956e:	4638      	mov	r0, r7
 8009570:	47c8      	blx	r9
 8009572:	3001      	adds	r0, #1
 8009574:	d01e      	beq.n	80095b4 <_printf_common+0xa4>
 8009576:	6823      	ldr	r3, [r4, #0]
 8009578:	6922      	ldr	r2, [r4, #16]
 800957a:	f003 0306 	and.w	r3, r3, #6
 800957e:	2b04      	cmp	r3, #4
 8009580:	bf02      	ittt	eq
 8009582:	68e5      	ldreq	r5, [r4, #12]
 8009584:	6833      	ldreq	r3, [r6, #0]
 8009586:	1aed      	subeq	r5, r5, r3
 8009588:	68a3      	ldr	r3, [r4, #8]
 800958a:	bf0c      	ite	eq
 800958c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009590:	2500      	movne	r5, #0
 8009592:	4293      	cmp	r3, r2
 8009594:	bfc4      	itt	gt
 8009596:	1a9b      	subgt	r3, r3, r2
 8009598:	18ed      	addgt	r5, r5, r3
 800959a:	2600      	movs	r6, #0
 800959c:	341a      	adds	r4, #26
 800959e:	42b5      	cmp	r5, r6
 80095a0:	d11a      	bne.n	80095d8 <_printf_common+0xc8>
 80095a2:	2000      	movs	r0, #0
 80095a4:	e008      	b.n	80095b8 <_printf_common+0xa8>
 80095a6:	2301      	movs	r3, #1
 80095a8:	4652      	mov	r2, sl
 80095aa:	4641      	mov	r1, r8
 80095ac:	4638      	mov	r0, r7
 80095ae:	47c8      	blx	r9
 80095b0:	3001      	adds	r0, #1
 80095b2:	d103      	bne.n	80095bc <_printf_common+0xac>
 80095b4:	f04f 30ff 	mov.w	r0, #4294967295
 80095b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095bc:	3501      	adds	r5, #1
 80095be:	e7c6      	b.n	800954e <_printf_common+0x3e>
 80095c0:	18e1      	adds	r1, r4, r3
 80095c2:	1c5a      	adds	r2, r3, #1
 80095c4:	2030      	movs	r0, #48	@ 0x30
 80095c6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80095ca:	4422      	add	r2, r4
 80095cc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80095d0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80095d4:	3302      	adds	r3, #2
 80095d6:	e7c7      	b.n	8009568 <_printf_common+0x58>
 80095d8:	2301      	movs	r3, #1
 80095da:	4622      	mov	r2, r4
 80095dc:	4641      	mov	r1, r8
 80095de:	4638      	mov	r0, r7
 80095e0:	47c8      	blx	r9
 80095e2:	3001      	adds	r0, #1
 80095e4:	d0e6      	beq.n	80095b4 <_printf_common+0xa4>
 80095e6:	3601      	adds	r6, #1
 80095e8:	e7d9      	b.n	800959e <_printf_common+0x8e>
	...

080095ec <_printf_i>:
 80095ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80095f0:	7e0f      	ldrb	r7, [r1, #24]
 80095f2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80095f4:	2f78      	cmp	r7, #120	@ 0x78
 80095f6:	4691      	mov	r9, r2
 80095f8:	4680      	mov	r8, r0
 80095fa:	460c      	mov	r4, r1
 80095fc:	469a      	mov	sl, r3
 80095fe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009602:	d807      	bhi.n	8009614 <_printf_i+0x28>
 8009604:	2f62      	cmp	r7, #98	@ 0x62
 8009606:	d80a      	bhi.n	800961e <_printf_i+0x32>
 8009608:	2f00      	cmp	r7, #0
 800960a:	f000 80d2 	beq.w	80097b2 <_printf_i+0x1c6>
 800960e:	2f58      	cmp	r7, #88	@ 0x58
 8009610:	f000 80b9 	beq.w	8009786 <_printf_i+0x19a>
 8009614:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009618:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800961c:	e03a      	b.n	8009694 <_printf_i+0xa8>
 800961e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009622:	2b15      	cmp	r3, #21
 8009624:	d8f6      	bhi.n	8009614 <_printf_i+0x28>
 8009626:	a101      	add	r1, pc, #4	@ (adr r1, 800962c <_printf_i+0x40>)
 8009628:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800962c:	08009685 	.word	0x08009685
 8009630:	08009699 	.word	0x08009699
 8009634:	08009615 	.word	0x08009615
 8009638:	08009615 	.word	0x08009615
 800963c:	08009615 	.word	0x08009615
 8009640:	08009615 	.word	0x08009615
 8009644:	08009699 	.word	0x08009699
 8009648:	08009615 	.word	0x08009615
 800964c:	08009615 	.word	0x08009615
 8009650:	08009615 	.word	0x08009615
 8009654:	08009615 	.word	0x08009615
 8009658:	08009799 	.word	0x08009799
 800965c:	080096c3 	.word	0x080096c3
 8009660:	08009753 	.word	0x08009753
 8009664:	08009615 	.word	0x08009615
 8009668:	08009615 	.word	0x08009615
 800966c:	080097bb 	.word	0x080097bb
 8009670:	08009615 	.word	0x08009615
 8009674:	080096c3 	.word	0x080096c3
 8009678:	08009615 	.word	0x08009615
 800967c:	08009615 	.word	0x08009615
 8009680:	0800975b 	.word	0x0800975b
 8009684:	6833      	ldr	r3, [r6, #0]
 8009686:	1d1a      	adds	r2, r3, #4
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	6032      	str	r2, [r6, #0]
 800968c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009690:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009694:	2301      	movs	r3, #1
 8009696:	e09d      	b.n	80097d4 <_printf_i+0x1e8>
 8009698:	6833      	ldr	r3, [r6, #0]
 800969a:	6820      	ldr	r0, [r4, #0]
 800969c:	1d19      	adds	r1, r3, #4
 800969e:	6031      	str	r1, [r6, #0]
 80096a0:	0606      	lsls	r6, r0, #24
 80096a2:	d501      	bpl.n	80096a8 <_printf_i+0xbc>
 80096a4:	681d      	ldr	r5, [r3, #0]
 80096a6:	e003      	b.n	80096b0 <_printf_i+0xc4>
 80096a8:	0645      	lsls	r5, r0, #25
 80096aa:	d5fb      	bpl.n	80096a4 <_printf_i+0xb8>
 80096ac:	f9b3 5000 	ldrsh.w	r5, [r3]
 80096b0:	2d00      	cmp	r5, #0
 80096b2:	da03      	bge.n	80096bc <_printf_i+0xd0>
 80096b4:	232d      	movs	r3, #45	@ 0x2d
 80096b6:	426d      	negs	r5, r5
 80096b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80096bc:	4859      	ldr	r0, [pc, #356]	@ (8009824 <_printf_i+0x238>)
 80096be:	230a      	movs	r3, #10
 80096c0:	e011      	b.n	80096e6 <_printf_i+0xfa>
 80096c2:	6821      	ldr	r1, [r4, #0]
 80096c4:	6833      	ldr	r3, [r6, #0]
 80096c6:	0608      	lsls	r0, r1, #24
 80096c8:	f853 5b04 	ldr.w	r5, [r3], #4
 80096cc:	d402      	bmi.n	80096d4 <_printf_i+0xe8>
 80096ce:	0649      	lsls	r1, r1, #25
 80096d0:	bf48      	it	mi
 80096d2:	b2ad      	uxthmi	r5, r5
 80096d4:	2f6f      	cmp	r7, #111	@ 0x6f
 80096d6:	4853      	ldr	r0, [pc, #332]	@ (8009824 <_printf_i+0x238>)
 80096d8:	6033      	str	r3, [r6, #0]
 80096da:	bf14      	ite	ne
 80096dc:	230a      	movne	r3, #10
 80096de:	2308      	moveq	r3, #8
 80096e0:	2100      	movs	r1, #0
 80096e2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80096e6:	6866      	ldr	r6, [r4, #4]
 80096e8:	60a6      	str	r6, [r4, #8]
 80096ea:	2e00      	cmp	r6, #0
 80096ec:	bfa2      	ittt	ge
 80096ee:	6821      	ldrge	r1, [r4, #0]
 80096f0:	f021 0104 	bicge.w	r1, r1, #4
 80096f4:	6021      	strge	r1, [r4, #0]
 80096f6:	b90d      	cbnz	r5, 80096fc <_printf_i+0x110>
 80096f8:	2e00      	cmp	r6, #0
 80096fa:	d04b      	beq.n	8009794 <_printf_i+0x1a8>
 80096fc:	4616      	mov	r6, r2
 80096fe:	fbb5 f1f3 	udiv	r1, r5, r3
 8009702:	fb03 5711 	mls	r7, r3, r1, r5
 8009706:	5dc7      	ldrb	r7, [r0, r7]
 8009708:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800970c:	462f      	mov	r7, r5
 800970e:	42bb      	cmp	r3, r7
 8009710:	460d      	mov	r5, r1
 8009712:	d9f4      	bls.n	80096fe <_printf_i+0x112>
 8009714:	2b08      	cmp	r3, #8
 8009716:	d10b      	bne.n	8009730 <_printf_i+0x144>
 8009718:	6823      	ldr	r3, [r4, #0]
 800971a:	07df      	lsls	r7, r3, #31
 800971c:	d508      	bpl.n	8009730 <_printf_i+0x144>
 800971e:	6923      	ldr	r3, [r4, #16]
 8009720:	6861      	ldr	r1, [r4, #4]
 8009722:	4299      	cmp	r1, r3
 8009724:	bfde      	ittt	le
 8009726:	2330      	movle	r3, #48	@ 0x30
 8009728:	f806 3c01 	strble.w	r3, [r6, #-1]
 800972c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009730:	1b92      	subs	r2, r2, r6
 8009732:	6122      	str	r2, [r4, #16]
 8009734:	f8cd a000 	str.w	sl, [sp]
 8009738:	464b      	mov	r3, r9
 800973a:	aa03      	add	r2, sp, #12
 800973c:	4621      	mov	r1, r4
 800973e:	4640      	mov	r0, r8
 8009740:	f7ff fee6 	bl	8009510 <_printf_common>
 8009744:	3001      	adds	r0, #1
 8009746:	d14a      	bne.n	80097de <_printf_i+0x1f2>
 8009748:	f04f 30ff 	mov.w	r0, #4294967295
 800974c:	b004      	add	sp, #16
 800974e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009752:	6823      	ldr	r3, [r4, #0]
 8009754:	f043 0320 	orr.w	r3, r3, #32
 8009758:	6023      	str	r3, [r4, #0]
 800975a:	4833      	ldr	r0, [pc, #204]	@ (8009828 <_printf_i+0x23c>)
 800975c:	2778      	movs	r7, #120	@ 0x78
 800975e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009762:	6823      	ldr	r3, [r4, #0]
 8009764:	6831      	ldr	r1, [r6, #0]
 8009766:	061f      	lsls	r7, r3, #24
 8009768:	f851 5b04 	ldr.w	r5, [r1], #4
 800976c:	d402      	bmi.n	8009774 <_printf_i+0x188>
 800976e:	065f      	lsls	r7, r3, #25
 8009770:	bf48      	it	mi
 8009772:	b2ad      	uxthmi	r5, r5
 8009774:	6031      	str	r1, [r6, #0]
 8009776:	07d9      	lsls	r1, r3, #31
 8009778:	bf44      	itt	mi
 800977a:	f043 0320 	orrmi.w	r3, r3, #32
 800977e:	6023      	strmi	r3, [r4, #0]
 8009780:	b11d      	cbz	r5, 800978a <_printf_i+0x19e>
 8009782:	2310      	movs	r3, #16
 8009784:	e7ac      	b.n	80096e0 <_printf_i+0xf4>
 8009786:	4827      	ldr	r0, [pc, #156]	@ (8009824 <_printf_i+0x238>)
 8009788:	e7e9      	b.n	800975e <_printf_i+0x172>
 800978a:	6823      	ldr	r3, [r4, #0]
 800978c:	f023 0320 	bic.w	r3, r3, #32
 8009790:	6023      	str	r3, [r4, #0]
 8009792:	e7f6      	b.n	8009782 <_printf_i+0x196>
 8009794:	4616      	mov	r6, r2
 8009796:	e7bd      	b.n	8009714 <_printf_i+0x128>
 8009798:	6833      	ldr	r3, [r6, #0]
 800979a:	6825      	ldr	r5, [r4, #0]
 800979c:	6961      	ldr	r1, [r4, #20]
 800979e:	1d18      	adds	r0, r3, #4
 80097a0:	6030      	str	r0, [r6, #0]
 80097a2:	062e      	lsls	r6, r5, #24
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	d501      	bpl.n	80097ac <_printf_i+0x1c0>
 80097a8:	6019      	str	r1, [r3, #0]
 80097aa:	e002      	b.n	80097b2 <_printf_i+0x1c6>
 80097ac:	0668      	lsls	r0, r5, #25
 80097ae:	d5fb      	bpl.n	80097a8 <_printf_i+0x1bc>
 80097b0:	8019      	strh	r1, [r3, #0]
 80097b2:	2300      	movs	r3, #0
 80097b4:	6123      	str	r3, [r4, #16]
 80097b6:	4616      	mov	r6, r2
 80097b8:	e7bc      	b.n	8009734 <_printf_i+0x148>
 80097ba:	6833      	ldr	r3, [r6, #0]
 80097bc:	1d1a      	adds	r2, r3, #4
 80097be:	6032      	str	r2, [r6, #0]
 80097c0:	681e      	ldr	r6, [r3, #0]
 80097c2:	6862      	ldr	r2, [r4, #4]
 80097c4:	2100      	movs	r1, #0
 80097c6:	4630      	mov	r0, r6
 80097c8:	f7f6 fd2a 	bl	8000220 <memchr>
 80097cc:	b108      	cbz	r0, 80097d2 <_printf_i+0x1e6>
 80097ce:	1b80      	subs	r0, r0, r6
 80097d0:	6060      	str	r0, [r4, #4]
 80097d2:	6863      	ldr	r3, [r4, #4]
 80097d4:	6123      	str	r3, [r4, #16]
 80097d6:	2300      	movs	r3, #0
 80097d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80097dc:	e7aa      	b.n	8009734 <_printf_i+0x148>
 80097de:	6923      	ldr	r3, [r4, #16]
 80097e0:	4632      	mov	r2, r6
 80097e2:	4649      	mov	r1, r9
 80097e4:	4640      	mov	r0, r8
 80097e6:	47d0      	blx	sl
 80097e8:	3001      	adds	r0, #1
 80097ea:	d0ad      	beq.n	8009748 <_printf_i+0x15c>
 80097ec:	6823      	ldr	r3, [r4, #0]
 80097ee:	079b      	lsls	r3, r3, #30
 80097f0:	d413      	bmi.n	800981a <_printf_i+0x22e>
 80097f2:	68e0      	ldr	r0, [r4, #12]
 80097f4:	9b03      	ldr	r3, [sp, #12]
 80097f6:	4298      	cmp	r0, r3
 80097f8:	bfb8      	it	lt
 80097fa:	4618      	movlt	r0, r3
 80097fc:	e7a6      	b.n	800974c <_printf_i+0x160>
 80097fe:	2301      	movs	r3, #1
 8009800:	4632      	mov	r2, r6
 8009802:	4649      	mov	r1, r9
 8009804:	4640      	mov	r0, r8
 8009806:	47d0      	blx	sl
 8009808:	3001      	adds	r0, #1
 800980a:	d09d      	beq.n	8009748 <_printf_i+0x15c>
 800980c:	3501      	adds	r5, #1
 800980e:	68e3      	ldr	r3, [r4, #12]
 8009810:	9903      	ldr	r1, [sp, #12]
 8009812:	1a5b      	subs	r3, r3, r1
 8009814:	42ab      	cmp	r3, r5
 8009816:	dcf2      	bgt.n	80097fe <_printf_i+0x212>
 8009818:	e7eb      	b.n	80097f2 <_printf_i+0x206>
 800981a:	2500      	movs	r5, #0
 800981c:	f104 0619 	add.w	r6, r4, #25
 8009820:	e7f5      	b.n	800980e <_printf_i+0x222>
 8009822:	bf00      	nop
 8009824:	0800cdc2 	.word	0x0800cdc2
 8009828:	0800cdd3 	.word	0x0800cdd3

0800982c <_scanf_float>:
 800982c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009830:	b087      	sub	sp, #28
 8009832:	4617      	mov	r7, r2
 8009834:	9303      	str	r3, [sp, #12]
 8009836:	688b      	ldr	r3, [r1, #8]
 8009838:	1e5a      	subs	r2, r3, #1
 800983a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800983e:	bf81      	itttt	hi
 8009840:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8009844:	eb03 0b05 	addhi.w	fp, r3, r5
 8009848:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800984c:	608b      	strhi	r3, [r1, #8]
 800984e:	680b      	ldr	r3, [r1, #0]
 8009850:	460a      	mov	r2, r1
 8009852:	f04f 0500 	mov.w	r5, #0
 8009856:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800985a:	f842 3b1c 	str.w	r3, [r2], #28
 800985e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8009862:	4680      	mov	r8, r0
 8009864:	460c      	mov	r4, r1
 8009866:	bf98      	it	ls
 8009868:	f04f 0b00 	movls.w	fp, #0
 800986c:	9201      	str	r2, [sp, #4]
 800986e:	4616      	mov	r6, r2
 8009870:	46aa      	mov	sl, r5
 8009872:	46a9      	mov	r9, r5
 8009874:	9502      	str	r5, [sp, #8]
 8009876:	68a2      	ldr	r2, [r4, #8]
 8009878:	b152      	cbz	r2, 8009890 <_scanf_float+0x64>
 800987a:	683b      	ldr	r3, [r7, #0]
 800987c:	781b      	ldrb	r3, [r3, #0]
 800987e:	2b4e      	cmp	r3, #78	@ 0x4e
 8009880:	d864      	bhi.n	800994c <_scanf_float+0x120>
 8009882:	2b40      	cmp	r3, #64	@ 0x40
 8009884:	d83c      	bhi.n	8009900 <_scanf_float+0xd4>
 8009886:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800988a:	b2c8      	uxtb	r0, r1
 800988c:	280e      	cmp	r0, #14
 800988e:	d93a      	bls.n	8009906 <_scanf_float+0xda>
 8009890:	f1b9 0f00 	cmp.w	r9, #0
 8009894:	d003      	beq.n	800989e <_scanf_float+0x72>
 8009896:	6823      	ldr	r3, [r4, #0]
 8009898:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800989c:	6023      	str	r3, [r4, #0]
 800989e:	f10a 3aff 	add.w	sl, sl, #4294967295
 80098a2:	f1ba 0f01 	cmp.w	sl, #1
 80098a6:	f200 8117 	bhi.w	8009ad8 <_scanf_float+0x2ac>
 80098aa:	9b01      	ldr	r3, [sp, #4]
 80098ac:	429e      	cmp	r6, r3
 80098ae:	f200 8108 	bhi.w	8009ac2 <_scanf_float+0x296>
 80098b2:	2001      	movs	r0, #1
 80098b4:	b007      	add	sp, #28
 80098b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098ba:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80098be:	2a0d      	cmp	r2, #13
 80098c0:	d8e6      	bhi.n	8009890 <_scanf_float+0x64>
 80098c2:	a101      	add	r1, pc, #4	@ (adr r1, 80098c8 <_scanf_float+0x9c>)
 80098c4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80098c8:	08009a0f 	.word	0x08009a0f
 80098cc:	08009891 	.word	0x08009891
 80098d0:	08009891 	.word	0x08009891
 80098d4:	08009891 	.word	0x08009891
 80098d8:	08009a6f 	.word	0x08009a6f
 80098dc:	08009a47 	.word	0x08009a47
 80098e0:	08009891 	.word	0x08009891
 80098e4:	08009891 	.word	0x08009891
 80098e8:	08009a1d 	.word	0x08009a1d
 80098ec:	08009891 	.word	0x08009891
 80098f0:	08009891 	.word	0x08009891
 80098f4:	08009891 	.word	0x08009891
 80098f8:	08009891 	.word	0x08009891
 80098fc:	080099d5 	.word	0x080099d5
 8009900:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8009904:	e7db      	b.n	80098be <_scanf_float+0x92>
 8009906:	290e      	cmp	r1, #14
 8009908:	d8c2      	bhi.n	8009890 <_scanf_float+0x64>
 800990a:	a001      	add	r0, pc, #4	@ (adr r0, 8009910 <_scanf_float+0xe4>)
 800990c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8009910:	080099c5 	.word	0x080099c5
 8009914:	08009891 	.word	0x08009891
 8009918:	080099c5 	.word	0x080099c5
 800991c:	08009a5b 	.word	0x08009a5b
 8009920:	08009891 	.word	0x08009891
 8009924:	0800996d 	.word	0x0800996d
 8009928:	080099ab 	.word	0x080099ab
 800992c:	080099ab 	.word	0x080099ab
 8009930:	080099ab 	.word	0x080099ab
 8009934:	080099ab 	.word	0x080099ab
 8009938:	080099ab 	.word	0x080099ab
 800993c:	080099ab 	.word	0x080099ab
 8009940:	080099ab 	.word	0x080099ab
 8009944:	080099ab 	.word	0x080099ab
 8009948:	080099ab 	.word	0x080099ab
 800994c:	2b6e      	cmp	r3, #110	@ 0x6e
 800994e:	d809      	bhi.n	8009964 <_scanf_float+0x138>
 8009950:	2b60      	cmp	r3, #96	@ 0x60
 8009952:	d8b2      	bhi.n	80098ba <_scanf_float+0x8e>
 8009954:	2b54      	cmp	r3, #84	@ 0x54
 8009956:	d07b      	beq.n	8009a50 <_scanf_float+0x224>
 8009958:	2b59      	cmp	r3, #89	@ 0x59
 800995a:	d199      	bne.n	8009890 <_scanf_float+0x64>
 800995c:	2d07      	cmp	r5, #7
 800995e:	d197      	bne.n	8009890 <_scanf_float+0x64>
 8009960:	2508      	movs	r5, #8
 8009962:	e02c      	b.n	80099be <_scanf_float+0x192>
 8009964:	2b74      	cmp	r3, #116	@ 0x74
 8009966:	d073      	beq.n	8009a50 <_scanf_float+0x224>
 8009968:	2b79      	cmp	r3, #121	@ 0x79
 800996a:	e7f6      	b.n	800995a <_scanf_float+0x12e>
 800996c:	6821      	ldr	r1, [r4, #0]
 800996e:	05c8      	lsls	r0, r1, #23
 8009970:	d51b      	bpl.n	80099aa <_scanf_float+0x17e>
 8009972:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8009976:	6021      	str	r1, [r4, #0]
 8009978:	f109 0901 	add.w	r9, r9, #1
 800997c:	f1bb 0f00 	cmp.w	fp, #0
 8009980:	d003      	beq.n	800998a <_scanf_float+0x15e>
 8009982:	3201      	adds	r2, #1
 8009984:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009988:	60a2      	str	r2, [r4, #8]
 800998a:	68a3      	ldr	r3, [r4, #8]
 800998c:	3b01      	subs	r3, #1
 800998e:	60a3      	str	r3, [r4, #8]
 8009990:	6923      	ldr	r3, [r4, #16]
 8009992:	3301      	adds	r3, #1
 8009994:	6123      	str	r3, [r4, #16]
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	3b01      	subs	r3, #1
 800999a:	2b00      	cmp	r3, #0
 800999c:	607b      	str	r3, [r7, #4]
 800999e:	f340 8087 	ble.w	8009ab0 <_scanf_float+0x284>
 80099a2:	683b      	ldr	r3, [r7, #0]
 80099a4:	3301      	adds	r3, #1
 80099a6:	603b      	str	r3, [r7, #0]
 80099a8:	e765      	b.n	8009876 <_scanf_float+0x4a>
 80099aa:	eb1a 0105 	adds.w	r1, sl, r5
 80099ae:	f47f af6f 	bne.w	8009890 <_scanf_float+0x64>
 80099b2:	6822      	ldr	r2, [r4, #0]
 80099b4:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80099b8:	6022      	str	r2, [r4, #0]
 80099ba:	460d      	mov	r5, r1
 80099bc:	468a      	mov	sl, r1
 80099be:	f806 3b01 	strb.w	r3, [r6], #1
 80099c2:	e7e2      	b.n	800998a <_scanf_float+0x15e>
 80099c4:	6822      	ldr	r2, [r4, #0]
 80099c6:	0610      	lsls	r0, r2, #24
 80099c8:	f57f af62 	bpl.w	8009890 <_scanf_float+0x64>
 80099cc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80099d0:	6022      	str	r2, [r4, #0]
 80099d2:	e7f4      	b.n	80099be <_scanf_float+0x192>
 80099d4:	f1ba 0f00 	cmp.w	sl, #0
 80099d8:	d10e      	bne.n	80099f8 <_scanf_float+0x1cc>
 80099da:	f1b9 0f00 	cmp.w	r9, #0
 80099de:	d10e      	bne.n	80099fe <_scanf_float+0x1d2>
 80099e0:	6822      	ldr	r2, [r4, #0]
 80099e2:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80099e6:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80099ea:	d108      	bne.n	80099fe <_scanf_float+0x1d2>
 80099ec:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80099f0:	6022      	str	r2, [r4, #0]
 80099f2:	f04f 0a01 	mov.w	sl, #1
 80099f6:	e7e2      	b.n	80099be <_scanf_float+0x192>
 80099f8:	f1ba 0f02 	cmp.w	sl, #2
 80099fc:	d055      	beq.n	8009aaa <_scanf_float+0x27e>
 80099fe:	2d01      	cmp	r5, #1
 8009a00:	d002      	beq.n	8009a08 <_scanf_float+0x1dc>
 8009a02:	2d04      	cmp	r5, #4
 8009a04:	f47f af44 	bne.w	8009890 <_scanf_float+0x64>
 8009a08:	3501      	adds	r5, #1
 8009a0a:	b2ed      	uxtb	r5, r5
 8009a0c:	e7d7      	b.n	80099be <_scanf_float+0x192>
 8009a0e:	f1ba 0f01 	cmp.w	sl, #1
 8009a12:	f47f af3d 	bne.w	8009890 <_scanf_float+0x64>
 8009a16:	f04f 0a02 	mov.w	sl, #2
 8009a1a:	e7d0      	b.n	80099be <_scanf_float+0x192>
 8009a1c:	b97d      	cbnz	r5, 8009a3e <_scanf_float+0x212>
 8009a1e:	f1b9 0f00 	cmp.w	r9, #0
 8009a22:	f47f af38 	bne.w	8009896 <_scanf_float+0x6a>
 8009a26:	6822      	ldr	r2, [r4, #0]
 8009a28:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8009a2c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8009a30:	f040 8108 	bne.w	8009c44 <_scanf_float+0x418>
 8009a34:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009a38:	6022      	str	r2, [r4, #0]
 8009a3a:	2501      	movs	r5, #1
 8009a3c:	e7bf      	b.n	80099be <_scanf_float+0x192>
 8009a3e:	2d03      	cmp	r5, #3
 8009a40:	d0e2      	beq.n	8009a08 <_scanf_float+0x1dc>
 8009a42:	2d05      	cmp	r5, #5
 8009a44:	e7de      	b.n	8009a04 <_scanf_float+0x1d8>
 8009a46:	2d02      	cmp	r5, #2
 8009a48:	f47f af22 	bne.w	8009890 <_scanf_float+0x64>
 8009a4c:	2503      	movs	r5, #3
 8009a4e:	e7b6      	b.n	80099be <_scanf_float+0x192>
 8009a50:	2d06      	cmp	r5, #6
 8009a52:	f47f af1d 	bne.w	8009890 <_scanf_float+0x64>
 8009a56:	2507      	movs	r5, #7
 8009a58:	e7b1      	b.n	80099be <_scanf_float+0x192>
 8009a5a:	6822      	ldr	r2, [r4, #0]
 8009a5c:	0591      	lsls	r1, r2, #22
 8009a5e:	f57f af17 	bpl.w	8009890 <_scanf_float+0x64>
 8009a62:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8009a66:	6022      	str	r2, [r4, #0]
 8009a68:	f8cd 9008 	str.w	r9, [sp, #8]
 8009a6c:	e7a7      	b.n	80099be <_scanf_float+0x192>
 8009a6e:	6822      	ldr	r2, [r4, #0]
 8009a70:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8009a74:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8009a78:	d006      	beq.n	8009a88 <_scanf_float+0x25c>
 8009a7a:	0550      	lsls	r0, r2, #21
 8009a7c:	f57f af08 	bpl.w	8009890 <_scanf_float+0x64>
 8009a80:	f1b9 0f00 	cmp.w	r9, #0
 8009a84:	f000 80de 	beq.w	8009c44 <_scanf_float+0x418>
 8009a88:	0591      	lsls	r1, r2, #22
 8009a8a:	bf58      	it	pl
 8009a8c:	9902      	ldrpl	r1, [sp, #8]
 8009a8e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009a92:	bf58      	it	pl
 8009a94:	eba9 0101 	subpl.w	r1, r9, r1
 8009a98:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8009a9c:	bf58      	it	pl
 8009a9e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8009aa2:	6022      	str	r2, [r4, #0]
 8009aa4:	f04f 0900 	mov.w	r9, #0
 8009aa8:	e789      	b.n	80099be <_scanf_float+0x192>
 8009aaa:	f04f 0a03 	mov.w	sl, #3
 8009aae:	e786      	b.n	80099be <_scanf_float+0x192>
 8009ab0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8009ab4:	4639      	mov	r1, r7
 8009ab6:	4640      	mov	r0, r8
 8009ab8:	4798      	blx	r3
 8009aba:	2800      	cmp	r0, #0
 8009abc:	f43f aedb 	beq.w	8009876 <_scanf_float+0x4a>
 8009ac0:	e6e6      	b.n	8009890 <_scanf_float+0x64>
 8009ac2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009ac6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009aca:	463a      	mov	r2, r7
 8009acc:	4640      	mov	r0, r8
 8009ace:	4798      	blx	r3
 8009ad0:	6923      	ldr	r3, [r4, #16]
 8009ad2:	3b01      	subs	r3, #1
 8009ad4:	6123      	str	r3, [r4, #16]
 8009ad6:	e6e8      	b.n	80098aa <_scanf_float+0x7e>
 8009ad8:	1e6b      	subs	r3, r5, #1
 8009ada:	2b06      	cmp	r3, #6
 8009adc:	d824      	bhi.n	8009b28 <_scanf_float+0x2fc>
 8009ade:	2d02      	cmp	r5, #2
 8009ae0:	d836      	bhi.n	8009b50 <_scanf_float+0x324>
 8009ae2:	9b01      	ldr	r3, [sp, #4]
 8009ae4:	429e      	cmp	r6, r3
 8009ae6:	f67f aee4 	bls.w	80098b2 <_scanf_float+0x86>
 8009aea:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009aee:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009af2:	463a      	mov	r2, r7
 8009af4:	4640      	mov	r0, r8
 8009af6:	4798      	blx	r3
 8009af8:	6923      	ldr	r3, [r4, #16]
 8009afa:	3b01      	subs	r3, #1
 8009afc:	6123      	str	r3, [r4, #16]
 8009afe:	e7f0      	b.n	8009ae2 <_scanf_float+0x2b6>
 8009b00:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009b04:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8009b08:	463a      	mov	r2, r7
 8009b0a:	4640      	mov	r0, r8
 8009b0c:	4798      	blx	r3
 8009b0e:	6923      	ldr	r3, [r4, #16]
 8009b10:	3b01      	subs	r3, #1
 8009b12:	6123      	str	r3, [r4, #16]
 8009b14:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009b18:	fa5f fa8a 	uxtb.w	sl, sl
 8009b1c:	f1ba 0f02 	cmp.w	sl, #2
 8009b20:	d1ee      	bne.n	8009b00 <_scanf_float+0x2d4>
 8009b22:	3d03      	subs	r5, #3
 8009b24:	b2ed      	uxtb	r5, r5
 8009b26:	1b76      	subs	r6, r6, r5
 8009b28:	6823      	ldr	r3, [r4, #0]
 8009b2a:	05da      	lsls	r2, r3, #23
 8009b2c:	d530      	bpl.n	8009b90 <_scanf_float+0x364>
 8009b2e:	055b      	lsls	r3, r3, #21
 8009b30:	d511      	bpl.n	8009b56 <_scanf_float+0x32a>
 8009b32:	9b01      	ldr	r3, [sp, #4]
 8009b34:	429e      	cmp	r6, r3
 8009b36:	f67f aebc 	bls.w	80098b2 <_scanf_float+0x86>
 8009b3a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009b3e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009b42:	463a      	mov	r2, r7
 8009b44:	4640      	mov	r0, r8
 8009b46:	4798      	blx	r3
 8009b48:	6923      	ldr	r3, [r4, #16]
 8009b4a:	3b01      	subs	r3, #1
 8009b4c:	6123      	str	r3, [r4, #16]
 8009b4e:	e7f0      	b.n	8009b32 <_scanf_float+0x306>
 8009b50:	46aa      	mov	sl, r5
 8009b52:	46b3      	mov	fp, r6
 8009b54:	e7de      	b.n	8009b14 <_scanf_float+0x2e8>
 8009b56:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8009b5a:	6923      	ldr	r3, [r4, #16]
 8009b5c:	2965      	cmp	r1, #101	@ 0x65
 8009b5e:	f103 33ff 	add.w	r3, r3, #4294967295
 8009b62:	f106 35ff 	add.w	r5, r6, #4294967295
 8009b66:	6123      	str	r3, [r4, #16]
 8009b68:	d00c      	beq.n	8009b84 <_scanf_float+0x358>
 8009b6a:	2945      	cmp	r1, #69	@ 0x45
 8009b6c:	d00a      	beq.n	8009b84 <_scanf_float+0x358>
 8009b6e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009b72:	463a      	mov	r2, r7
 8009b74:	4640      	mov	r0, r8
 8009b76:	4798      	blx	r3
 8009b78:	6923      	ldr	r3, [r4, #16]
 8009b7a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8009b7e:	3b01      	subs	r3, #1
 8009b80:	1eb5      	subs	r5, r6, #2
 8009b82:	6123      	str	r3, [r4, #16]
 8009b84:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009b88:	463a      	mov	r2, r7
 8009b8a:	4640      	mov	r0, r8
 8009b8c:	4798      	blx	r3
 8009b8e:	462e      	mov	r6, r5
 8009b90:	6822      	ldr	r2, [r4, #0]
 8009b92:	f012 0210 	ands.w	r2, r2, #16
 8009b96:	d001      	beq.n	8009b9c <_scanf_float+0x370>
 8009b98:	2000      	movs	r0, #0
 8009b9a:	e68b      	b.n	80098b4 <_scanf_float+0x88>
 8009b9c:	7032      	strb	r2, [r6, #0]
 8009b9e:	6823      	ldr	r3, [r4, #0]
 8009ba0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8009ba4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009ba8:	d11c      	bne.n	8009be4 <_scanf_float+0x3b8>
 8009baa:	9b02      	ldr	r3, [sp, #8]
 8009bac:	454b      	cmp	r3, r9
 8009bae:	eba3 0209 	sub.w	r2, r3, r9
 8009bb2:	d123      	bne.n	8009bfc <_scanf_float+0x3d0>
 8009bb4:	9901      	ldr	r1, [sp, #4]
 8009bb6:	2200      	movs	r2, #0
 8009bb8:	4640      	mov	r0, r8
 8009bba:	f7ff f975 	bl	8008ea8 <_strtod_r>
 8009bbe:	9b03      	ldr	r3, [sp, #12]
 8009bc0:	6821      	ldr	r1, [r4, #0]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	f011 0f02 	tst.w	r1, #2
 8009bc8:	ec57 6b10 	vmov	r6, r7, d0
 8009bcc:	f103 0204 	add.w	r2, r3, #4
 8009bd0:	d01f      	beq.n	8009c12 <_scanf_float+0x3e6>
 8009bd2:	9903      	ldr	r1, [sp, #12]
 8009bd4:	600a      	str	r2, [r1, #0]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	e9c3 6700 	strd	r6, r7, [r3]
 8009bdc:	68e3      	ldr	r3, [r4, #12]
 8009bde:	3301      	adds	r3, #1
 8009be0:	60e3      	str	r3, [r4, #12]
 8009be2:	e7d9      	b.n	8009b98 <_scanf_float+0x36c>
 8009be4:	9b04      	ldr	r3, [sp, #16]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d0e4      	beq.n	8009bb4 <_scanf_float+0x388>
 8009bea:	9905      	ldr	r1, [sp, #20]
 8009bec:	230a      	movs	r3, #10
 8009bee:	3101      	adds	r1, #1
 8009bf0:	4640      	mov	r0, r8
 8009bf2:	f002 fb89 	bl	800c308 <_strtol_r>
 8009bf6:	9b04      	ldr	r3, [sp, #16]
 8009bf8:	9e05      	ldr	r6, [sp, #20]
 8009bfa:	1ac2      	subs	r2, r0, r3
 8009bfc:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8009c00:	429e      	cmp	r6, r3
 8009c02:	bf28      	it	cs
 8009c04:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8009c08:	4910      	ldr	r1, [pc, #64]	@ (8009c4c <_scanf_float+0x420>)
 8009c0a:	4630      	mov	r0, r6
 8009c0c:	f000 fa10 	bl	800a030 <siprintf>
 8009c10:	e7d0      	b.n	8009bb4 <_scanf_float+0x388>
 8009c12:	f011 0f04 	tst.w	r1, #4
 8009c16:	9903      	ldr	r1, [sp, #12]
 8009c18:	600a      	str	r2, [r1, #0]
 8009c1a:	d1dc      	bne.n	8009bd6 <_scanf_float+0x3aa>
 8009c1c:	681d      	ldr	r5, [r3, #0]
 8009c1e:	4632      	mov	r2, r6
 8009c20:	463b      	mov	r3, r7
 8009c22:	4630      	mov	r0, r6
 8009c24:	4639      	mov	r1, r7
 8009c26:	f7f6 ffa9 	bl	8000b7c <__aeabi_dcmpun>
 8009c2a:	b128      	cbz	r0, 8009c38 <_scanf_float+0x40c>
 8009c2c:	4808      	ldr	r0, [pc, #32]	@ (8009c50 <_scanf_float+0x424>)
 8009c2e:	f000 fb9f 	bl	800a370 <nanf>
 8009c32:	ed85 0a00 	vstr	s0, [r5]
 8009c36:	e7d1      	b.n	8009bdc <_scanf_float+0x3b0>
 8009c38:	4630      	mov	r0, r6
 8009c3a:	4639      	mov	r1, r7
 8009c3c:	f7f6 fffc 	bl	8000c38 <__aeabi_d2f>
 8009c40:	6028      	str	r0, [r5, #0]
 8009c42:	e7cb      	b.n	8009bdc <_scanf_float+0x3b0>
 8009c44:	f04f 0900 	mov.w	r9, #0
 8009c48:	e629      	b.n	800989e <_scanf_float+0x72>
 8009c4a:	bf00      	nop
 8009c4c:	0800cde4 	.word	0x0800cde4
 8009c50:	0800d185 	.word	0x0800d185

08009c54 <std>:
 8009c54:	2300      	movs	r3, #0
 8009c56:	b510      	push	{r4, lr}
 8009c58:	4604      	mov	r4, r0
 8009c5a:	e9c0 3300 	strd	r3, r3, [r0]
 8009c5e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009c62:	6083      	str	r3, [r0, #8]
 8009c64:	8181      	strh	r1, [r0, #12]
 8009c66:	6643      	str	r3, [r0, #100]	@ 0x64
 8009c68:	81c2      	strh	r2, [r0, #14]
 8009c6a:	6183      	str	r3, [r0, #24]
 8009c6c:	4619      	mov	r1, r3
 8009c6e:	2208      	movs	r2, #8
 8009c70:	305c      	adds	r0, #92	@ 0x5c
 8009c72:	f000 fad5 	bl	800a220 <memset>
 8009c76:	4b0d      	ldr	r3, [pc, #52]	@ (8009cac <std+0x58>)
 8009c78:	6263      	str	r3, [r4, #36]	@ 0x24
 8009c7a:	4b0d      	ldr	r3, [pc, #52]	@ (8009cb0 <std+0x5c>)
 8009c7c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009c7e:	4b0d      	ldr	r3, [pc, #52]	@ (8009cb4 <std+0x60>)
 8009c80:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009c82:	4b0d      	ldr	r3, [pc, #52]	@ (8009cb8 <std+0x64>)
 8009c84:	6323      	str	r3, [r4, #48]	@ 0x30
 8009c86:	4b0d      	ldr	r3, [pc, #52]	@ (8009cbc <std+0x68>)
 8009c88:	6224      	str	r4, [r4, #32]
 8009c8a:	429c      	cmp	r4, r3
 8009c8c:	d006      	beq.n	8009c9c <std+0x48>
 8009c8e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009c92:	4294      	cmp	r4, r2
 8009c94:	d002      	beq.n	8009c9c <std+0x48>
 8009c96:	33d0      	adds	r3, #208	@ 0xd0
 8009c98:	429c      	cmp	r4, r3
 8009c9a:	d105      	bne.n	8009ca8 <std+0x54>
 8009c9c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009ca0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009ca4:	f000 bb4a 	b.w	800a33c <__retarget_lock_init_recursive>
 8009ca8:	bd10      	pop	{r4, pc}
 8009caa:	bf00      	nop
 8009cac:	0800a071 	.word	0x0800a071
 8009cb0:	0800a093 	.word	0x0800a093
 8009cb4:	0800a0cb 	.word	0x0800a0cb
 8009cb8:	0800a0ef 	.word	0x0800a0ef
 8009cbc:	20000568 	.word	0x20000568

08009cc0 <stdio_exit_handler>:
 8009cc0:	4a02      	ldr	r2, [pc, #8]	@ (8009ccc <stdio_exit_handler+0xc>)
 8009cc2:	4903      	ldr	r1, [pc, #12]	@ (8009cd0 <stdio_exit_handler+0x10>)
 8009cc4:	4803      	ldr	r0, [pc, #12]	@ (8009cd4 <stdio_exit_handler+0x14>)
 8009cc6:	f000 b869 	b.w	8009d9c <_fwalk_sglue>
 8009cca:	bf00      	nop
 8009ccc:	2000001c 	.word	0x2000001c
 8009cd0:	0800c961 	.word	0x0800c961
 8009cd4:	20000198 	.word	0x20000198

08009cd8 <cleanup_stdio>:
 8009cd8:	6841      	ldr	r1, [r0, #4]
 8009cda:	4b0c      	ldr	r3, [pc, #48]	@ (8009d0c <cleanup_stdio+0x34>)
 8009cdc:	4299      	cmp	r1, r3
 8009cde:	b510      	push	{r4, lr}
 8009ce0:	4604      	mov	r4, r0
 8009ce2:	d001      	beq.n	8009ce8 <cleanup_stdio+0x10>
 8009ce4:	f002 fe3c 	bl	800c960 <_fflush_r>
 8009ce8:	68a1      	ldr	r1, [r4, #8]
 8009cea:	4b09      	ldr	r3, [pc, #36]	@ (8009d10 <cleanup_stdio+0x38>)
 8009cec:	4299      	cmp	r1, r3
 8009cee:	d002      	beq.n	8009cf6 <cleanup_stdio+0x1e>
 8009cf0:	4620      	mov	r0, r4
 8009cf2:	f002 fe35 	bl	800c960 <_fflush_r>
 8009cf6:	68e1      	ldr	r1, [r4, #12]
 8009cf8:	4b06      	ldr	r3, [pc, #24]	@ (8009d14 <cleanup_stdio+0x3c>)
 8009cfa:	4299      	cmp	r1, r3
 8009cfc:	d004      	beq.n	8009d08 <cleanup_stdio+0x30>
 8009cfe:	4620      	mov	r0, r4
 8009d00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009d04:	f002 be2c 	b.w	800c960 <_fflush_r>
 8009d08:	bd10      	pop	{r4, pc}
 8009d0a:	bf00      	nop
 8009d0c:	20000568 	.word	0x20000568
 8009d10:	200005d0 	.word	0x200005d0
 8009d14:	20000638 	.word	0x20000638

08009d18 <global_stdio_init.part.0>:
 8009d18:	b510      	push	{r4, lr}
 8009d1a:	4b0b      	ldr	r3, [pc, #44]	@ (8009d48 <global_stdio_init.part.0+0x30>)
 8009d1c:	4c0b      	ldr	r4, [pc, #44]	@ (8009d4c <global_stdio_init.part.0+0x34>)
 8009d1e:	4a0c      	ldr	r2, [pc, #48]	@ (8009d50 <global_stdio_init.part.0+0x38>)
 8009d20:	601a      	str	r2, [r3, #0]
 8009d22:	4620      	mov	r0, r4
 8009d24:	2200      	movs	r2, #0
 8009d26:	2104      	movs	r1, #4
 8009d28:	f7ff ff94 	bl	8009c54 <std>
 8009d2c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009d30:	2201      	movs	r2, #1
 8009d32:	2109      	movs	r1, #9
 8009d34:	f7ff ff8e 	bl	8009c54 <std>
 8009d38:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009d3c:	2202      	movs	r2, #2
 8009d3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009d42:	2112      	movs	r1, #18
 8009d44:	f7ff bf86 	b.w	8009c54 <std>
 8009d48:	200006a0 	.word	0x200006a0
 8009d4c:	20000568 	.word	0x20000568
 8009d50:	08009cc1 	.word	0x08009cc1

08009d54 <__sfp_lock_acquire>:
 8009d54:	4801      	ldr	r0, [pc, #4]	@ (8009d5c <__sfp_lock_acquire+0x8>)
 8009d56:	f000 baf2 	b.w	800a33e <__retarget_lock_acquire_recursive>
 8009d5a:	bf00      	nop
 8009d5c:	200006a9 	.word	0x200006a9

08009d60 <__sfp_lock_release>:
 8009d60:	4801      	ldr	r0, [pc, #4]	@ (8009d68 <__sfp_lock_release+0x8>)
 8009d62:	f000 baed 	b.w	800a340 <__retarget_lock_release_recursive>
 8009d66:	bf00      	nop
 8009d68:	200006a9 	.word	0x200006a9

08009d6c <__sinit>:
 8009d6c:	b510      	push	{r4, lr}
 8009d6e:	4604      	mov	r4, r0
 8009d70:	f7ff fff0 	bl	8009d54 <__sfp_lock_acquire>
 8009d74:	6a23      	ldr	r3, [r4, #32]
 8009d76:	b11b      	cbz	r3, 8009d80 <__sinit+0x14>
 8009d78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009d7c:	f7ff bff0 	b.w	8009d60 <__sfp_lock_release>
 8009d80:	4b04      	ldr	r3, [pc, #16]	@ (8009d94 <__sinit+0x28>)
 8009d82:	6223      	str	r3, [r4, #32]
 8009d84:	4b04      	ldr	r3, [pc, #16]	@ (8009d98 <__sinit+0x2c>)
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d1f5      	bne.n	8009d78 <__sinit+0xc>
 8009d8c:	f7ff ffc4 	bl	8009d18 <global_stdio_init.part.0>
 8009d90:	e7f2      	b.n	8009d78 <__sinit+0xc>
 8009d92:	bf00      	nop
 8009d94:	08009cd9 	.word	0x08009cd9
 8009d98:	200006a0 	.word	0x200006a0

08009d9c <_fwalk_sglue>:
 8009d9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009da0:	4607      	mov	r7, r0
 8009da2:	4688      	mov	r8, r1
 8009da4:	4614      	mov	r4, r2
 8009da6:	2600      	movs	r6, #0
 8009da8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009dac:	f1b9 0901 	subs.w	r9, r9, #1
 8009db0:	d505      	bpl.n	8009dbe <_fwalk_sglue+0x22>
 8009db2:	6824      	ldr	r4, [r4, #0]
 8009db4:	2c00      	cmp	r4, #0
 8009db6:	d1f7      	bne.n	8009da8 <_fwalk_sglue+0xc>
 8009db8:	4630      	mov	r0, r6
 8009dba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009dbe:	89ab      	ldrh	r3, [r5, #12]
 8009dc0:	2b01      	cmp	r3, #1
 8009dc2:	d907      	bls.n	8009dd4 <_fwalk_sglue+0x38>
 8009dc4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009dc8:	3301      	adds	r3, #1
 8009dca:	d003      	beq.n	8009dd4 <_fwalk_sglue+0x38>
 8009dcc:	4629      	mov	r1, r5
 8009dce:	4638      	mov	r0, r7
 8009dd0:	47c0      	blx	r8
 8009dd2:	4306      	orrs	r6, r0
 8009dd4:	3568      	adds	r5, #104	@ 0x68
 8009dd6:	e7e9      	b.n	8009dac <_fwalk_sglue+0x10>

08009dd8 <iprintf>:
 8009dd8:	b40f      	push	{r0, r1, r2, r3}
 8009dda:	b507      	push	{r0, r1, r2, lr}
 8009ddc:	4906      	ldr	r1, [pc, #24]	@ (8009df8 <iprintf+0x20>)
 8009dde:	ab04      	add	r3, sp, #16
 8009de0:	6808      	ldr	r0, [r1, #0]
 8009de2:	f853 2b04 	ldr.w	r2, [r3], #4
 8009de6:	6881      	ldr	r1, [r0, #8]
 8009de8:	9301      	str	r3, [sp, #4]
 8009dea:	f002 fc1d 	bl	800c628 <_vfiprintf_r>
 8009dee:	b003      	add	sp, #12
 8009df0:	f85d eb04 	ldr.w	lr, [sp], #4
 8009df4:	b004      	add	sp, #16
 8009df6:	4770      	bx	lr
 8009df8:	20000194 	.word	0x20000194

08009dfc <_puts_r>:
 8009dfc:	6a03      	ldr	r3, [r0, #32]
 8009dfe:	b570      	push	{r4, r5, r6, lr}
 8009e00:	6884      	ldr	r4, [r0, #8]
 8009e02:	4605      	mov	r5, r0
 8009e04:	460e      	mov	r6, r1
 8009e06:	b90b      	cbnz	r3, 8009e0c <_puts_r+0x10>
 8009e08:	f7ff ffb0 	bl	8009d6c <__sinit>
 8009e0c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009e0e:	07db      	lsls	r3, r3, #31
 8009e10:	d405      	bmi.n	8009e1e <_puts_r+0x22>
 8009e12:	89a3      	ldrh	r3, [r4, #12]
 8009e14:	0598      	lsls	r0, r3, #22
 8009e16:	d402      	bmi.n	8009e1e <_puts_r+0x22>
 8009e18:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009e1a:	f000 fa90 	bl	800a33e <__retarget_lock_acquire_recursive>
 8009e1e:	89a3      	ldrh	r3, [r4, #12]
 8009e20:	0719      	lsls	r1, r3, #28
 8009e22:	d502      	bpl.n	8009e2a <_puts_r+0x2e>
 8009e24:	6923      	ldr	r3, [r4, #16]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d135      	bne.n	8009e96 <_puts_r+0x9a>
 8009e2a:	4621      	mov	r1, r4
 8009e2c:	4628      	mov	r0, r5
 8009e2e:	f000 f9a1 	bl	800a174 <__swsetup_r>
 8009e32:	b380      	cbz	r0, 8009e96 <_puts_r+0x9a>
 8009e34:	f04f 35ff 	mov.w	r5, #4294967295
 8009e38:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009e3a:	07da      	lsls	r2, r3, #31
 8009e3c:	d405      	bmi.n	8009e4a <_puts_r+0x4e>
 8009e3e:	89a3      	ldrh	r3, [r4, #12]
 8009e40:	059b      	lsls	r3, r3, #22
 8009e42:	d402      	bmi.n	8009e4a <_puts_r+0x4e>
 8009e44:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009e46:	f000 fa7b 	bl	800a340 <__retarget_lock_release_recursive>
 8009e4a:	4628      	mov	r0, r5
 8009e4c:	bd70      	pop	{r4, r5, r6, pc}
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	da04      	bge.n	8009e5c <_puts_r+0x60>
 8009e52:	69a2      	ldr	r2, [r4, #24]
 8009e54:	429a      	cmp	r2, r3
 8009e56:	dc17      	bgt.n	8009e88 <_puts_r+0x8c>
 8009e58:	290a      	cmp	r1, #10
 8009e5a:	d015      	beq.n	8009e88 <_puts_r+0x8c>
 8009e5c:	6823      	ldr	r3, [r4, #0]
 8009e5e:	1c5a      	adds	r2, r3, #1
 8009e60:	6022      	str	r2, [r4, #0]
 8009e62:	7019      	strb	r1, [r3, #0]
 8009e64:	68a3      	ldr	r3, [r4, #8]
 8009e66:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009e6a:	3b01      	subs	r3, #1
 8009e6c:	60a3      	str	r3, [r4, #8]
 8009e6e:	2900      	cmp	r1, #0
 8009e70:	d1ed      	bne.n	8009e4e <_puts_r+0x52>
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	da11      	bge.n	8009e9a <_puts_r+0x9e>
 8009e76:	4622      	mov	r2, r4
 8009e78:	210a      	movs	r1, #10
 8009e7a:	4628      	mov	r0, r5
 8009e7c:	f000 f93b 	bl	800a0f6 <__swbuf_r>
 8009e80:	3001      	adds	r0, #1
 8009e82:	d0d7      	beq.n	8009e34 <_puts_r+0x38>
 8009e84:	250a      	movs	r5, #10
 8009e86:	e7d7      	b.n	8009e38 <_puts_r+0x3c>
 8009e88:	4622      	mov	r2, r4
 8009e8a:	4628      	mov	r0, r5
 8009e8c:	f000 f933 	bl	800a0f6 <__swbuf_r>
 8009e90:	3001      	adds	r0, #1
 8009e92:	d1e7      	bne.n	8009e64 <_puts_r+0x68>
 8009e94:	e7ce      	b.n	8009e34 <_puts_r+0x38>
 8009e96:	3e01      	subs	r6, #1
 8009e98:	e7e4      	b.n	8009e64 <_puts_r+0x68>
 8009e9a:	6823      	ldr	r3, [r4, #0]
 8009e9c:	1c5a      	adds	r2, r3, #1
 8009e9e:	6022      	str	r2, [r4, #0]
 8009ea0:	220a      	movs	r2, #10
 8009ea2:	701a      	strb	r2, [r3, #0]
 8009ea4:	e7ee      	b.n	8009e84 <_puts_r+0x88>
	...

08009ea8 <puts>:
 8009ea8:	4b02      	ldr	r3, [pc, #8]	@ (8009eb4 <puts+0xc>)
 8009eaa:	4601      	mov	r1, r0
 8009eac:	6818      	ldr	r0, [r3, #0]
 8009eae:	f7ff bfa5 	b.w	8009dfc <_puts_r>
 8009eb2:	bf00      	nop
 8009eb4:	20000194 	.word	0x20000194

08009eb8 <setbuf>:
 8009eb8:	fab1 f281 	clz	r2, r1
 8009ebc:	0952      	lsrs	r2, r2, #5
 8009ebe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009ec2:	0052      	lsls	r2, r2, #1
 8009ec4:	f000 b800 	b.w	8009ec8 <setvbuf>

08009ec8 <setvbuf>:
 8009ec8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009ecc:	461d      	mov	r5, r3
 8009ece:	4b57      	ldr	r3, [pc, #348]	@ (800a02c <setvbuf+0x164>)
 8009ed0:	681f      	ldr	r7, [r3, #0]
 8009ed2:	4604      	mov	r4, r0
 8009ed4:	460e      	mov	r6, r1
 8009ed6:	4690      	mov	r8, r2
 8009ed8:	b127      	cbz	r7, 8009ee4 <setvbuf+0x1c>
 8009eda:	6a3b      	ldr	r3, [r7, #32]
 8009edc:	b913      	cbnz	r3, 8009ee4 <setvbuf+0x1c>
 8009ede:	4638      	mov	r0, r7
 8009ee0:	f7ff ff44 	bl	8009d6c <__sinit>
 8009ee4:	f1b8 0f02 	cmp.w	r8, #2
 8009ee8:	d006      	beq.n	8009ef8 <setvbuf+0x30>
 8009eea:	f1b8 0f01 	cmp.w	r8, #1
 8009eee:	f200 809a 	bhi.w	800a026 <setvbuf+0x15e>
 8009ef2:	2d00      	cmp	r5, #0
 8009ef4:	f2c0 8097 	blt.w	800a026 <setvbuf+0x15e>
 8009ef8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009efa:	07d9      	lsls	r1, r3, #31
 8009efc:	d405      	bmi.n	8009f0a <setvbuf+0x42>
 8009efe:	89a3      	ldrh	r3, [r4, #12]
 8009f00:	059a      	lsls	r2, r3, #22
 8009f02:	d402      	bmi.n	8009f0a <setvbuf+0x42>
 8009f04:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009f06:	f000 fa1a 	bl	800a33e <__retarget_lock_acquire_recursive>
 8009f0a:	4621      	mov	r1, r4
 8009f0c:	4638      	mov	r0, r7
 8009f0e:	f002 fd27 	bl	800c960 <_fflush_r>
 8009f12:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009f14:	b141      	cbz	r1, 8009f28 <setvbuf+0x60>
 8009f16:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009f1a:	4299      	cmp	r1, r3
 8009f1c:	d002      	beq.n	8009f24 <setvbuf+0x5c>
 8009f1e:	4638      	mov	r0, r7
 8009f20:	f001 f87a 	bl	800b018 <_free_r>
 8009f24:	2300      	movs	r3, #0
 8009f26:	6363      	str	r3, [r4, #52]	@ 0x34
 8009f28:	2300      	movs	r3, #0
 8009f2a:	61a3      	str	r3, [r4, #24]
 8009f2c:	6063      	str	r3, [r4, #4]
 8009f2e:	89a3      	ldrh	r3, [r4, #12]
 8009f30:	061b      	lsls	r3, r3, #24
 8009f32:	d503      	bpl.n	8009f3c <setvbuf+0x74>
 8009f34:	6921      	ldr	r1, [r4, #16]
 8009f36:	4638      	mov	r0, r7
 8009f38:	f001 f86e 	bl	800b018 <_free_r>
 8009f3c:	89a3      	ldrh	r3, [r4, #12]
 8009f3e:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 8009f42:	f023 0303 	bic.w	r3, r3, #3
 8009f46:	f1b8 0f02 	cmp.w	r8, #2
 8009f4a:	81a3      	strh	r3, [r4, #12]
 8009f4c:	d061      	beq.n	800a012 <setvbuf+0x14a>
 8009f4e:	ab01      	add	r3, sp, #4
 8009f50:	466a      	mov	r2, sp
 8009f52:	4621      	mov	r1, r4
 8009f54:	4638      	mov	r0, r7
 8009f56:	f002 fd2b 	bl	800c9b0 <__swhatbuf_r>
 8009f5a:	89a3      	ldrh	r3, [r4, #12]
 8009f5c:	4318      	orrs	r0, r3
 8009f5e:	81a0      	strh	r0, [r4, #12]
 8009f60:	bb2d      	cbnz	r5, 8009fae <setvbuf+0xe6>
 8009f62:	9d00      	ldr	r5, [sp, #0]
 8009f64:	4628      	mov	r0, r5
 8009f66:	f001 fbdb 	bl	800b720 <malloc>
 8009f6a:	4606      	mov	r6, r0
 8009f6c:	2800      	cmp	r0, #0
 8009f6e:	d152      	bne.n	800a016 <setvbuf+0x14e>
 8009f70:	f8dd 9000 	ldr.w	r9, [sp]
 8009f74:	45a9      	cmp	r9, r5
 8009f76:	d140      	bne.n	8009ffa <setvbuf+0x132>
 8009f78:	f04f 35ff 	mov.w	r5, #4294967295
 8009f7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f80:	f043 0202 	orr.w	r2, r3, #2
 8009f84:	81a2      	strh	r2, [r4, #12]
 8009f86:	2200      	movs	r2, #0
 8009f88:	60a2      	str	r2, [r4, #8]
 8009f8a:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 8009f8e:	6022      	str	r2, [r4, #0]
 8009f90:	6122      	str	r2, [r4, #16]
 8009f92:	2201      	movs	r2, #1
 8009f94:	6162      	str	r2, [r4, #20]
 8009f96:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009f98:	07d6      	lsls	r6, r2, #31
 8009f9a:	d404      	bmi.n	8009fa6 <setvbuf+0xde>
 8009f9c:	0598      	lsls	r0, r3, #22
 8009f9e:	d402      	bmi.n	8009fa6 <setvbuf+0xde>
 8009fa0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009fa2:	f000 f9cd 	bl	800a340 <__retarget_lock_release_recursive>
 8009fa6:	4628      	mov	r0, r5
 8009fa8:	b003      	add	sp, #12
 8009faa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009fae:	2e00      	cmp	r6, #0
 8009fb0:	d0d8      	beq.n	8009f64 <setvbuf+0x9c>
 8009fb2:	6a3b      	ldr	r3, [r7, #32]
 8009fb4:	b913      	cbnz	r3, 8009fbc <setvbuf+0xf4>
 8009fb6:	4638      	mov	r0, r7
 8009fb8:	f7ff fed8 	bl	8009d6c <__sinit>
 8009fbc:	f1b8 0f01 	cmp.w	r8, #1
 8009fc0:	bf08      	it	eq
 8009fc2:	89a3      	ldrheq	r3, [r4, #12]
 8009fc4:	6026      	str	r6, [r4, #0]
 8009fc6:	bf04      	itt	eq
 8009fc8:	f043 0301 	orreq.w	r3, r3, #1
 8009fcc:	81a3      	strheq	r3, [r4, #12]
 8009fce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009fd2:	f013 0208 	ands.w	r2, r3, #8
 8009fd6:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8009fda:	d01e      	beq.n	800a01a <setvbuf+0x152>
 8009fdc:	07d9      	lsls	r1, r3, #31
 8009fde:	bf41      	itttt	mi
 8009fe0:	2200      	movmi	r2, #0
 8009fe2:	426d      	negmi	r5, r5
 8009fe4:	60a2      	strmi	r2, [r4, #8]
 8009fe6:	61a5      	strmi	r5, [r4, #24]
 8009fe8:	bf58      	it	pl
 8009fea:	60a5      	strpl	r5, [r4, #8]
 8009fec:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009fee:	07d2      	lsls	r2, r2, #31
 8009ff0:	d401      	bmi.n	8009ff6 <setvbuf+0x12e>
 8009ff2:	059b      	lsls	r3, r3, #22
 8009ff4:	d513      	bpl.n	800a01e <setvbuf+0x156>
 8009ff6:	2500      	movs	r5, #0
 8009ff8:	e7d5      	b.n	8009fa6 <setvbuf+0xde>
 8009ffa:	4648      	mov	r0, r9
 8009ffc:	f001 fb90 	bl	800b720 <malloc>
 800a000:	4606      	mov	r6, r0
 800a002:	2800      	cmp	r0, #0
 800a004:	d0b8      	beq.n	8009f78 <setvbuf+0xb0>
 800a006:	89a3      	ldrh	r3, [r4, #12]
 800a008:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a00c:	81a3      	strh	r3, [r4, #12]
 800a00e:	464d      	mov	r5, r9
 800a010:	e7cf      	b.n	8009fb2 <setvbuf+0xea>
 800a012:	2500      	movs	r5, #0
 800a014:	e7b2      	b.n	8009f7c <setvbuf+0xb4>
 800a016:	46a9      	mov	r9, r5
 800a018:	e7f5      	b.n	800a006 <setvbuf+0x13e>
 800a01a:	60a2      	str	r2, [r4, #8]
 800a01c:	e7e6      	b.n	8009fec <setvbuf+0x124>
 800a01e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a020:	f000 f98e 	bl	800a340 <__retarget_lock_release_recursive>
 800a024:	e7e7      	b.n	8009ff6 <setvbuf+0x12e>
 800a026:	f04f 35ff 	mov.w	r5, #4294967295
 800a02a:	e7bc      	b.n	8009fa6 <setvbuf+0xde>
 800a02c:	20000194 	.word	0x20000194

0800a030 <siprintf>:
 800a030:	b40e      	push	{r1, r2, r3}
 800a032:	b500      	push	{lr}
 800a034:	b09c      	sub	sp, #112	@ 0x70
 800a036:	ab1d      	add	r3, sp, #116	@ 0x74
 800a038:	9002      	str	r0, [sp, #8]
 800a03a:	9006      	str	r0, [sp, #24]
 800a03c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a040:	4809      	ldr	r0, [pc, #36]	@ (800a068 <siprintf+0x38>)
 800a042:	9107      	str	r1, [sp, #28]
 800a044:	9104      	str	r1, [sp, #16]
 800a046:	4909      	ldr	r1, [pc, #36]	@ (800a06c <siprintf+0x3c>)
 800a048:	f853 2b04 	ldr.w	r2, [r3], #4
 800a04c:	9105      	str	r1, [sp, #20]
 800a04e:	6800      	ldr	r0, [r0, #0]
 800a050:	9301      	str	r3, [sp, #4]
 800a052:	a902      	add	r1, sp, #8
 800a054:	f002 f9c2 	bl	800c3dc <_svfiprintf_r>
 800a058:	9b02      	ldr	r3, [sp, #8]
 800a05a:	2200      	movs	r2, #0
 800a05c:	701a      	strb	r2, [r3, #0]
 800a05e:	b01c      	add	sp, #112	@ 0x70
 800a060:	f85d eb04 	ldr.w	lr, [sp], #4
 800a064:	b003      	add	sp, #12
 800a066:	4770      	bx	lr
 800a068:	20000194 	.word	0x20000194
 800a06c:	ffff0208 	.word	0xffff0208

0800a070 <__sread>:
 800a070:	b510      	push	{r4, lr}
 800a072:	460c      	mov	r4, r1
 800a074:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a078:	f000 f912 	bl	800a2a0 <_read_r>
 800a07c:	2800      	cmp	r0, #0
 800a07e:	bfab      	itete	ge
 800a080:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a082:	89a3      	ldrhlt	r3, [r4, #12]
 800a084:	181b      	addge	r3, r3, r0
 800a086:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a08a:	bfac      	ite	ge
 800a08c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a08e:	81a3      	strhlt	r3, [r4, #12]
 800a090:	bd10      	pop	{r4, pc}

0800a092 <__swrite>:
 800a092:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a096:	461f      	mov	r7, r3
 800a098:	898b      	ldrh	r3, [r1, #12]
 800a09a:	05db      	lsls	r3, r3, #23
 800a09c:	4605      	mov	r5, r0
 800a09e:	460c      	mov	r4, r1
 800a0a0:	4616      	mov	r6, r2
 800a0a2:	d505      	bpl.n	800a0b0 <__swrite+0x1e>
 800a0a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0a8:	2302      	movs	r3, #2
 800a0aa:	2200      	movs	r2, #0
 800a0ac:	f000 f8e6 	bl	800a27c <_lseek_r>
 800a0b0:	89a3      	ldrh	r3, [r4, #12]
 800a0b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a0b6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a0ba:	81a3      	strh	r3, [r4, #12]
 800a0bc:	4632      	mov	r2, r6
 800a0be:	463b      	mov	r3, r7
 800a0c0:	4628      	mov	r0, r5
 800a0c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a0c6:	f000 b8fd 	b.w	800a2c4 <_write_r>

0800a0ca <__sseek>:
 800a0ca:	b510      	push	{r4, lr}
 800a0cc:	460c      	mov	r4, r1
 800a0ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0d2:	f000 f8d3 	bl	800a27c <_lseek_r>
 800a0d6:	1c43      	adds	r3, r0, #1
 800a0d8:	89a3      	ldrh	r3, [r4, #12]
 800a0da:	bf15      	itete	ne
 800a0dc:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a0de:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a0e2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a0e6:	81a3      	strheq	r3, [r4, #12]
 800a0e8:	bf18      	it	ne
 800a0ea:	81a3      	strhne	r3, [r4, #12]
 800a0ec:	bd10      	pop	{r4, pc}

0800a0ee <__sclose>:
 800a0ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0f2:	f000 b8b3 	b.w	800a25c <_close_r>

0800a0f6 <__swbuf_r>:
 800a0f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0f8:	460e      	mov	r6, r1
 800a0fa:	4614      	mov	r4, r2
 800a0fc:	4605      	mov	r5, r0
 800a0fe:	b118      	cbz	r0, 800a108 <__swbuf_r+0x12>
 800a100:	6a03      	ldr	r3, [r0, #32]
 800a102:	b90b      	cbnz	r3, 800a108 <__swbuf_r+0x12>
 800a104:	f7ff fe32 	bl	8009d6c <__sinit>
 800a108:	69a3      	ldr	r3, [r4, #24]
 800a10a:	60a3      	str	r3, [r4, #8]
 800a10c:	89a3      	ldrh	r3, [r4, #12]
 800a10e:	071a      	lsls	r2, r3, #28
 800a110:	d501      	bpl.n	800a116 <__swbuf_r+0x20>
 800a112:	6923      	ldr	r3, [r4, #16]
 800a114:	b943      	cbnz	r3, 800a128 <__swbuf_r+0x32>
 800a116:	4621      	mov	r1, r4
 800a118:	4628      	mov	r0, r5
 800a11a:	f000 f82b 	bl	800a174 <__swsetup_r>
 800a11e:	b118      	cbz	r0, 800a128 <__swbuf_r+0x32>
 800a120:	f04f 37ff 	mov.w	r7, #4294967295
 800a124:	4638      	mov	r0, r7
 800a126:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a128:	6823      	ldr	r3, [r4, #0]
 800a12a:	6922      	ldr	r2, [r4, #16]
 800a12c:	1a98      	subs	r0, r3, r2
 800a12e:	6963      	ldr	r3, [r4, #20]
 800a130:	b2f6      	uxtb	r6, r6
 800a132:	4283      	cmp	r3, r0
 800a134:	4637      	mov	r7, r6
 800a136:	dc05      	bgt.n	800a144 <__swbuf_r+0x4e>
 800a138:	4621      	mov	r1, r4
 800a13a:	4628      	mov	r0, r5
 800a13c:	f002 fc10 	bl	800c960 <_fflush_r>
 800a140:	2800      	cmp	r0, #0
 800a142:	d1ed      	bne.n	800a120 <__swbuf_r+0x2a>
 800a144:	68a3      	ldr	r3, [r4, #8]
 800a146:	3b01      	subs	r3, #1
 800a148:	60a3      	str	r3, [r4, #8]
 800a14a:	6823      	ldr	r3, [r4, #0]
 800a14c:	1c5a      	adds	r2, r3, #1
 800a14e:	6022      	str	r2, [r4, #0]
 800a150:	701e      	strb	r6, [r3, #0]
 800a152:	6962      	ldr	r2, [r4, #20]
 800a154:	1c43      	adds	r3, r0, #1
 800a156:	429a      	cmp	r2, r3
 800a158:	d004      	beq.n	800a164 <__swbuf_r+0x6e>
 800a15a:	89a3      	ldrh	r3, [r4, #12]
 800a15c:	07db      	lsls	r3, r3, #31
 800a15e:	d5e1      	bpl.n	800a124 <__swbuf_r+0x2e>
 800a160:	2e0a      	cmp	r6, #10
 800a162:	d1df      	bne.n	800a124 <__swbuf_r+0x2e>
 800a164:	4621      	mov	r1, r4
 800a166:	4628      	mov	r0, r5
 800a168:	f002 fbfa 	bl	800c960 <_fflush_r>
 800a16c:	2800      	cmp	r0, #0
 800a16e:	d0d9      	beq.n	800a124 <__swbuf_r+0x2e>
 800a170:	e7d6      	b.n	800a120 <__swbuf_r+0x2a>
	...

0800a174 <__swsetup_r>:
 800a174:	b538      	push	{r3, r4, r5, lr}
 800a176:	4b29      	ldr	r3, [pc, #164]	@ (800a21c <__swsetup_r+0xa8>)
 800a178:	4605      	mov	r5, r0
 800a17a:	6818      	ldr	r0, [r3, #0]
 800a17c:	460c      	mov	r4, r1
 800a17e:	b118      	cbz	r0, 800a188 <__swsetup_r+0x14>
 800a180:	6a03      	ldr	r3, [r0, #32]
 800a182:	b90b      	cbnz	r3, 800a188 <__swsetup_r+0x14>
 800a184:	f7ff fdf2 	bl	8009d6c <__sinit>
 800a188:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a18c:	0719      	lsls	r1, r3, #28
 800a18e:	d422      	bmi.n	800a1d6 <__swsetup_r+0x62>
 800a190:	06da      	lsls	r2, r3, #27
 800a192:	d407      	bmi.n	800a1a4 <__swsetup_r+0x30>
 800a194:	2209      	movs	r2, #9
 800a196:	602a      	str	r2, [r5, #0]
 800a198:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a19c:	81a3      	strh	r3, [r4, #12]
 800a19e:	f04f 30ff 	mov.w	r0, #4294967295
 800a1a2:	e033      	b.n	800a20c <__swsetup_r+0x98>
 800a1a4:	0758      	lsls	r0, r3, #29
 800a1a6:	d512      	bpl.n	800a1ce <__swsetup_r+0x5a>
 800a1a8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a1aa:	b141      	cbz	r1, 800a1be <__swsetup_r+0x4a>
 800a1ac:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a1b0:	4299      	cmp	r1, r3
 800a1b2:	d002      	beq.n	800a1ba <__swsetup_r+0x46>
 800a1b4:	4628      	mov	r0, r5
 800a1b6:	f000 ff2f 	bl	800b018 <_free_r>
 800a1ba:	2300      	movs	r3, #0
 800a1bc:	6363      	str	r3, [r4, #52]	@ 0x34
 800a1be:	89a3      	ldrh	r3, [r4, #12]
 800a1c0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a1c4:	81a3      	strh	r3, [r4, #12]
 800a1c6:	2300      	movs	r3, #0
 800a1c8:	6063      	str	r3, [r4, #4]
 800a1ca:	6923      	ldr	r3, [r4, #16]
 800a1cc:	6023      	str	r3, [r4, #0]
 800a1ce:	89a3      	ldrh	r3, [r4, #12]
 800a1d0:	f043 0308 	orr.w	r3, r3, #8
 800a1d4:	81a3      	strh	r3, [r4, #12]
 800a1d6:	6923      	ldr	r3, [r4, #16]
 800a1d8:	b94b      	cbnz	r3, 800a1ee <__swsetup_r+0x7a>
 800a1da:	89a3      	ldrh	r3, [r4, #12]
 800a1dc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a1e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a1e4:	d003      	beq.n	800a1ee <__swsetup_r+0x7a>
 800a1e6:	4621      	mov	r1, r4
 800a1e8:	4628      	mov	r0, r5
 800a1ea:	f002 fc07 	bl	800c9fc <__smakebuf_r>
 800a1ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a1f2:	f013 0201 	ands.w	r2, r3, #1
 800a1f6:	d00a      	beq.n	800a20e <__swsetup_r+0x9a>
 800a1f8:	2200      	movs	r2, #0
 800a1fa:	60a2      	str	r2, [r4, #8]
 800a1fc:	6962      	ldr	r2, [r4, #20]
 800a1fe:	4252      	negs	r2, r2
 800a200:	61a2      	str	r2, [r4, #24]
 800a202:	6922      	ldr	r2, [r4, #16]
 800a204:	b942      	cbnz	r2, 800a218 <__swsetup_r+0xa4>
 800a206:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a20a:	d1c5      	bne.n	800a198 <__swsetup_r+0x24>
 800a20c:	bd38      	pop	{r3, r4, r5, pc}
 800a20e:	0799      	lsls	r1, r3, #30
 800a210:	bf58      	it	pl
 800a212:	6962      	ldrpl	r2, [r4, #20]
 800a214:	60a2      	str	r2, [r4, #8]
 800a216:	e7f4      	b.n	800a202 <__swsetup_r+0x8e>
 800a218:	2000      	movs	r0, #0
 800a21a:	e7f7      	b.n	800a20c <__swsetup_r+0x98>
 800a21c:	20000194 	.word	0x20000194

0800a220 <memset>:
 800a220:	4402      	add	r2, r0
 800a222:	4603      	mov	r3, r0
 800a224:	4293      	cmp	r3, r2
 800a226:	d100      	bne.n	800a22a <memset+0xa>
 800a228:	4770      	bx	lr
 800a22a:	f803 1b01 	strb.w	r1, [r3], #1
 800a22e:	e7f9      	b.n	800a224 <memset+0x4>

0800a230 <strncmp>:
 800a230:	b510      	push	{r4, lr}
 800a232:	b16a      	cbz	r2, 800a250 <strncmp+0x20>
 800a234:	3901      	subs	r1, #1
 800a236:	1884      	adds	r4, r0, r2
 800a238:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a23c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a240:	429a      	cmp	r2, r3
 800a242:	d103      	bne.n	800a24c <strncmp+0x1c>
 800a244:	42a0      	cmp	r0, r4
 800a246:	d001      	beq.n	800a24c <strncmp+0x1c>
 800a248:	2a00      	cmp	r2, #0
 800a24a:	d1f5      	bne.n	800a238 <strncmp+0x8>
 800a24c:	1ad0      	subs	r0, r2, r3
 800a24e:	bd10      	pop	{r4, pc}
 800a250:	4610      	mov	r0, r2
 800a252:	e7fc      	b.n	800a24e <strncmp+0x1e>

0800a254 <_localeconv_r>:
 800a254:	4800      	ldr	r0, [pc, #0]	@ (800a258 <_localeconv_r+0x4>)
 800a256:	4770      	bx	lr
 800a258:	20000118 	.word	0x20000118

0800a25c <_close_r>:
 800a25c:	b538      	push	{r3, r4, r5, lr}
 800a25e:	4d06      	ldr	r5, [pc, #24]	@ (800a278 <_close_r+0x1c>)
 800a260:	2300      	movs	r3, #0
 800a262:	4604      	mov	r4, r0
 800a264:	4608      	mov	r0, r1
 800a266:	602b      	str	r3, [r5, #0]
 800a268:	f7f8 f826 	bl	80022b8 <_close>
 800a26c:	1c43      	adds	r3, r0, #1
 800a26e:	d102      	bne.n	800a276 <_close_r+0x1a>
 800a270:	682b      	ldr	r3, [r5, #0]
 800a272:	b103      	cbz	r3, 800a276 <_close_r+0x1a>
 800a274:	6023      	str	r3, [r4, #0]
 800a276:	bd38      	pop	{r3, r4, r5, pc}
 800a278:	200006a4 	.word	0x200006a4

0800a27c <_lseek_r>:
 800a27c:	b538      	push	{r3, r4, r5, lr}
 800a27e:	4d07      	ldr	r5, [pc, #28]	@ (800a29c <_lseek_r+0x20>)
 800a280:	4604      	mov	r4, r0
 800a282:	4608      	mov	r0, r1
 800a284:	4611      	mov	r1, r2
 800a286:	2200      	movs	r2, #0
 800a288:	602a      	str	r2, [r5, #0]
 800a28a:	461a      	mov	r2, r3
 800a28c:	f7f8 f83b 	bl	8002306 <_lseek>
 800a290:	1c43      	adds	r3, r0, #1
 800a292:	d102      	bne.n	800a29a <_lseek_r+0x1e>
 800a294:	682b      	ldr	r3, [r5, #0]
 800a296:	b103      	cbz	r3, 800a29a <_lseek_r+0x1e>
 800a298:	6023      	str	r3, [r4, #0]
 800a29a:	bd38      	pop	{r3, r4, r5, pc}
 800a29c:	200006a4 	.word	0x200006a4

0800a2a0 <_read_r>:
 800a2a0:	b538      	push	{r3, r4, r5, lr}
 800a2a2:	4d07      	ldr	r5, [pc, #28]	@ (800a2c0 <_read_r+0x20>)
 800a2a4:	4604      	mov	r4, r0
 800a2a6:	4608      	mov	r0, r1
 800a2a8:	4611      	mov	r1, r2
 800a2aa:	2200      	movs	r2, #0
 800a2ac:	602a      	str	r2, [r5, #0]
 800a2ae:	461a      	mov	r2, r3
 800a2b0:	f7f7 ffe5 	bl	800227e <_read>
 800a2b4:	1c43      	adds	r3, r0, #1
 800a2b6:	d102      	bne.n	800a2be <_read_r+0x1e>
 800a2b8:	682b      	ldr	r3, [r5, #0]
 800a2ba:	b103      	cbz	r3, 800a2be <_read_r+0x1e>
 800a2bc:	6023      	str	r3, [r4, #0]
 800a2be:	bd38      	pop	{r3, r4, r5, pc}
 800a2c0:	200006a4 	.word	0x200006a4

0800a2c4 <_write_r>:
 800a2c4:	b538      	push	{r3, r4, r5, lr}
 800a2c6:	4d07      	ldr	r5, [pc, #28]	@ (800a2e4 <_write_r+0x20>)
 800a2c8:	4604      	mov	r4, r0
 800a2ca:	4608      	mov	r0, r1
 800a2cc:	4611      	mov	r1, r2
 800a2ce:	2200      	movs	r2, #0
 800a2d0:	602a      	str	r2, [r5, #0]
 800a2d2:	461a      	mov	r2, r3
 800a2d4:	f7f7 faac 	bl	8001830 <_write>
 800a2d8:	1c43      	adds	r3, r0, #1
 800a2da:	d102      	bne.n	800a2e2 <_write_r+0x1e>
 800a2dc:	682b      	ldr	r3, [r5, #0]
 800a2de:	b103      	cbz	r3, 800a2e2 <_write_r+0x1e>
 800a2e0:	6023      	str	r3, [r4, #0]
 800a2e2:	bd38      	pop	{r3, r4, r5, pc}
 800a2e4:	200006a4 	.word	0x200006a4

0800a2e8 <__errno>:
 800a2e8:	4b01      	ldr	r3, [pc, #4]	@ (800a2f0 <__errno+0x8>)
 800a2ea:	6818      	ldr	r0, [r3, #0]
 800a2ec:	4770      	bx	lr
 800a2ee:	bf00      	nop
 800a2f0:	20000194 	.word	0x20000194

0800a2f4 <__libc_init_array>:
 800a2f4:	b570      	push	{r4, r5, r6, lr}
 800a2f6:	4d0d      	ldr	r5, [pc, #52]	@ (800a32c <__libc_init_array+0x38>)
 800a2f8:	4c0d      	ldr	r4, [pc, #52]	@ (800a330 <__libc_init_array+0x3c>)
 800a2fa:	1b64      	subs	r4, r4, r5
 800a2fc:	10a4      	asrs	r4, r4, #2
 800a2fe:	2600      	movs	r6, #0
 800a300:	42a6      	cmp	r6, r4
 800a302:	d109      	bne.n	800a318 <__libc_init_array+0x24>
 800a304:	4d0b      	ldr	r5, [pc, #44]	@ (800a334 <__libc_init_array+0x40>)
 800a306:	4c0c      	ldr	r4, [pc, #48]	@ (800a338 <__libc_init_array+0x44>)
 800a308:	f002 fcc6 	bl	800cc98 <_init>
 800a30c:	1b64      	subs	r4, r4, r5
 800a30e:	10a4      	asrs	r4, r4, #2
 800a310:	2600      	movs	r6, #0
 800a312:	42a6      	cmp	r6, r4
 800a314:	d105      	bne.n	800a322 <__libc_init_array+0x2e>
 800a316:	bd70      	pop	{r4, r5, r6, pc}
 800a318:	f855 3b04 	ldr.w	r3, [r5], #4
 800a31c:	4798      	blx	r3
 800a31e:	3601      	adds	r6, #1
 800a320:	e7ee      	b.n	800a300 <__libc_init_array+0xc>
 800a322:	f855 3b04 	ldr.w	r3, [r5], #4
 800a326:	4798      	blx	r3
 800a328:	3601      	adds	r6, #1
 800a32a:	e7f2      	b.n	800a312 <__libc_init_array+0x1e>
 800a32c:	0800d190 	.word	0x0800d190
 800a330:	0800d190 	.word	0x0800d190
 800a334:	0800d190 	.word	0x0800d190
 800a338:	0800d194 	.word	0x0800d194

0800a33c <__retarget_lock_init_recursive>:
 800a33c:	4770      	bx	lr

0800a33e <__retarget_lock_acquire_recursive>:
 800a33e:	4770      	bx	lr

0800a340 <__retarget_lock_release_recursive>:
 800a340:	4770      	bx	lr

0800a342 <memcpy>:
 800a342:	440a      	add	r2, r1
 800a344:	4291      	cmp	r1, r2
 800a346:	f100 33ff 	add.w	r3, r0, #4294967295
 800a34a:	d100      	bne.n	800a34e <memcpy+0xc>
 800a34c:	4770      	bx	lr
 800a34e:	b510      	push	{r4, lr}
 800a350:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a354:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a358:	4291      	cmp	r1, r2
 800a35a:	d1f9      	bne.n	800a350 <memcpy+0xe>
 800a35c:	bd10      	pop	{r4, pc}
	...

0800a360 <nan>:
 800a360:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800a368 <nan+0x8>
 800a364:	4770      	bx	lr
 800a366:	bf00      	nop
 800a368:	00000000 	.word	0x00000000
 800a36c:	7ff80000 	.word	0x7ff80000

0800a370 <nanf>:
 800a370:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800a378 <nanf+0x8>
 800a374:	4770      	bx	lr
 800a376:	bf00      	nop
 800a378:	7fc00000 	.word	0x7fc00000

0800a37c <quorem>:
 800a37c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a380:	6903      	ldr	r3, [r0, #16]
 800a382:	690c      	ldr	r4, [r1, #16]
 800a384:	42a3      	cmp	r3, r4
 800a386:	4607      	mov	r7, r0
 800a388:	db7e      	blt.n	800a488 <quorem+0x10c>
 800a38a:	3c01      	subs	r4, #1
 800a38c:	f101 0814 	add.w	r8, r1, #20
 800a390:	00a3      	lsls	r3, r4, #2
 800a392:	f100 0514 	add.w	r5, r0, #20
 800a396:	9300      	str	r3, [sp, #0]
 800a398:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a39c:	9301      	str	r3, [sp, #4]
 800a39e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a3a2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a3a6:	3301      	adds	r3, #1
 800a3a8:	429a      	cmp	r2, r3
 800a3aa:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a3ae:	fbb2 f6f3 	udiv	r6, r2, r3
 800a3b2:	d32e      	bcc.n	800a412 <quorem+0x96>
 800a3b4:	f04f 0a00 	mov.w	sl, #0
 800a3b8:	46c4      	mov	ip, r8
 800a3ba:	46ae      	mov	lr, r5
 800a3bc:	46d3      	mov	fp, sl
 800a3be:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a3c2:	b298      	uxth	r0, r3
 800a3c4:	fb06 a000 	mla	r0, r6, r0, sl
 800a3c8:	0c02      	lsrs	r2, r0, #16
 800a3ca:	0c1b      	lsrs	r3, r3, #16
 800a3cc:	fb06 2303 	mla	r3, r6, r3, r2
 800a3d0:	f8de 2000 	ldr.w	r2, [lr]
 800a3d4:	b280      	uxth	r0, r0
 800a3d6:	b292      	uxth	r2, r2
 800a3d8:	1a12      	subs	r2, r2, r0
 800a3da:	445a      	add	r2, fp
 800a3dc:	f8de 0000 	ldr.w	r0, [lr]
 800a3e0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a3e4:	b29b      	uxth	r3, r3
 800a3e6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a3ea:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a3ee:	b292      	uxth	r2, r2
 800a3f0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a3f4:	45e1      	cmp	r9, ip
 800a3f6:	f84e 2b04 	str.w	r2, [lr], #4
 800a3fa:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a3fe:	d2de      	bcs.n	800a3be <quorem+0x42>
 800a400:	9b00      	ldr	r3, [sp, #0]
 800a402:	58eb      	ldr	r3, [r5, r3]
 800a404:	b92b      	cbnz	r3, 800a412 <quorem+0x96>
 800a406:	9b01      	ldr	r3, [sp, #4]
 800a408:	3b04      	subs	r3, #4
 800a40a:	429d      	cmp	r5, r3
 800a40c:	461a      	mov	r2, r3
 800a40e:	d32f      	bcc.n	800a470 <quorem+0xf4>
 800a410:	613c      	str	r4, [r7, #16]
 800a412:	4638      	mov	r0, r7
 800a414:	f001 fd10 	bl	800be38 <__mcmp>
 800a418:	2800      	cmp	r0, #0
 800a41a:	db25      	blt.n	800a468 <quorem+0xec>
 800a41c:	4629      	mov	r1, r5
 800a41e:	2000      	movs	r0, #0
 800a420:	f858 2b04 	ldr.w	r2, [r8], #4
 800a424:	f8d1 c000 	ldr.w	ip, [r1]
 800a428:	fa1f fe82 	uxth.w	lr, r2
 800a42c:	fa1f f38c 	uxth.w	r3, ip
 800a430:	eba3 030e 	sub.w	r3, r3, lr
 800a434:	4403      	add	r3, r0
 800a436:	0c12      	lsrs	r2, r2, #16
 800a438:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a43c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a440:	b29b      	uxth	r3, r3
 800a442:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a446:	45c1      	cmp	r9, r8
 800a448:	f841 3b04 	str.w	r3, [r1], #4
 800a44c:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a450:	d2e6      	bcs.n	800a420 <quorem+0xa4>
 800a452:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a456:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a45a:	b922      	cbnz	r2, 800a466 <quorem+0xea>
 800a45c:	3b04      	subs	r3, #4
 800a45e:	429d      	cmp	r5, r3
 800a460:	461a      	mov	r2, r3
 800a462:	d30b      	bcc.n	800a47c <quorem+0x100>
 800a464:	613c      	str	r4, [r7, #16]
 800a466:	3601      	adds	r6, #1
 800a468:	4630      	mov	r0, r6
 800a46a:	b003      	add	sp, #12
 800a46c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a470:	6812      	ldr	r2, [r2, #0]
 800a472:	3b04      	subs	r3, #4
 800a474:	2a00      	cmp	r2, #0
 800a476:	d1cb      	bne.n	800a410 <quorem+0x94>
 800a478:	3c01      	subs	r4, #1
 800a47a:	e7c6      	b.n	800a40a <quorem+0x8e>
 800a47c:	6812      	ldr	r2, [r2, #0]
 800a47e:	3b04      	subs	r3, #4
 800a480:	2a00      	cmp	r2, #0
 800a482:	d1ef      	bne.n	800a464 <quorem+0xe8>
 800a484:	3c01      	subs	r4, #1
 800a486:	e7ea      	b.n	800a45e <quorem+0xe2>
 800a488:	2000      	movs	r0, #0
 800a48a:	e7ee      	b.n	800a46a <quorem+0xee>
 800a48c:	0000      	movs	r0, r0
	...

0800a490 <_dtoa_r>:
 800a490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a494:	69c7      	ldr	r7, [r0, #28]
 800a496:	b099      	sub	sp, #100	@ 0x64
 800a498:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a49c:	ec55 4b10 	vmov	r4, r5, d0
 800a4a0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800a4a2:	9109      	str	r1, [sp, #36]	@ 0x24
 800a4a4:	4683      	mov	fp, r0
 800a4a6:	920e      	str	r2, [sp, #56]	@ 0x38
 800a4a8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a4aa:	b97f      	cbnz	r7, 800a4cc <_dtoa_r+0x3c>
 800a4ac:	2010      	movs	r0, #16
 800a4ae:	f001 f937 	bl	800b720 <malloc>
 800a4b2:	4602      	mov	r2, r0
 800a4b4:	f8cb 001c 	str.w	r0, [fp, #28]
 800a4b8:	b920      	cbnz	r0, 800a4c4 <_dtoa_r+0x34>
 800a4ba:	4ba7      	ldr	r3, [pc, #668]	@ (800a758 <_dtoa_r+0x2c8>)
 800a4bc:	21ef      	movs	r1, #239	@ 0xef
 800a4be:	48a7      	ldr	r0, [pc, #668]	@ (800a75c <_dtoa_r+0x2cc>)
 800a4c0:	f002 fb24 	bl	800cb0c <__assert_func>
 800a4c4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a4c8:	6007      	str	r7, [r0, #0]
 800a4ca:	60c7      	str	r7, [r0, #12]
 800a4cc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a4d0:	6819      	ldr	r1, [r3, #0]
 800a4d2:	b159      	cbz	r1, 800a4ec <_dtoa_r+0x5c>
 800a4d4:	685a      	ldr	r2, [r3, #4]
 800a4d6:	604a      	str	r2, [r1, #4]
 800a4d8:	2301      	movs	r3, #1
 800a4da:	4093      	lsls	r3, r2
 800a4dc:	608b      	str	r3, [r1, #8]
 800a4de:	4658      	mov	r0, fp
 800a4e0:	f001 fa26 	bl	800b930 <_Bfree>
 800a4e4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a4e8:	2200      	movs	r2, #0
 800a4ea:	601a      	str	r2, [r3, #0]
 800a4ec:	1e2b      	subs	r3, r5, #0
 800a4ee:	bfb9      	ittee	lt
 800a4f0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a4f4:	9303      	strlt	r3, [sp, #12]
 800a4f6:	2300      	movge	r3, #0
 800a4f8:	6033      	strge	r3, [r6, #0]
 800a4fa:	9f03      	ldr	r7, [sp, #12]
 800a4fc:	4b98      	ldr	r3, [pc, #608]	@ (800a760 <_dtoa_r+0x2d0>)
 800a4fe:	bfbc      	itt	lt
 800a500:	2201      	movlt	r2, #1
 800a502:	6032      	strlt	r2, [r6, #0]
 800a504:	43bb      	bics	r3, r7
 800a506:	d112      	bne.n	800a52e <_dtoa_r+0x9e>
 800a508:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a50a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a50e:	6013      	str	r3, [r2, #0]
 800a510:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a514:	4323      	orrs	r3, r4
 800a516:	f000 854d 	beq.w	800afb4 <_dtoa_r+0xb24>
 800a51a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a51c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800a774 <_dtoa_r+0x2e4>
 800a520:	2b00      	cmp	r3, #0
 800a522:	f000 854f 	beq.w	800afc4 <_dtoa_r+0xb34>
 800a526:	f10a 0303 	add.w	r3, sl, #3
 800a52a:	f000 bd49 	b.w	800afc0 <_dtoa_r+0xb30>
 800a52e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a532:	2200      	movs	r2, #0
 800a534:	ec51 0b17 	vmov	r0, r1, d7
 800a538:	2300      	movs	r3, #0
 800a53a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800a53e:	f7f6 faeb 	bl	8000b18 <__aeabi_dcmpeq>
 800a542:	4680      	mov	r8, r0
 800a544:	b158      	cbz	r0, 800a55e <_dtoa_r+0xce>
 800a546:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a548:	2301      	movs	r3, #1
 800a54a:	6013      	str	r3, [r2, #0]
 800a54c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a54e:	b113      	cbz	r3, 800a556 <_dtoa_r+0xc6>
 800a550:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a552:	4b84      	ldr	r3, [pc, #528]	@ (800a764 <_dtoa_r+0x2d4>)
 800a554:	6013      	str	r3, [r2, #0]
 800a556:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800a778 <_dtoa_r+0x2e8>
 800a55a:	f000 bd33 	b.w	800afc4 <_dtoa_r+0xb34>
 800a55e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a562:	aa16      	add	r2, sp, #88	@ 0x58
 800a564:	a917      	add	r1, sp, #92	@ 0x5c
 800a566:	4658      	mov	r0, fp
 800a568:	f001 fd86 	bl	800c078 <__d2b>
 800a56c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800a570:	4681      	mov	r9, r0
 800a572:	2e00      	cmp	r6, #0
 800a574:	d077      	beq.n	800a666 <_dtoa_r+0x1d6>
 800a576:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a578:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800a57c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a580:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a584:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800a588:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800a58c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800a590:	4619      	mov	r1, r3
 800a592:	2200      	movs	r2, #0
 800a594:	4b74      	ldr	r3, [pc, #464]	@ (800a768 <_dtoa_r+0x2d8>)
 800a596:	f7f5 fe9f 	bl	80002d8 <__aeabi_dsub>
 800a59a:	a369      	add	r3, pc, #420	@ (adr r3, 800a740 <_dtoa_r+0x2b0>)
 800a59c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5a0:	f7f6 f852 	bl	8000648 <__aeabi_dmul>
 800a5a4:	a368      	add	r3, pc, #416	@ (adr r3, 800a748 <_dtoa_r+0x2b8>)
 800a5a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5aa:	f7f5 fe97 	bl	80002dc <__adddf3>
 800a5ae:	4604      	mov	r4, r0
 800a5b0:	4630      	mov	r0, r6
 800a5b2:	460d      	mov	r5, r1
 800a5b4:	f7f5 ffde 	bl	8000574 <__aeabi_i2d>
 800a5b8:	a365      	add	r3, pc, #404	@ (adr r3, 800a750 <_dtoa_r+0x2c0>)
 800a5ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5be:	f7f6 f843 	bl	8000648 <__aeabi_dmul>
 800a5c2:	4602      	mov	r2, r0
 800a5c4:	460b      	mov	r3, r1
 800a5c6:	4620      	mov	r0, r4
 800a5c8:	4629      	mov	r1, r5
 800a5ca:	f7f5 fe87 	bl	80002dc <__adddf3>
 800a5ce:	4604      	mov	r4, r0
 800a5d0:	460d      	mov	r5, r1
 800a5d2:	f7f6 fae9 	bl	8000ba8 <__aeabi_d2iz>
 800a5d6:	2200      	movs	r2, #0
 800a5d8:	4607      	mov	r7, r0
 800a5da:	2300      	movs	r3, #0
 800a5dc:	4620      	mov	r0, r4
 800a5de:	4629      	mov	r1, r5
 800a5e0:	f7f6 faa4 	bl	8000b2c <__aeabi_dcmplt>
 800a5e4:	b140      	cbz	r0, 800a5f8 <_dtoa_r+0x168>
 800a5e6:	4638      	mov	r0, r7
 800a5e8:	f7f5 ffc4 	bl	8000574 <__aeabi_i2d>
 800a5ec:	4622      	mov	r2, r4
 800a5ee:	462b      	mov	r3, r5
 800a5f0:	f7f6 fa92 	bl	8000b18 <__aeabi_dcmpeq>
 800a5f4:	b900      	cbnz	r0, 800a5f8 <_dtoa_r+0x168>
 800a5f6:	3f01      	subs	r7, #1
 800a5f8:	2f16      	cmp	r7, #22
 800a5fa:	d851      	bhi.n	800a6a0 <_dtoa_r+0x210>
 800a5fc:	4b5b      	ldr	r3, [pc, #364]	@ (800a76c <_dtoa_r+0x2dc>)
 800a5fe:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a602:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a606:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a60a:	f7f6 fa8f 	bl	8000b2c <__aeabi_dcmplt>
 800a60e:	2800      	cmp	r0, #0
 800a610:	d048      	beq.n	800a6a4 <_dtoa_r+0x214>
 800a612:	3f01      	subs	r7, #1
 800a614:	2300      	movs	r3, #0
 800a616:	9312      	str	r3, [sp, #72]	@ 0x48
 800a618:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a61a:	1b9b      	subs	r3, r3, r6
 800a61c:	1e5a      	subs	r2, r3, #1
 800a61e:	bf44      	itt	mi
 800a620:	f1c3 0801 	rsbmi	r8, r3, #1
 800a624:	2300      	movmi	r3, #0
 800a626:	9208      	str	r2, [sp, #32]
 800a628:	bf54      	ite	pl
 800a62a:	f04f 0800 	movpl.w	r8, #0
 800a62e:	9308      	strmi	r3, [sp, #32]
 800a630:	2f00      	cmp	r7, #0
 800a632:	db39      	blt.n	800a6a8 <_dtoa_r+0x218>
 800a634:	9b08      	ldr	r3, [sp, #32]
 800a636:	970f      	str	r7, [sp, #60]	@ 0x3c
 800a638:	443b      	add	r3, r7
 800a63a:	9308      	str	r3, [sp, #32]
 800a63c:	2300      	movs	r3, #0
 800a63e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a640:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a642:	2b09      	cmp	r3, #9
 800a644:	d864      	bhi.n	800a710 <_dtoa_r+0x280>
 800a646:	2b05      	cmp	r3, #5
 800a648:	bfc4      	itt	gt
 800a64a:	3b04      	subgt	r3, #4
 800a64c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800a64e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a650:	f1a3 0302 	sub.w	r3, r3, #2
 800a654:	bfcc      	ite	gt
 800a656:	2400      	movgt	r4, #0
 800a658:	2401      	movle	r4, #1
 800a65a:	2b03      	cmp	r3, #3
 800a65c:	d863      	bhi.n	800a726 <_dtoa_r+0x296>
 800a65e:	e8df f003 	tbb	[pc, r3]
 800a662:	372a      	.short	0x372a
 800a664:	5535      	.short	0x5535
 800a666:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800a66a:	441e      	add	r6, r3
 800a66c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800a670:	2b20      	cmp	r3, #32
 800a672:	bfc1      	itttt	gt
 800a674:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800a678:	409f      	lslgt	r7, r3
 800a67a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800a67e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800a682:	bfd6      	itet	le
 800a684:	f1c3 0320 	rsble	r3, r3, #32
 800a688:	ea47 0003 	orrgt.w	r0, r7, r3
 800a68c:	fa04 f003 	lslle.w	r0, r4, r3
 800a690:	f7f5 ff60 	bl	8000554 <__aeabi_ui2d>
 800a694:	2201      	movs	r2, #1
 800a696:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800a69a:	3e01      	subs	r6, #1
 800a69c:	9214      	str	r2, [sp, #80]	@ 0x50
 800a69e:	e777      	b.n	800a590 <_dtoa_r+0x100>
 800a6a0:	2301      	movs	r3, #1
 800a6a2:	e7b8      	b.n	800a616 <_dtoa_r+0x186>
 800a6a4:	9012      	str	r0, [sp, #72]	@ 0x48
 800a6a6:	e7b7      	b.n	800a618 <_dtoa_r+0x188>
 800a6a8:	427b      	negs	r3, r7
 800a6aa:	930a      	str	r3, [sp, #40]	@ 0x28
 800a6ac:	2300      	movs	r3, #0
 800a6ae:	eba8 0807 	sub.w	r8, r8, r7
 800a6b2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a6b4:	e7c4      	b.n	800a640 <_dtoa_r+0x1b0>
 800a6b6:	2300      	movs	r3, #0
 800a6b8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a6ba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	dc35      	bgt.n	800a72c <_dtoa_r+0x29c>
 800a6c0:	2301      	movs	r3, #1
 800a6c2:	9300      	str	r3, [sp, #0]
 800a6c4:	9307      	str	r3, [sp, #28]
 800a6c6:	461a      	mov	r2, r3
 800a6c8:	920e      	str	r2, [sp, #56]	@ 0x38
 800a6ca:	e00b      	b.n	800a6e4 <_dtoa_r+0x254>
 800a6cc:	2301      	movs	r3, #1
 800a6ce:	e7f3      	b.n	800a6b8 <_dtoa_r+0x228>
 800a6d0:	2300      	movs	r3, #0
 800a6d2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a6d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a6d6:	18fb      	adds	r3, r7, r3
 800a6d8:	9300      	str	r3, [sp, #0]
 800a6da:	3301      	adds	r3, #1
 800a6dc:	2b01      	cmp	r3, #1
 800a6de:	9307      	str	r3, [sp, #28]
 800a6e0:	bfb8      	it	lt
 800a6e2:	2301      	movlt	r3, #1
 800a6e4:	f8db 001c 	ldr.w	r0, [fp, #28]
 800a6e8:	2100      	movs	r1, #0
 800a6ea:	2204      	movs	r2, #4
 800a6ec:	f102 0514 	add.w	r5, r2, #20
 800a6f0:	429d      	cmp	r5, r3
 800a6f2:	d91f      	bls.n	800a734 <_dtoa_r+0x2a4>
 800a6f4:	6041      	str	r1, [r0, #4]
 800a6f6:	4658      	mov	r0, fp
 800a6f8:	f001 f8da 	bl	800b8b0 <_Balloc>
 800a6fc:	4682      	mov	sl, r0
 800a6fe:	2800      	cmp	r0, #0
 800a700:	d13c      	bne.n	800a77c <_dtoa_r+0x2ec>
 800a702:	4b1b      	ldr	r3, [pc, #108]	@ (800a770 <_dtoa_r+0x2e0>)
 800a704:	4602      	mov	r2, r0
 800a706:	f240 11af 	movw	r1, #431	@ 0x1af
 800a70a:	e6d8      	b.n	800a4be <_dtoa_r+0x2e>
 800a70c:	2301      	movs	r3, #1
 800a70e:	e7e0      	b.n	800a6d2 <_dtoa_r+0x242>
 800a710:	2401      	movs	r4, #1
 800a712:	2300      	movs	r3, #0
 800a714:	9309      	str	r3, [sp, #36]	@ 0x24
 800a716:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a718:	f04f 33ff 	mov.w	r3, #4294967295
 800a71c:	9300      	str	r3, [sp, #0]
 800a71e:	9307      	str	r3, [sp, #28]
 800a720:	2200      	movs	r2, #0
 800a722:	2312      	movs	r3, #18
 800a724:	e7d0      	b.n	800a6c8 <_dtoa_r+0x238>
 800a726:	2301      	movs	r3, #1
 800a728:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a72a:	e7f5      	b.n	800a718 <_dtoa_r+0x288>
 800a72c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a72e:	9300      	str	r3, [sp, #0]
 800a730:	9307      	str	r3, [sp, #28]
 800a732:	e7d7      	b.n	800a6e4 <_dtoa_r+0x254>
 800a734:	3101      	adds	r1, #1
 800a736:	0052      	lsls	r2, r2, #1
 800a738:	e7d8      	b.n	800a6ec <_dtoa_r+0x25c>
 800a73a:	bf00      	nop
 800a73c:	f3af 8000 	nop.w
 800a740:	636f4361 	.word	0x636f4361
 800a744:	3fd287a7 	.word	0x3fd287a7
 800a748:	8b60c8b3 	.word	0x8b60c8b3
 800a74c:	3fc68a28 	.word	0x3fc68a28
 800a750:	509f79fb 	.word	0x509f79fb
 800a754:	3fd34413 	.word	0x3fd34413
 800a758:	0800cdfe 	.word	0x0800cdfe
 800a75c:	0800ce15 	.word	0x0800ce15
 800a760:	7ff00000 	.word	0x7ff00000
 800a764:	0800cdc1 	.word	0x0800cdc1
 800a768:	3ff80000 	.word	0x3ff80000
 800a76c:	0800cf70 	.word	0x0800cf70
 800a770:	0800ce6d 	.word	0x0800ce6d
 800a774:	0800cdfa 	.word	0x0800cdfa
 800a778:	0800cdc0 	.word	0x0800cdc0
 800a77c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a780:	6018      	str	r0, [r3, #0]
 800a782:	9b07      	ldr	r3, [sp, #28]
 800a784:	2b0e      	cmp	r3, #14
 800a786:	f200 80a4 	bhi.w	800a8d2 <_dtoa_r+0x442>
 800a78a:	2c00      	cmp	r4, #0
 800a78c:	f000 80a1 	beq.w	800a8d2 <_dtoa_r+0x442>
 800a790:	2f00      	cmp	r7, #0
 800a792:	dd33      	ble.n	800a7fc <_dtoa_r+0x36c>
 800a794:	4bad      	ldr	r3, [pc, #692]	@ (800aa4c <_dtoa_r+0x5bc>)
 800a796:	f007 020f 	and.w	r2, r7, #15
 800a79a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a79e:	ed93 7b00 	vldr	d7, [r3]
 800a7a2:	05f8      	lsls	r0, r7, #23
 800a7a4:	ed8d 7b04 	vstr	d7, [sp, #16]
 800a7a8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800a7ac:	d516      	bpl.n	800a7dc <_dtoa_r+0x34c>
 800a7ae:	4ba8      	ldr	r3, [pc, #672]	@ (800aa50 <_dtoa_r+0x5c0>)
 800a7b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a7b4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a7b8:	f7f6 f870 	bl	800089c <__aeabi_ddiv>
 800a7bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a7c0:	f004 040f 	and.w	r4, r4, #15
 800a7c4:	2603      	movs	r6, #3
 800a7c6:	4da2      	ldr	r5, [pc, #648]	@ (800aa50 <_dtoa_r+0x5c0>)
 800a7c8:	b954      	cbnz	r4, 800a7e0 <_dtoa_r+0x350>
 800a7ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a7ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a7d2:	f7f6 f863 	bl	800089c <__aeabi_ddiv>
 800a7d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a7da:	e028      	b.n	800a82e <_dtoa_r+0x39e>
 800a7dc:	2602      	movs	r6, #2
 800a7de:	e7f2      	b.n	800a7c6 <_dtoa_r+0x336>
 800a7e0:	07e1      	lsls	r1, r4, #31
 800a7e2:	d508      	bpl.n	800a7f6 <_dtoa_r+0x366>
 800a7e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a7e8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a7ec:	f7f5 ff2c 	bl	8000648 <__aeabi_dmul>
 800a7f0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a7f4:	3601      	adds	r6, #1
 800a7f6:	1064      	asrs	r4, r4, #1
 800a7f8:	3508      	adds	r5, #8
 800a7fa:	e7e5      	b.n	800a7c8 <_dtoa_r+0x338>
 800a7fc:	f000 80d2 	beq.w	800a9a4 <_dtoa_r+0x514>
 800a800:	427c      	negs	r4, r7
 800a802:	4b92      	ldr	r3, [pc, #584]	@ (800aa4c <_dtoa_r+0x5bc>)
 800a804:	4d92      	ldr	r5, [pc, #584]	@ (800aa50 <_dtoa_r+0x5c0>)
 800a806:	f004 020f 	and.w	r2, r4, #15
 800a80a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a80e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a812:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a816:	f7f5 ff17 	bl	8000648 <__aeabi_dmul>
 800a81a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a81e:	1124      	asrs	r4, r4, #4
 800a820:	2300      	movs	r3, #0
 800a822:	2602      	movs	r6, #2
 800a824:	2c00      	cmp	r4, #0
 800a826:	f040 80b2 	bne.w	800a98e <_dtoa_r+0x4fe>
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d1d3      	bne.n	800a7d6 <_dtoa_r+0x346>
 800a82e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a830:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a834:	2b00      	cmp	r3, #0
 800a836:	f000 80b7 	beq.w	800a9a8 <_dtoa_r+0x518>
 800a83a:	4b86      	ldr	r3, [pc, #536]	@ (800aa54 <_dtoa_r+0x5c4>)
 800a83c:	2200      	movs	r2, #0
 800a83e:	4620      	mov	r0, r4
 800a840:	4629      	mov	r1, r5
 800a842:	f7f6 f973 	bl	8000b2c <__aeabi_dcmplt>
 800a846:	2800      	cmp	r0, #0
 800a848:	f000 80ae 	beq.w	800a9a8 <_dtoa_r+0x518>
 800a84c:	9b07      	ldr	r3, [sp, #28]
 800a84e:	2b00      	cmp	r3, #0
 800a850:	f000 80aa 	beq.w	800a9a8 <_dtoa_r+0x518>
 800a854:	9b00      	ldr	r3, [sp, #0]
 800a856:	2b00      	cmp	r3, #0
 800a858:	dd37      	ble.n	800a8ca <_dtoa_r+0x43a>
 800a85a:	1e7b      	subs	r3, r7, #1
 800a85c:	9304      	str	r3, [sp, #16]
 800a85e:	4620      	mov	r0, r4
 800a860:	4b7d      	ldr	r3, [pc, #500]	@ (800aa58 <_dtoa_r+0x5c8>)
 800a862:	2200      	movs	r2, #0
 800a864:	4629      	mov	r1, r5
 800a866:	f7f5 feef 	bl	8000648 <__aeabi_dmul>
 800a86a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a86e:	9c00      	ldr	r4, [sp, #0]
 800a870:	3601      	adds	r6, #1
 800a872:	4630      	mov	r0, r6
 800a874:	f7f5 fe7e 	bl	8000574 <__aeabi_i2d>
 800a878:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a87c:	f7f5 fee4 	bl	8000648 <__aeabi_dmul>
 800a880:	4b76      	ldr	r3, [pc, #472]	@ (800aa5c <_dtoa_r+0x5cc>)
 800a882:	2200      	movs	r2, #0
 800a884:	f7f5 fd2a 	bl	80002dc <__adddf3>
 800a888:	4605      	mov	r5, r0
 800a88a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800a88e:	2c00      	cmp	r4, #0
 800a890:	f040 808d 	bne.w	800a9ae <_dtoa_r+0x51e>
 800a894:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a898:	4b71      	ldr	r3, [pc, #452]	@ (800aa60 <_dtoa_r+0x5d0>)
 800a89a:	2200      	movs	r2, #0
 800a89c:	f7f5 fd1c 	bl	80002d8 <__aeabi_dsub>
 800a8a0:	4602      	mov	r2, r0
 800a8a2:	460b      	mov	r3, r1
 800a8a4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a8a8:	462a      	mov	r2, r5
 800a8aa:	4633      	mov	r3, r6
 800a8ac:	f7f6 f95c 	bl	8000b68 <__aeabi_dcmpgt>
 800a8b0:	2800      	cmp	r0, #0
 800a8b2:	f040 828b 	bne.w	800adcc <_dtoa_r+0x93c>
 800a8b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a8ba:	462a      	mov	r2, r5
 800a8bc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a8c0:	f7f6 f934 	bl	8000b2c <__aeabi_dcmplt>
 800a8c4:	2800      	cmp	r0, #0
 800a8c6:	f040 8128 	bne.w	800ab1a <_dtoa_r+0x68a>
 800a8ca:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800a8ce:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800a8d2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	f2c0 815a 	blt.w	800ab8e <_dtoa_r+0x6fe>
 800a8da:	2f0e      	cmp	r7, #14
 800a8dc:	f300 8157 	bgt.w	800ab8e <_dtoa_r+0x6fe>
 800a8e0:	4b5a      	ldr	r3, [pc, #360]	@ (800aa4c <_dtoa_r+0x5bc>)
 800a8e2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a8e6:	ed93 7b00 	vldr	d7, [r3]
 800a8ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	ed8d 7b00 	vstr	d7, [sp]
 800a8f2:	da03      	bge.n	800a8fc <_dtoa_r+0x46c>
 800a8f4:	9b07      	ldr	r3, [sp, #28]
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	f340 8101 	ble.w	800aafe <_dtoa_r+0x66e>
 800a8fc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a900:	4656      	mov	r6, sl
 800a902:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a906:	4620      	mov	r0, r4
 800a908:	4629      	mov	r1, r5
 800a90a:	f7f5 ffc7 	bl	800089c <__aeabi_ddiv>
 800a90e:	f7f6 f94b 	bl	8000ba8 <__aeabi_d2iz>
 800a912:	4680      	mov	r8, r0
 800a914:	f7f5 fe2e 	bl	8000574 <__aeabi_i2d>
 800a918:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a91c:	f7f5 fe94 	bl	8000648 <__aeabi_dmul>
 800a920:	4602      	mov	r2, r0
 800a922:	460b      	mov	r3, r1
 800a924:	4620      	mov	r0, r4
 800a926:	4629      	mov	r1, r5
 800a928:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800a92c:	f7f5 fcd4 	bl	80002d8 <__aeabi_dsub>
 800a930:	f806 4b01 	strb.w	r4, [r6], #1
 800a934:	9d07      	ldr	r5, [sp, #28]
 800a936:	eba6 040a 	sub.w	r4, r6, sl
 800a93a:	42a5      	cmp	r5, r4
 800a93c:	4602      	mov	r2, r0
 800a93e:	460b      	mov	r3, r1
 800a940:	f040 8117 	bne.w	800ab72 <_dtoa_r+0x6e2>
 800a944:	f7f5 fcca 	bl	80002dc <__adddf3>
 800a948:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a94c:	4604      	mov	r4, r0
 800a94e:	460d      	mov	r5, r1
 800a950:	f7f6 f90a 	bl	8000b68 <__aeabi_dcmpgt>
 800a954:	2800      	cmp	r0, #0
 800a956:	f040 80f9 	bne.w	800ab4c <_dtoa_r+0x6bc>
 800a95a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a95e:	4620      	mov	r0, r4
 800a960:	4629      	mov	r1, r5
 800a962:	f7f6 f8d9 	bl	8000b18 <__aeabi_dcmpeq>
 800a966:	b118      	cbz	r0, 800a970 <_dtoa_r+0x4e0>
 800a968:	f018 0f01 	tst.w	r8, #1
 800a96c:	f040 80ee 	bne.w	800ab4c <_dtoa_r+0x6bc>
 800a970:	4649      	mov	r1, r9
 800a972:	4658      	mov	r0, fp
 800a974:	f000 ffdc 	bl	800b930 <_Bfree>
 800a978:	2300      	movs	r3, #0
 800a97a:	7033      	strb	r3, [r6, #0]
 800a97c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a97e:	3701      	adds	r7, #1
 800a980:	601f      	str	r7, [r3, #0]
 800a982:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a984:	2b00      	cmp	r3, #0
 800a986:	f000 831d 	beq.w	800afc4 <_dtoa_r+0xb34>
 800a98a:	601e      	str	r6, [r3, #0]
 800a98c:	e31a      	b.n	800afc4 <_dtoa_r+0xb34>
 800a98e:	07e2      	lsls	r2, r4, #31
 800a990:	d505      	bpl.n	800a99e <_dtoa_r+0x50e>
 800a992:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a996:	f7f5 fe57 	bl	8000648 <__aeabi_dmul>
 800a99a:	3601      	adds	r6, #1
 800a99c:	2301      	movs	r3, #1
 800a99e:	1064      	asrs	r4, r4, #1
 800a9a0:	3508      	adds	r5, #8
 800a9a2:	e73f      	b.n	800a824 <_dtoa_r+0x394>
 800a9a4:	2602      	movs	r6, #2
 800a9a6:	e742      	b.n	800a82e <_dtoa_r+0x39e>
 800a9a8:	9c07      	ldr	r4, [sp, #28]
 800a9aa:	9704      	str	r7, [sp, #16]
 800a9ac:	e761      	b.n	800a872 <_dtoa_r+0x3e2>
 800a9ae:	4b27      	ldr	r3, [pc, #156]	@ (800aa4c <_dtoa_r+0x5bc>)
 800a9b0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a9b2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a9b6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a9ba:	4454      	add	r4, sl
 800a9bc:	2900      	cmp	r1, #0
 800a9be:	d053      	beq.n	800aa68 <_dtoa_r+0x5d8>
 800a9c0:	4928      	ldr	r1, [pc, #160]	@ (800aa64 <_dtoa_r+0x5d4>)
 800a9c2:	2000      	movs	r0, #0
 800a9c4:	f7f5 ff6a 	bl	800089c <__aeabi_ddiv>
 800a9c8:	4633      	mov	r3, r6
 800a9ca:	462a      	mov	r2, r5
 800a9cc:	f7f5 fc84 	bl	80002d8 <__aeabi_dsub>
 800a9d0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a9d4:	4656      	mov	r6, sl
 800a9d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a9da:	f7f6 f8e5 	bl	8000ba8 <__aeabi_d2iz>
 800a9de:	4605      	mov	r5, r0
 800a9e0:	f7f5 fdc8 	bl	8000574 <__aeabi_i2d>
 800a9e4:	4602      	mov	r2, r0
 800a9e6:	460b      	mov	r3, r1
 800a9e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a9ec:	f7f5 fc74 	bl	80002d8 <__aeabi_dsub>
 800a9f0:	3530      	adds	r5, #48	@ 0x30
 800a9f2:	4602      	mov	r2, r0
 800a9f4:	460b      	mov	r3, r1
 800a9f6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a9fa:	f806 5b01 	strb.w	r5, [r6], #1
 800a9fe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800aa02:	f7f6 f893 	bl	8000b2c <__aeabi_dcmplt>
 800aa06:	2800      	cmp	r0, #0
 800aa08:	d171      	bne.n	800aaee <_dtoa_r+0x65e>
 800aa0a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800aa0e:	4911      	ldr	r1, [pc, #68]	@ (800aa54 <_dtoa_r+0x5c4>)
 800aa10:	2000      	movs	r0, #0
 800aa12:	f7f5 fc61 	bl	80002d8 <__aeabi_dsub>
 800aa16:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800aa1a:	f7f6 f887 	bl	8000b2c <__aeabi_dcmplt>
 800aa1e:	2800      	cmp	r0, #0
 800aa20:	f040 8095 	bne.w	800ab4e <_dtoa_r+0x6be>
 800aa24:	42a6      	cmp	r6, r4
 800aa26:	f43f af50 	beq.w	800a8ca <_dtoa_r+0x43a>
 800aa2a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800aa2e:	4b0a      	ldr	r3, [pc, #40]	@ (800aa58 <_dtoa_r+0x5c8>)
 800aa30:	2200      	movs	r2, #0
 800aa32:	f7f5 fe09 	bl	8000648 <__aeabi_dmul>
 800aa36:	4b08      	ldr	r3, [pc, #32]	@ (800aa58 <_dtoa_r+0x5c8>)
 800aa38:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800aa3c:	2200      	movs	r2, #0
 800aa3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aa42:	f7f5 fe01 	bl	8000648 <__aeabi_dmul>
 800aa46:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aa4a:	e7c4      	b.n	800a9d6 <_dtoa_r+0x546>
 800aa4c:	0800cf70 	.word	0x0800cf70
 800aa50:	0800cf48 	.word	0x0800cf48
 800aa54:	3ff00000 	.word	0x3ff00000
 800aa58:	40240000 	.word	0x40240000
 800aa5c:	401c0000 	.word	0x401c0000
 800aa60:	40140000 	.word	0x40140000
 800aa64:	3fe00000 	.word	0x3fe00000
 800aa68:	4631      	mov	r1, r6
 800aa6a:	4628      	mov	r0, r5
 800aa6c:	f7f5 fdec 	bl	8000648 <__aeabi_dmul>
 800aa70:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800aa74:	9415      	str	r4, [sp, #84]	@ 0x54
 800aa76:	4656      	mov	r6, sl
 800aa78:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aa7c:	f7f6 f894 	bl	8000ba8 <__aeabi_d2iz>
 800aa80:	4605      	mov	r5, r0
 800aa82:	f7f5 fd77 	bl	8000574 <__aeabi_i2d>
 800aa86:	4602      	mov	r2, r0
 800aa88:	460b      	mov	r3, r1
 800aa8a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aa8e:	f7f5 fc23 	bl	80002d8 <__aeabi_dsub>
 800aa92:	3530      	adds	r5, #48	@ 0x30
 800aa94:	f806 5b01 	strb.w	r5, [r6], #1
 800aa98:	4602      	mov	r2, r0
 800aa9a:	460b      	mov	r3, r1
 800aa9c:	42a6      	cmp	r6, r4
 800aa9e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800aaa2:	f04f 0200 	mov.w	r2, #0
 800aaa6:	d124      	bne.n	800aaf2 <_dtoa_r+0x662>
 800aaa8:	4bac      	ldr	r3, [pc, #688]	@ (800ad5c <_dtoa_r+0x8cc>)
 800aaaa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800aaae:	f7f5 fc15 	bl	80002dc <__adddf3>
 800aab2:	4602      	mov	r2, r0
 800aab4:	460b      	mov	r3, r1
 800aab6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aaba:	f7f6 f855 	bl	8000b68 <__aeabi_dcmpgt>
 800aabe:	2800      	cmp	r0, #0
 800aac0:	d145      	bne.n	800ab4e <_dtoa_r+0x6be>
 800aac2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800aac6:	49a5      	ldr	r1, [pc, #660]	@ (800ad5c <_dtoa_r+0x8cc>)
 800aac8:	2000      	movs	r0, #0
 800aaca:	f7f5 fc05 	bl	80002d8 <__aeabi_dsub>
 800aace:	4602      	mov	r2, r0
 800aad0:	460b      	mov	r3, r1
 800aad2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aad6:	f7f6 f829 	bl	8000b2c <__aeabi_dcmplt>
 800aada:	2800      	cmp	r0, #0
 800aadc:	f43f aef5 	beq.w	800a8ca <_dtoa_r+0x43a>
 800aae0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800aae2:	1e73      	subs	r3, r6, #1
 800aae4:	9315      	str	r3, [sp, #84]	@ 0x54
 800aae6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800aaea:	2b30      	cmp	r3, #48	@ 0x30
 800aaec:	d0f8      	beq.n	800aae0 <_dtoa_r+0x650>
 800aaee:	9f04      	ldr	r7, [sp, #16]
 800aaf0:	e73e      	b.n	800a970 <_dtoa_r+0x4e0>
 800aaf2:	4b9b      	ldr	r3, [pc, #620]	@ (800ad60 <_dtoa_r+0x8d0>)
 800aaf4:	f7f5 fda8 	bl	8000648 <__aeabi_dmul>
 800aaf8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aafc:	e7bc      	b.n	800aa78 <_dtoa_r+0x5e8>
 800aafe:	d10c      	bne.n	800ab1a <_dtoa_r+0x68a>
 800ab00:	4b98      	ldr	r3, [pc, #608]	@ (800ad64 <_dtoa_r+0x8d4>)
 800ab02:	2200      	movs	r2, #0
 800ab04:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ab08:	f7f5 fd9e 	bl	8000648 <__aeabi_dmul>
 800ab0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ab10:	f7f6 f820 	bl	8000b54 <__aeabi_dcmpge>
 800ab14:	2800      	cmp	r0, #0
 800ab16:	f000 8157 	beq.w	800adc8 <_dtoa_r+0x938>
 800ab1a:	2400      	movs	r4, #0
 800ab1c:	4625      	mov	r5, r4
 800ab1e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ab20:	43db      	mvns	r3, r3
 800ab22:	9304      	str	r3, [sp, #16]
 800ab24:	4656      	mov	r6, sl
 800ab26:	2700      	movs	r7, #0
 800ab28:	4621      	mov	r1, r4
 800ab2a:	4658      	mov	r0, fp
 800ab2c:	f000 ff00 	bl	800b930 <_Bfree>
 800ab30:	2d00      	cmp	r5, #0
 800ab32:	d0dc      	beq.n	800aaee <_dtoa_r+0x65e>
 800ab34:	b12f      	cbz	r7, 800ab42 <_dtoa_r+0x6b2>
 800ab36:	42af      	cmp	r7, r5
 800ab38:	d003      	beq.n	800ab42 <_dtoa_r+0x6b2>
 800ab3a:	4639      	mov	r1, r7
 800ab3c:	4658      	mov	r0, fp
 800ab3e:	f000 fef7 	bl	800b930 <_Bfree>
 800ab42:	4629      	mov	r1, r5
 800ab44:	4658      	mov	r0, fp
 800ab46:	f000 fef3 	bl	800b930 <_Bfree>
 800ab4a:	e7d0      	b.n	800aaee <_dtoa_r+0x65e>
 800ab4c:	9704      	str	r7, [sp, #16]
 800ab4e:	4633      	mov	r3, r6
 800ab50:	461e      	mov	r6, r3
 800ab52:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ab56:	2a39      	cmp	r2, #57	@ 0x39
 800ab58:	d107      	bne.n	800ab6a <_dtoa_r+0x6da>
 800ab5a:	459a      	cmp	sl, r3
 800ab5c:	d1f8      	bne.n	800ab50 <_dtoa_r+0x6c0>
 800ab5e:	9a04      	ldr	r2, [sp, #16]
 800ab60:	3201      	adds	r2, #1
 800ab62:	9204      	str	r2, [sp, #16]
 800ab64:	2230      	movs	r2, #48	@ 0x30
 800ab66:	f88a 2000 	strb.w	r2, [sl]
 800ab6a:	781a      	ldrb	r2, [r3, #0]
 800ab6c:	3201      	adds	r2, #1
 800ab6e:	701a      	strb	r2, [r3, #0]
 800ab70:	e7bd      	b.n	800aaee <_dtoa_r+0x65e>
 800ab72:	4b7b      	ldr	r3, [pc, #492]	@ (800ad60 <_dtoa_r+0x8d0>)
 800ab74:	2200      	movs	r2, #0
 800ab76:	f7f5 fd67 	bl	8000648 <__aeabi_dmul>
 800ab7a:	2200      	movs	r2, #0
 800ab7c:	2300      	movs	r3, #0
 800ab7e:	4604      	mov	r4, r0
 800ab80:	460d      	mov	r5, r1
 800ab82:	f7f5 ffc9 	bl	8000b18 <__aeabi_dcmpeq>
 800ab86:	2800      	cmp	r0, #0
 800ab88:	f43f aebb 	beq.w	800a902 <_dtoa_r+0x472>
 800ab8c:	e6f0      	b.n	800a970 <_dtoa_r+0x4e0>
 800ab8e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800ab90:	2a00      	cmp	r2, #0
 800ab92:	f000 80db 	beq.w	800ad4c <_dtoa_r+0x8bc>
 800ab96:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ab98:	2a01      	cmp	r2, #1
 800ab9a:	f300 80bf 	bgt.w	800ad1c <_dtoa_r+0x88c>
 800ab9e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800aba0:	2a00      	cmp	r2, #0
 800aba2:	f000 80b7 	beq.w	800ad14 <_dtoa_r+0x884>
 800aba6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800abaa:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800abac:	4646      	mov	r6, r8
 800abae:	9a08      	ldr	r2, [sp, #32]
 800abb0:	2101      	movs	r1, #1
 800abb2:	441a      	add	r2, r3
 800abb4:	4658      	mov	r0, fp
 800abb6:	4498      	add	r8, r3
 800abb8:	9208      	str	r2, [sp, #32]
 800abba:	f000 ffb7 	bl	800bb2c <__i2b>
 800abbe:	4605      	mov	r5, r0
 800abc0:	b15e      	cbz	r6, 800abda <_dtoa_r+0x74a>
 800abc2:	9b08      	ldr	r3, [sp, #32]
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	dd08      	ble.n	800abda <_dtoa_r+0x74a>
 800abc8:	42b3      	cmp	r3, r6
 800abca:	9a08      	ldr	r2, [sp, #32]
 800abcc:	bfa8      	it	ge
 800abce:	4633      	movge	r3, r6
 800abd0:	eba8 0803 	sub.w	r8, r8, r3
 800abd4:	1af6      	subs	r6, r6, r3
 800abd6:	1ad3      	subs	r3, r2, r3
 800abd8:	9308      	str	r3, [sp, #32]
 800abda:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800abdc:	b1f3      	cbz	r3, 800ac1c <_dtoa_r+0x78c>
 800abde:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	f000 80b7 	beq.w	800ad54 <_dtoa_r+0x8c4>
 800abe6:	b18c      	cbz	r4, 800ac0c <_dtoa_r+0x77c>
 800abe8:	4629      	mov	r1, r5
 800abea:	4622      	mov	r2, r4
 800abec:	4658      	mov	r0, fp
 800abee:	f001 f85d 	bl	800bcac <__pow5mult>
 800abf2:	464a      	mov	r2, r9
 800abf4:	4601      	mov	r1, r0
 800abf6:	4605      	mov	r5, r0
 800abf8:	4658      	mov	r0, fp
 800abfa:	f000 ffad 	bl	800bb58 <__multiply>
 800abfe:	4649      	mov	r1, r9
 800ac00:	9004      	str	r0, [sp, #16]
 800ac02:	4658      	mov	r0, fp
 800ac04:	f000 fe94 	bl	800b930 <_Bfree>
 800ac08:	9b04      	ldr	r3, [sp, #16]
 800ac0a:	4699      	mov	r9, r3
 800ac0c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ac0e:	1b1a      	subs	r2, r3, r4
 800ac10:	d004      	beq.n	800ac1c <_dtoa_r+0x78c>
 800ac12:	4649      	mov	r1, r9
 800ac14:	4658      	mov	r0, fp
 800ac16:	f001 f849 	bl	800bcac <__pow5mult>
 800ac1a:	4681      	mov	r9, r0
 800ac1c:	2101      	movs	r1, #1
 800ac1e:	4658      	mov	r0, fp
 800ac20:	f000 ff84 	bl	800bb2c <__i2b>
 800ac24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ac26:	4604      	mov	r4, r0
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	f000 81cf 	beq.w	800afcc <_dtoa_r+0xb3c>
 800ac2e:	461a      	mov	r2, r3
 800ac30:	4601      	mov	r1, r0
 800ac32:	4658      	mov	r0, fp
 800ac34:	f001 f83a 	bl	800bcac <__pow5mult>
 800ac38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac3a:	2b01      	cmp	r3, #1
 800ac3c:	4604      	mov	r4, r0
 800ac3e:	f300 8095 	bgt.w	800ad6c <_dtoa_r+0x8dc>
 800ac42:	9b02      	ldr	r3, [sp, #8]
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	f040 8087 	bne.w	800ad58 <_dtoa_r+0x8c8>
 800ac4a:	9b03      	ldr	r3, [sp, #12]
 800ac4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	f040 8089 	bne.w	800ad68 <_dtoa_r+0x8d8>
 800ac56:	9b03      	ldr	r3, [sp, #12]
 800ac58:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ac5c:	0d1b      	lsrs	r3, r3, #20
 800ac5e:	051b      	lsls	r3, r3, #20
 800ac60:	b12b      	cbz	r3, 800ac6e <_dtoa_r+0x7de>
 800ac62:	9b08      	ldr	r3, [sp, #32]
 800ac64:	3301      	adds	r3, #1
 800ac66:	9308      	str	r3, [sp, #32]
 800ac68:	f108 0801 	add.w	r8, r8, #1
 800ac6c:	2301      	movs	r3, #1
 800ac6e:	930a      	str	r3, [sp, #40]	@ 0x28
 800ac70:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	f000 81b0 	beq.w	800afd8 <_dtoa_r+0xb48>
 800ac78:	6923      	ldr	r3, [r4, #16]
 800ac7a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ac7e:	6918      	ldr	r0, [r3, #16]
 800ac80:	f000 ff08 	bl	800ba94 <__hi0bits>
 800ac84:	f1c0 0020 	rsb	r0, r0, #32
 800ac88:	9b08      	ldr	r3, [sp, #32]
 800ac8a:	4418      	add	r0, r3
 800ac8c:	f010 001f 	ands.w	r0, r0, #31
 800ac90:	d077      	beq.n	800ad82 <_dtoa_r+0x8f2>
 800ac92:	f1c0 0320 	rsb	r3, r0, #32
 800ac96:	2b04      	cmp	r3, #4
 800ac98:	dd6b      	ble.n	800ad72 <_dtoa_r+0x8e2>
 800ac9a:	9b08      	ldr	r3, [sp, #32]
 800ac9c:	f1c0 001c 	rsb	r0, r0, #28
 800aca0:	4403      	add	r3, r0
 800aca2:	4480      	add	r8, r0
 800aca4:	4406      	add	r6, r0
 800aca6:	9308      	str	r3, [sp, #32]
 800aca8:	f1b8 0f00 	cmp.w	r8, #0
 800acac:	dd05      	ble.n	800acba <_dtoa_r+0x82a>
 800acae:	4649      	mov	r1, r9
 800acb0:	4642      	mov	r2, r8
 800acb2:	4658      	mov	r0, fp
 800acb4:	f001 f854 	bl	800bd60 <__lshift>
 800acb8:	4681      	mov	r9, r0
 800acba:	9b08      	ldr	r3, [sp, #32]
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	dd05      	ble.n	800accc <_dtoa_r+0x83c>
 800acc0:	4621      	mov	r1, r4
 800acc2:	461a      	mov	r2, r3
 800acc4:	4658      	mov	r0, fp
 800acc6:	f001 f84b 	bl	800bd60 <__lshift>
 800acca:	4604      	mov	r4, r0
 800accc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d059      	beq.n	800ad86 <_dtoa_r+0x8f6>
 800acd2:	4621      	mov	r1, r4
 800acd4:	4648      	mov	r0, r9
 800acd6:	f001 f8af 	bl	800be38 <__mcmp>
 800acda:	2800      	cmp	r0, #0
 800acdc:	da53      	bge.n	800ad86 <_dtoa_r+0x8f6>
 800acde:	1e7b      	subs	r3, r7, #1
 800ace0:	9304      	str	r3, [sp, #16]
 800ace2:	4649      	mov	r1, r9
 800ace4:	2300      	movs	r3, #0
 800ace6:	220a      	movs	r2, #10
 800ace8:	4658      	mov	r0, fp
 800acea:	f000 fe43 	bl	800b974 <__multadd>
 800acee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800acf0:	4681      	mov	r9, r0
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	f000 8172 	beq.w	800afdc <_dtoa_r+0xb4c>
 800acf8:	2300      	movs	r3, #0
 800acfa:	4629      	mov	r1, r5
 800acfc:	220a      	movs	r2, #10
 800acfe:	4658      	mov	r0, fp
 800ad00:	f000 fe38 	bl	800b974 <__multadd>
 800ad04:	9b00      	ldr	r3, [sp, #0]
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	4605      	mov	r5, r0
 800ad0a:	dc67      	bgt.n	800addc <_dtoa_r+0x94c>
 800ad0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad0e:	2b02      	cmp	r3, #2
 800ad10:	dc41      	bgt.n	800ad96 <_dtoa_r+0x906>
 800ad12:	e063      	b.n	800addc <_dtoa_r+0x94c>
 800ad14:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800ad16:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800ad1a:	e746      	b.n	800abaa <_dtoa_r+0x71a>
 800ad1c:	9b07      	ldr	r3, [sp, #28]
 800ad1e:	1e5c      	subs	r4, r3, #1
 800ad20:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ad22:	42a3      	cmp	r3, r4
 800ad24:	bfbf      	itttt	lt
 800ad26:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800ad28:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800ad2a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800ad2c:	1ae3      	sublt	r3, r4, r3
 800ad2e:	bfb4      	ite	lt
 800ad30:	18d2      	addlt	r2, r2, r3
 800ad32:	1b1c      	subge	r4, r3, r4
 800ad34:	9b07      	ldr	r3, [sp, #28]
 800ad36:	bfbc      	itt	lt
 800ad38:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800ad3a:	2400      	movlt	r4, #0
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	bfb5      	itete	lt
 800ad40:	eba8 0603 	sublt.w	r6, r8, r3
 800ad44:	9b07      	ldrge	r3, [sp, #28]
 800ad46:	2300      	movlt	r3, #0
 800ad48:	4646      	movge	r6, r8
 800ad4a:	e730      	b.n	800abae <_dtoa_r+0x71e>
 800ad4c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800ad4e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800ad50:	4646      	mov	r6, r8
 800ad52:	e735      	b.n	800abc0 <_dtoa_r+0x730>
 800ad54:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ad56:	e75c      	b.n	800ac12 <_dtoa_r+0x782>
 800ad58:	2300      	movs	r3, #0
 800ad5a:	e788      	b.n	800ac6e <_dtoa_r+0x7de>
 800ad5c:	3fe00000 	.word	0x3fe00000
 800ad60:	40240000 	.word	0x40240000
 800ad64:	40140000 	.word	0x40140000
 800ad68:	9b02      	ldr	r3, [sp, #8]
 800ad6a:	e780      	b.n	800ac6e <_dtoa_r+0x7de>
 800ad6c:	2300      	movs	r3, #0
 800ad6e:	930a      	str	r3, [sp, #40]	@ 0x28
 800ad70:	e782      	b.n	800ac78 <_dtoa_r+0x7e8>
 800ad72:	d099      	beq.n	800aca8 <_dtoa_r+0x818>
 800ad74:	9a08      	ldr	r2, [sp, #32]
 800ad76:	331c      	adds	r3, #28
 800ad78:	441a      	add	r2, r3
 800ad7a:	4498      	add	r8, r3
 800ad7c:	441e      	add	r6, r3
 800ad7e:	9208      	str	r2, [sp, #32]
 800ad80:	e792      	b.n	800aca8 <_dtoa_r+0x818>
 800ad82:	4603      	mov	r3, r0
 800ad84:	e7f6      	b.n	800ad74 <_dtoa_r+0x8e4>
 800ad86:	9b07      	ldr	r3, [sp, #28]
 800ad88:	9704      	str	r7, [sp, #16]
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	dc20      	bgt.n	800add0 <_dtoa_r+0x940>
 800ad8e:	9300      	str	r3, [sp, #0]
 800ad90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad92:	2b02      	cmp	r3, #2
 800ad94:	dd1e      	ble.n	800add4 <_dtoa_r+0x944>
 800ad96:	9b00      	ldr	r3, [sp, #0]
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	f47f aec0 	bne.w	800ab1e <_dtoa_r+0x68e>
 800ad9e:	4621      	mov	r1, r4
 800ada0:	2205      	movs	r2, #5
 800ada2:	4658      	mov	r0, fp
 800ada4:	f000 fde6 	bl	800b974 <__multadd>
 800ada8:	4601      	mov	r1, r0
 800adaa:	4604      	mov	r4, r0
 800adac:	4648      	mov	r0, r9
 800adae:	f001 f843 	bl	800be38 <__mcmp>
 800adb2:	2800      	cmp	r0, #0
 800adb4:	f77f aeb3 	ble.w	800ab1e <_dtoa_r+0x68e>
 800adb8:	4656      	mov	r6, sl
 800adba:	2331      	movs	r3, #49	@ 0x31
 800adbc:	f806 3b01 	strb.w	r3, [r6], #1
 800adc0:	9b04      	ldr	r3, [sp, #16]
 800adc2:	3301      	adds	r3, #1
 800adc4:	9304      	str	r3, [sp, #16]
 800adc6:	e6ae      	b.n	800ab26 <_dtoa_r+0x696>
 800adc8:	9c07      	ldr	r4, [sp, #28]
 800adca:	9704      	str	r7, [sp, #16]
 800adcc:	4625      	mov	r5, r4
 800adce:	e7f3      	b.n	800adb8 <_dtoa_r+0x928>
 800add0:	9b07      	ldr	r3, [sp, #28]
 800add2:	9300      	str	r3, [sp, #0]
 800add4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800add6:	2b00      	cmp	r3, #0
 800add8:	f000 8104 	beq.w	800afe4 <_dtoa_r+0xb54>
 800addc:	2e00      	cmp	r6, #0
 800adde:	dd05      	ble.n	800adec <_dtoa_r+0x95c>
 800ade0:	4629      	mov	r1, r5
 800ade2:	4632      	mov	r2, r6
 800ade4:	4658      	mov	r0, fp
 800ade6:	f000 ffbb 	bl	800bd60 <__lshift>
 800adea:	4605      	mov	r5, r0
 800adec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d05a      	beq.n	800aea8 <_dtoa_r+0xa18>
 800adf2:	6869      	ldr	r1, [r5, #4]
 800adf4:	4658      	mov	r0, fp
 800adf6:	f000 fd5b 	bl	800b8b0 <_Balloc>
 800adfa:	4606      	mov	r6, r0
 800adfc:	b928      	cbnz	r0, 800ae0a <_dtoa_r+0x97a>
 800adfe:	4b84      	ldr	r3, [pc, #528]	@ (800b010 <_dtoa_r+0xb80>)
 800ae00:	4602      	mov	r2, r0
 800ae02:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800ae06:	f7ff bb5a 	b.w	800a4be <_dtoa_r+0x2e>
 800ae0a:	692a      	ldr	r2, [r5, #16]
 800ae0c:	3202      	adds	r2, #2
 800ae0e:	0092      	lsls	r2, r2, #2
 800ae10:	f105 010c 	add.w	r1, r5, #12
 800ae14:	300c      	adds	r0, #12
 800ae16:	f7ff fa94 	bl	800a342 <memcpy>
 800ae1a:	2201      	movs	r2, #1
 800ae1c:	4631      	mov	r1, r6
 800ae1e:	4658      	mov	r0, fp
 800ae20:	f000 ff9e 	bl	800bd60 <__lshift>
 800ae24:	f10a 0301 	add.w	r3, sl, #1
 800ae28:	9307      	str	r3, [sp, #28]
 800ae2a:	9b00      	ldr	r3, [sp, #0]
 800ae2c:	4453      	add	r3, sl
 800ae2e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ae30:	9b02      	ldr	r3, [sp, #8]
 800ae32:	f003 0301 	and.w	r3, r3, #1
 800ae36:	462f      	mov	r7, r5
 800ae38:	930a      	str	r3, [sp, #40]	@ 0x28
 800ae3a:	4605      	mov	r5, r0
 800ae3c:	9b07      	ldr	r3, [sp, #28]
 800ae3e:	4621      	mov	r1, r4
 800ae40:	3b01      	subs	r3, #1
 800ae42:	4648      	mov	r0, r9
 800ae44:	9300      	str	r3, [sp, #0]
 800ae46:	f7ff fa99 	bl	800a37c <quorem>
 800ae4a:	4639      	mov	r1, r7
 800ae4c:	9002      	str	r0, [sp, #8]
 800ae4e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ae52:	4648      	mov	r0, r9
 800ae54:	f000 fff0 	bl	800be38 <__mcmp>
 800ae58:	462a      	mov	r2, r5
 800ae5a:	9008      	str	r0, [sp, #32]
 800ae5c:	4621      	mov	r1, r4
 800ae5e:	4658      	mov	r0, fp
 800ae60:	f001 f806 	bl	800be70 <__mdiff>
 800ae64:	68c2      	ldr	r2, [r0, #12]
 800ae66:	4606      	mov	r6, r0
 800ae68:	bb02      	cbnz	r2, 800aeac <_dtoa_r+0xa1c>
 800ae6a:	4601      	mov	r1, r0
 800ae6c:	4648      	mov	r0, r9
 800ae6e:	f000 ffe3 	bl	800be38 <__mcmp>
 800ae72:	4602      	mov	r2, r0
 800ae74:	4631      	mov	r1, r6
 800ae76:	4658      	mov	r0, fp
 800ae78:	920e      	str	r2, [sp, #56]	@ 0x38
 800ae7a:	f000 fd59 	bl	800b930 <_Bfree>
 800ae7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae80:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ae82:	9e07      	ldr	r6, [sp, #28]
 800ae84:	ea43 0102 	orr.w	r1, r3, r2
 800ae88:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ae8a:	4319      	orrs	r1, r3
 800ae8c:	d110      	bne.n	800aeb0 <_dtoa_r+0xa20>
 800ae8e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ae92:	d029      	beq.n	800aee8 <_dtoa_r+0xa58>
 800ae94:	9b08      	ldr	r3, [sp, #32]
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	dd02      	ble.n	800aea0 <_dtoa_r+0xa10>
 800ae9a:	9b02      	ldr	r3, [sp, #8]
 800ae9c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800aea0:	9b00      	ldr	r3, [sp, #0]
 800aea2:	f883 8000 	strb.w	r8, [r3]
 800aea6:	e63f      	b.n	800ab28 <_dtoa_r+0x698>
 800aea8:	4628      	mov	r0, r5
 800aeaa:	e7bb      	b.n	800ae24 <_dtoa_r+0x994>
 800aeac:	2201      	movs	r2, #1
 800aeae:	e7e1      	b.n	800ae74 <_dtoa_r+0x9e4>
 800aeb0:	9b08      	ldr	r3, [sp, #32]
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	db04      	blt.n	800aec0 <_dtoa_r+0xa30>
 800aeb6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800aeb8:	430b      	orrs	r3, r1
 800aeba:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800aebc:	430b      	orrs	r3, r1
 800aebe:	d120      	bne.n	800af02 <_dtoa_r+0xa72>
 800aec0:	2a00      	cmp	r2, #0
 800aec2:	dded      	ble.n	800aea0 <_dtoa_r+0xa10>
 800aec4:	4649      	mov	r1, r9
 800aec6:	2201      	movs	r2, #1
 800aec8:	4658      	mov	r0, fp
 800aeca:	f000 ff49 	bl	800bd60 <__lshift>
 800aece:	4621      	mov	r1, r4
 800aed0:	4681      	mov	r9, r0
 800aed2:	f000 ffb1 	bl	800be38 <__mcmp>
 800aed6:	2800      	cmp	r0, #0
 800aed8:	dc03      	bgt.n	800aee2 <_dtoa_r+0xa52>
 800aeda:	d1e1      	bne.n	800aea0 <_dtoa_r+0xa10>
 800aedc:	f018 0f01 	tst.w	r8, #1
 800aee0:	d0de      	beq.n	800aea0 <_dtoa_r+0xa10>
 800aee2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800aee6:	d1d8      	bne.n	800ae9a <_dtoa_r+0xa0a>
 800aee8:	9a00      	ldr	r2, [sp, #0]
 800aeea:	2339      	movs	r3, #57	@ 0x39
 800aeec:	7013      	strb	r3, [r2, #0]
 800aeee:	4633      	mov	r3, r6
 800aef0:	461e      	mov	r6, r3
 800aef2:	3b01      	subs	r3, #1
 800aef4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800aef8:	2a39      	cmp	r2, #57	@ 0x39
 800aefa:	d052      	beq.n	800afa2 <_dtoa_r+0xb12>
 800aefc:	3201      	adds	r2, #1
 800aefe:	701a      	strb	r2, [r3, #0]
 800af00:	e612      	b.n	800ab28 <_dtoa_r+0x698>
 800af02:	2a00      	cmp	r2, #0
 800af04:	dd07      	ble.n	800af16 <_dtoa_r+0xa86>
 800af06:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800af0a:	d0ed      	beq.n	800aee8 <_dtoa_r+0xa58>
 800af0c:	9a00      	ldr	r2, [sp, #0]
 800af0e:	f108 0301 	add.w	r3, r8, #1
 800af12:	7013      	strb	r3, [r2, #0]
 800af14:	e608      	b.n	800ab28 <_dtoa_r+0x698>
 800af16:	9b07      	ldr	r3, [sp, #28]
 800af18:	9a07      	ldr	r2, [sp, #28]
 800af1a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800af1e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800af20:	4293      	cmp	r3, r2
 800af22:	d028      	beq.n	800af76 <_dtoa_r+0xae6>
 800af24:	4649      	mov	r1, r9
 800af26:	2300      	movs	r3, #0
 800af28:	220a      	movs	r2, #10
 800af2a:	4658      	mov	r0, fp
 800af2c:	f000 fd22 	bl	800b974 <__multadd>
 800af30:	42af      	cmp	r7, r5
 800af32:	4681      	mov	r9, r0
 800af34:	f04f 0300 	mov.w	r3, #0
 800af38:	f04f 020a 	mov.w	r2, #10
 800af3c:	4639      	mov	r1, r7
 800af3e:	4658      	mov	r0, fp
 800af40:	d107      	bne.n	800af52 <_dtoa_r+0xac2>
 800af42:	f000 fd17 	bl	800b974 <__multadd>
 800af46:	4607      	mov	r7, r0
 800af48:	4605      	mov	r5, r0
 800af4a:	9b07      	ldr	r3, [sp, #28]
 800af4c:	3301      	adds	r3, #1
 800af4e:	9307      	str	r3, [sp, #28]
 800af50:	e774      	b.n	800ae3c <_dtoa_r+0x9ac>
 800af52:	f000 fd0f 	bl	800b974 <__multadd>
 800af56:	4629      	mov	r1, r5
 800af58:	4607      	mov	r7, r0
 800af5a:	2300      	movs	r3, #0
 800af5c:	220a      	movs	r2, #10
 800af5e:	4658      	mov	r0, fp
 800af60:	f000 fd08 	bl	800b974 <__multadd>
 800af64:	4605      	mov	r5, r0
 800af66:	e7f0      	b.n	800af4a <_dtoa_r+0xaba>
 800af68:	9b00      	ldr	r3, [sp, #0]
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	bfcc      	ite	gt
 800af6e:	461e      	movgt	r6, r3
 800af70:	2601      	movle	r6, #1
 800af72:	4456      	add	r6, sl
 800af74:	2700      	movs	r7, #0
 800af76:	4649      	mov	r1, r9
 800af78:	2201      	movs	r2, #1
 800af7a:	4658      	mov	r0, fp
 800af7c:	f000 fef0 	bl	800bd60 <__lshift>
 800af80:	4621      	mov	r1, r4
 800af82:	4681      	mov	r9, r0
 800af84:	f000 ff58 	bl	800be38 <__mcmp>
 800af88:	2800      	cmp	r0, #0
 800af8a:	dcb0      	bgt.n	800aeee <_dtoa_r+0xa5e>
 800af8c:	d102      	bne.n	800af94 <_dtoa_r+0xb04>
 800af8e:	f018 0f01 	tst.w	r8, #1
 800af92:	d1ac      	bne.n	800aeee <_dtoa_r+0xa5e>
 800af94:	4633      	mov	r3, r6
 800af96:	461e      	mov	r6, r3
 800af98:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800af9c:	2a30      	cmp	r2, #48	@ 0x30
 800af9e:	d0fa      	beq.n	800af96 <_dtoa_r+0xb06>
 800afa0:	e5c2      	b.n	800ab28 <_dtoa_r+0x698>
 800afa2:	459a      	cmp	sl, r3
 800afa4:	d1a4      	bne.n	800aef0 <_dtoa_r+0xa60>
 800afa6:	9b04      	ldr	r3, [sp, #16]
 800afa8:	3301      	adds	r3, #1
 800afaa:	9304      	str	r3, [sp, #16]
 800afac:	2331      	movs	r3, #49	@ 0x31
 800afae:	f88a 3000 	strb.w	r3, [sl]
 800afb2:	e5b9      	b.n	800ab28 <_dtoa_r+0x698>
 800afb4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800afb6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800b014 <_dtoa_r+0xb84>
 800afba:	b11b      	cbz	r3, 800afc4 <_dtoa_r+0xb34>
 800afbc:	f10a 0308 	add.w	r3, sl, #8
 800afc0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800afc2:	6013      	str	r3, [r2, #0]
 800afc4:	4650      	mov	r0, sl
 800afc6:	b019      	add	sp, #100	@ 0x64
 800afc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afcc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800afce:	2b01      	cmp	r3, #1
 800afd0:	f77f ae37 	ble.w	800ac42 <_dtoa_r+0x7b2>
 800afd4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800afd6:	930a      	str	r3, [sp, #40]	@ 0x28
 800afd8:	2001      	movs	r0, #1
 800afda:	e655      	b.n	800ac88 <_dtoa_r+0x7f8>
 800afdc:	9b00      	ldr	r3, [sp, #0]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	f77f aed6 	ble.w	800ad90 <_dtoa_r+0x900>
 800afe4:	4656      	mov	r6, sl
 800afe6:	4621      	mov	r1, r4
 800afe8:	4648      	mov	r0, r9
 800afea:	f7ff f9c7 	bl	800a37c <quorem>
 800afee:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800aff2:	f806 8b01 	strb.w	r8, [r6], #1
 800aff6:	9b00      	ldr	r3, [sp, #0]
 800aff8:	eba6 020a 	sub.w	r2, r6, sl
 800affc:	4293      	cmp	r3, r2
 800affe:	ddb3      	ble.n	800af68 <_dtoa_r+0xad8>
 800b000:	4649      	mov	r1, r9
 800b002:	2300      	movs	r3, #0
 800b004:	220a      	movs	r2, #10
 800b006:	4658      	mov	r0, fp
 800b008:	f000 fcb4 	bl	800b974 <__multadd>
 800b00c:	4681      	mov	r9, r0
 800b00e:	e7ea      	b.n	800afe6 <_dtoa_r+0xb56>
 800b010:	0800ce6d 	.word	0x0800ce6d
 800b014:	0800cdf1 	.word	0x0800cdf1

0800b018 <_free_r>:
 800b018:	b538      	push	{r3, r4, r5, lr}
 800b01a:	4605      	mov	r5, r0
 800b01c:	2900      	cmp	r1, #0
 800b01e:	d041      	beq.n	800b0a4 <_free_r+0x8c>
 800b020:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b024:	1f0c      	subs	r4, r1, #4
 800b026:	2b00      	cmp	r3, #0
 800b028:	bfb8      	it	lt
 800b02a:	18e4      	addlt	r4, r4, r3
 800b02c:	f000 fc34 	bl	800b898 <__malloc_lock>
 800b030:	4a1d      	ldr	r2, [pc, #116]	@ (800b0a8 <_free_r+0x90>)
 800b032:	6813      	ldr	r3, [r2, #0]
 800b034:	b933      	cbnz	r3, 800b044 <_free_r+0x2c>
 800b036:	6063      	str	r3, [r4, #4]
 800b038:	6014      	str	r4, [r2, #0]
 800b03a:	4628      	mov	r0, r5
 800b03c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b040:	f000 bc30 	b.w	800b8a4 <__malloc_unlock>
 800b044:	42a3      	cmp	r3, r4
 800b046:	d908      	bls.n	800b05a <_free_r+0x42>
 800b048:	6820      	ldr	r0, [r4, #0]
 800b04a:	1821      	adds	r1, r4, r0
 800b04c:	428b      	cmp	r3, r1
 800b04e:	bf01      	itttt	eq
 800b050:	6819      	ldreq	r1, [r3, #0]
 800b052:	685b      	ldreq	r3, [r3, #4]
 800b054:	1809      	addeq	r1, r1, r0
 800b056:	6021      	streq	r1, [r4, #0]
 800b058:	e7ed      	b.n	800b036 <_free_r+0x1e>
 800b05a:	461a      	mov	r2, r3
 800b05c:	685b      	ldr	r3, [r3, #4]
 800b05e:	b10b      	cbz	r3, 800b064 <_free_r+0x4c>
 800b060:	42a3      	cmp	r3, r4
 800b062:	d9fa      	bls.n	800b05a <_free_r+0x42>
 800b064:	6811      	ldr	r1, [r2, #0]
 800b066:	1850      	adds	r0, r2, r1
 800b068:	42a0      	cmp	r0, r4
 800b06a:	d10b      	bne.n	800b084 <_free_r+0x6c>
 800b06c:	6820      	ldr	r0, [r4, #0]
 800b06e:	4401      	add	r1, r0
 800b070:	1850      	adds	r0, r2, r1
 800b072:	4283      	cmp	r3, r0
 800b074:	6011      	str	r1, [r2, #0]
 800b076:	d1e0      	bne.n	800b03a <_free_r+0x22>
 800b078:	6818      	ldr	r0, [r3, #0]
 800b07a:	685b      	ldr	r3, [r3, #4]
 800b07c:	6053      	str	r3, [r2, #4]
 800b07e:	4408      	add	r0, r1
 800b080:	6010      	str	r0, [r2, #0]
 800b082:	e7da      	b.n	800b03a <_free_r+0x22>
 800b084:	d902      	bls.n	800b08c <_free_r+0x74>
 800b086:	230c      	movs	r3, #12
 800b088:	602b      	str	r3, [r5, #0]
 800b08a:	e7d6      	b.n	800b03a <_free_r+0x22>
 800b08c:	6820      	ldr	r0, [r4, #0]
 800b08e:	1821      	adds	r1, r4, r0
 800b090:	428b      	cmp	r3, r1
 800b092:	bf04      	itt	eq
 800b094:	6819      	ldreq	r1, [r3, #0]
 800b096:	685b      	ldreq	r3, [r3, #4]
 800b098:	6063      	str	r3, [r4, #4]
 800b09a:	bf04      	itt	eq
 800b09c:	1809      	addeq	r1, r1, r0
 800b09e:	6021      	streq	r1, [r4, #0]
 800b0a0:	6054      	str	r4, [r2, #4]
 800b0a2:	e7ca      	b.n	800b03a <_free_r+0x22>
 800b0a4:	bd38      	pop	{r3, r4, r5, pc}
 800b0a6:	bf00      	nop
 800b0a8:	200006b0 	.word	0x200006b0

0800b0ac <rshift>:
 800b0ac:	6903      	ldr	r3, [r0, #16]
 800b0ae:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b0b2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b0b6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b0ba:	f100 0414 	add.w	r4, r0, #20
 800b0be:	dd45      	ble.n	800b14c <rshift+0xa0>
 800b0c0:	f011 011f 	ands.w	r1, r1, #31
 800b0c4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b0c8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b0cc:	d10c      	bne.n	800b0e8 <rshift+0x3c>
 800b0ce:	f100 0710 	add.w	r7, r0, #16
 800b0d2:	4629      	mov	r1, r5
 800b0d4:	42b1      	cmp	r1, r6
 800b0d6:	d334      	bcc.n	800b142 <rshift+0x96>
 800b0d8:	1a9b      	subs	r3, r3, r2
 800b0da:	009b      	lsls	r3, r3, #2
 800b0dc:	1eea      	subs	r2, r5, #3
 800b0de:	4296      	cmp	r6, r2
 800b0e0:	bf38      	it	cc
 800b0e2:	2300      	movcc	r3, #0
 800b0e4:	4423      	add	r3, r4
 800b0e6:	e015      	b.n	800b114 <rshift+0x68>
 800b0e8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b0ec:	f1c1 0820 	rsb	r8, r1, #32
 800b0f0:	40cf      	lsrs	r7, r1
 800b0f2:	f105 0e04 	add.w	lr, r5, #4
 800b0f6:	46a1      	mov	r9, r4
 800b0f8:	4576      	cmp	r6, lr
 800b0fa:	46f4      	mov	ip, lr
 800b0fc:	d815      	bhi.n	800b12a <rshift+0x7e>
 800b0fe:	1a9a      	subs	r2, r3, r2
 800b100:	0092      	lsls	r2, r2, #2
 800b102:	3a04      	subs	r2, #4
 800b104:	3501      	adds	r5, #1
 800b106:	42ae      	cmp	r6, r5
 800b108:	bf38      	it	cc
 800b10a:	2200      	movcc	r2, #0
 800b10c:	18a3      	adds	r3, r4, r2
 800b10e:	50a7      	str	r7, [r4, r2]
 800b110:	b107      	cbz	r7, 800b114 <rshift+0x68>
 800b112:	3304      	adds	r3, #4
 800b114:	1b1a      	subs	r2, r3, r4
 800b116:	42a3      	cmp	r3, r4
 800b118:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b11c:	bf08      	it	eq
 800b11e:	2300      	moveq	r3, #0
 800b120:	6102      	str	r2, [r0, #16]
 800b122:	bf08      	it	eq
 800b124:	6143      	streq	r3, [r0, #20]
 800b126:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b12a:	f8dc c000 	ldr.w	ip, [ip]
 800b12e:	fa0c fc08 	lsl.w	ip, ip, r8
 800b132:	ea4c 0707 	orr.w	r7, ip, r7
 800b136:	f849 7b04 	str.w	r7, [r9], #4
 800b13a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b13e:	40cf      	lsrs	r7, r1
 800b140:	e7da      	b.n	800b0f8 <rshift+0x4c>
 800b142:	f851 cb04 	ldr.w	ip, [r1], #4
 800b146:	f847 cf04 	str.w	ip, [r7, #4]!
 800b14a:	e7c3      	b.n	800b0d4 <rshift+0x28>
 800b14c:	4623      	mov	r3, r4
 800b14e:	e7e1      	b.n	800b114 <rshift+0x68>

0800b150 <__hexdig_fun>:
 800b150:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800b154:	2b09      	cmp	r3, #9
 800b156:	d802      	bhi.n	800b15e <__hexdig_fun+0xe>
 800b158:	3820      	subs	r0, #32
 800b15a:	b2c0      	uxtb	r0, r0
 800b15c:	4770      	bx	lr
 800b15e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800b162:	2b05      	cmp	r3, #5
 800b164:	d801      	bhi.n	800b16a <__hexdig_fun+0x1a>
 800b166:	3847      	subs	r0, #71	@ 0x47
 800b168:	e7f7      	b.n	800b15a <__hexdig_fun+0xa>
 800b16a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800b16e:	2b05      	cmp	r3, #5
 800b170:	d801      	bhi.n	800b176 <__hexdig_fun+0x26>
 800b172:	3827      	subs	r0, #39	@ 0x27
 800b174:	e7f1      	b.n	800b15a <__hexdig_fun+0xa>
 800b176:	2000      	movs	r0, #0
 800b178:	4770      	bx	lr
	...

0800b17c <__gethex>:
 800b17c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b180:	b085      	sub	sp, #20
 800b182:	468a      	mov	sl, r1
 800b184:	9302      	str	r3, [sp, #8]
 800b186:	680b      	ldr	r3, [r1, #0]
 800b188:	9001      	str	r0, [sp, #4]
 800b18a:	4690      	mov	r8, r2
 800b18c:	1c9c      	adds	r4, r3, #2
 800b18e:	46a1      	mov	r9, r4
 800b190:	f814 0b01 	ldrb.w	r0, [r4], #1
 800b194:	2830      	cmp	r0, #48	@ 0x30
 800b196:	d0fa      	beq.n	800b18e <__gethex+0x12>
 800b198:	eba9 0303 	sub.w	r3, r9, r3
 800b19c:	f1a3 0b02 	sub.w	fp, r3, #2
 800b1a0:	f7ff ffd6 	bl	800b150 <__hexdig_fun>
 800b1a4:	4605      	mov	r5, r0
 800b1a6:	2800      	cmp	r0, #0
 800b1a8:	d168      	bne.n	800b27c <__gethex+0x100>
 800b1aa:	49a0      	ldr	r1, [pc, #640]	@ (800b42c <__gethex+0x2b0>)
 800b1ac:	2201      	movs	r2, #1
 800b1ae:	4648      	mov	r0, r9
 800b1b0:	f7ff f83e 	bl	800a230 <strncmp>
 800b1b4:	4607      	mov	r7, r0
 800b1b6:	2800      	cmp	r0, #0
 800b1b8:	d167      	bne.n	800b28a <__gethex+0x10e>
 800b1ba:	f899 0001 	ldrb.w	r0, [r9, #1]
 800b1be:	4626      	mov	r6, r4
 800b1c0:	f7ff ffc6 	bl	800b150 <__hexdig_fun>
 800b1c4:	2800      	cmp	r0, #0
 800b1c6:	d062      	beq.n	800b28e <__gethex+0x112>
 800b1c8:	4623      	mov	r3, r4
 800b1ca:	7818      	ldrb	r0, [r3, #0]
 800b1cc:	2830      	cmp	r0, #48	@ 0x30
 800b1ce:	4699      	mov	r9, r3
 800b1d0:	f103 0301 	add.w	r3, r3, #1
 800b1d4:	d0f9      	beq.n	800b1ca <__gethex+0x4e>
 800b1d6:	f7ff ffbb 	bl	800b150 <__hexdig_fun>
 800b1da:	fab0 f580 	clz	r5, r0
 800b1de:	096d      	lsrs	r5, r5, #5
 800b1e0:	f04f 0b01 	mov.w	fp, #1
 800b1e4:	464a      	mov	r2, r9
 800b1e6:	4616      	mov	r6, r2
 800b1e8:	3201      	adds	r2, #1
 800b1ea:	7830      	ldrb	r0, [r6, #0]
 800b1ec:	f7ff ffb0 	bl	800b150 <__hexdig_fun>
 800b1f0:	2800      	cmp	r0, #0
 800b1f2:	d1f8      	bne.n	800b1e6 <__gethex+0x6a>
 800b1f4:	498d      	ldr	r1, [pc, #564]	@ (800b42c <__gethex+0x2b0>)
 800b1f6:	2201      	movs	r2, #1
 800b1f8:	4630      	mov	r0, r6
 800b1fa:	f7ff f819 	bl	800a230 <strncmp>
 800b1fe:	2800      	cmp	r0, #0
 800b200:	d13f      	bne.n	800b282 <__gethex+0x106>
 800b202:	b944      	cbnz	r4, 800b216 <__gethex+0x9a>
 800b204:	1c74      	adds	r4, r6, #1
 800b206:	4622      	mov	r2, r4
 800b208:	4616      	mov	r6, r2
 800b20a:	3201      	adds	r2, #1
 800b20c:	7830      	ldrb	r0, [r6, #0]
 800b20e:	f7ff ff9f 	bl	800b150 <__hexdig_fun>
 800b212:	2800      	cmp	r0, #0
 800b214:	d1f8      	bne.n	800b208 <__gethex+0x8c>
 800b216:	1ba4      	subs	r4, r4, r6
 800b218:	00a7      	lsls	r7, r4, #2
 800b21a:	7833      	ldrb	r3, [r6, #0]
 800b21c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800b220:	2b50      	cmp	r3, #80	@ 0x50
 800b222:	d13e      	bne.n	800b2a2 <__gethex+0x126>
 800b224:	7873      	ldrb	r3, [r6, #1]
 800b226:	2b2b      	cmp	r3, #43	@ 0x2b
 800b228:	d033      	beq.n	800b292 <__gethex+0x116>
 800b22a:	2b2d      	cmp	r3, #45	@ 0x2d
 800b22c:	d034      	beq.n	800b298 <__gethex+0x11c>
 800b22e:	1c71      	adds	r1, r6, #1
 800b230:	2400      	movs	r4, #0
 800b232:	7808      	ldrb	r0, [r1, #0]
 800b234:	f7ff ff8c 	bl	800b150 <__hexdig_fun>
 800b238:	1e43      	subs	r3, r0, #1
 800b23a:	b2db      	uxtb	r3, r3
 800b23c:	2b18      	cmp	r3, #24
 800b23e:	d830      	bhi.n	800b2a2 <__gethex+0x126>
 800b240:	f1a0 0210 	sub.w	r2, r0, #16
 800b244:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b248:	f7ff ff82 	bl	800b150 <__hexdig_fun>
 800b24c:	f100 3cff 	add.w	ip, r0, #4294967295
 800b250:	fa5f fc8c 	uxtb.w	ip, ip
 800b254:	f1bc 0f18 	cmp.w	ip, #24
 800b258:	f04f 030a 	mov.w	r3, #10
 800b25c:	d91e      	bls.n	800b29c <__gethex+0x120>
 800b25e:	b104      	cbz	r4, 800b262 <__gethex+0xe6>
 800b260:	4252      	negs	r2, r2
 800b262:	4417      	add	r7, r2
 800b264:	f8ca 1000 	str.w	r1, [sl]
 800b268:	b1ed      	cbz	r5, 800b2a6 <__gethex+0x12a>
 800b26a:	f1bb 0f00 	cmp.w	fp, #0
 800b26e:	bf0c      	ite	eq
 800b270:	2506      	moveq	r5, #6
 800b272:	2500      	movne	r5, #0
 800b274:	4628      	mov	r0, r5
 800b276:	b005      	add	sp, #20
 800b278:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b27c:	2500      	movs	r5, #0
 800b27e:	462c      	mov	r4, r5
 800b280:	e7b0      	b.n	800b1e4 <__gethex+0x68>
 800b282:	2c00      	cmp	r4, #0
 800b284:	d1c7      	bne.n	800b216 <__gethex+0x9a>
 800b286:	4627      	mov	r7, r4
 800b288:	e7c7      	b.n	800b21a <__gethex+0x9e>
 800b28a:	464e      	mov	r6, r9
 800b28c:	462f      	mov	r7, r5
 800b28e:	2501      	movs	r5, #1
 800b290:	e7c3      	b.n	800b21a <__gethex+0x9e>
 800b292:	2400      	movs	r4, #0
 800b294:	1cb1      	adds	r1, r6, #2
 800b296:	e7cc      	b.n	800b232 <__gethex+0xb6>
 800b298:	2401      	movs	r4, #1
 800b29a:	e7fb      	b.n	800b294 <__gethex+0x118>
 800b29c:	fb03 0002 	mla	r0, r3, r2, r0
 800b2a0:	e7ce      	b.n	800b240 <__gethex+0xc4>
 800b2a2:	4631      	mov	r1, r6
 800b2a4:	e7de      	b.n	800b264 <__gethex+0xe8>
 800b2a6:	eba6 0309 	sub.w	r3, r6, r9
 800b2aa:	3b01      	subs	r3, #1
 800b2ac:	4629      	mov	r1, r5
 800b2ae:	2b07      	cmp	r3, #7
 800b2b0:	dc0a      	bgt.n	800b2c8 <__gethex+0x14c>
 800b2b2:	9801      	ldr	r0, [sp, #4]
 800b2b4:	f000 fafc 	bl	800b8b0 <_Balloc>
 800b2b8:	4604      	mov	r4, r0
 800b2ba:	b940      	cbnz	r0, 800b2ce <__gethex+0x152>
 800b2bc:	4b5c      	ldr	r3, [pc, #368]	@ (800b430 <__gethex+0x2b4>)
 800b2be:	4602      	mov	r2, r0
 800b2c0:	21e4      	movs	r1, #228	@ 0xe4
 800b2c2:	485c      	ldr	r0, [pc, #368]	@ (800b434 <__gethex+0x2b8>)
 800b2c4:	f001 fc22 	bl	800cb0c <__assert_func>
 800b2c8:	3101      	adds	r1, #1
 800b2ca:	105b      	asrs	r3, r3, #1
 800b2cc:	e7ef      	b.n	800b2ae <__gethex+0x132>
 800b2ce:	f100 0a14 	add.w	sl, r0, #20
 800b2d2:	2300      	movs	r3, #0
 800b2d4:	4655      	mov	r5, sl
 800b2d6:	469b      	mov	fp, r3
 800b2d8:	45b1      	cmp	r9, r6
 800b2da:	d337      	bcc.n	800b34c <__gethex+0x1d0>
 800b2dc:	f845 bb04 	str.w	fp, [r5], #4
 800b2e0:	eba5 050a 	sub.w	r5, r5, sl
 800b2e4:	10ad      	asrs	r5, r5, #2
 800b2e6:	6125      	str	r5, [r4, #16]
 800b2e8:	4658      	mov	r0, fp
 800b2ea:	f000 fbd3 	bl	800ba94 <__hi0bits>
 800b2ee:	016d      	lsls	r5, r5, #5
 800b2f0:	f8d8 6000 	ldr.w	r6, [r8]
 800b2f4:	1a2d      	subs	r5, r5, r0
 800b2f6:	42b5      	cmp	r5, r6
 800b2f8:	dd54      	ble.n	800b3a4 <__gethex+0x228>
 800b2fa:	1bad      	subs	r5, r5, r6
 800b2fc:	4629      	mov	r1, r5
 800b2fe:	4620      	mov	r0, r4
 800b300:	f000 ff67 	bl	800c1d2 <__any_on>
 800b304:	4681      	mov	r9, r0
 800b306:	b178      	cbz	r0, 800b328 <__gethex+0x1ac>
 800b308:	1e6b      	subs	r3, r5, #1
 800b30a:	1159      	asrs	r1, r3, #5
 800b30c:	f003 021f 	and.w	r2, r3, #31
 800b310:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800b314:	f04f 0901 	mov.w	r9, #1
 800b318:	fa09 f202 	lsl.w	r2, r9, r2
 800b31c:	420a      	tst	r2, r1
 800b31e:	d003      	beq.n	800b328 <__gethex+0x1ac>
 800b320:	454b      	cmp	r3, r9
 800b322:	dc36      	bgt.n	800b392 <__gethex+0x216>
 800b324:	f04f 0902 	mov.w	r9, #2
 800b328:	4629      	mov	r1, r5
 800b32a:	4620      	mov	r0, r4
 800b32c:	f7ff febe 	bl	800b0ac <rshift>
 800b330:	442f      	add	r7, r5
 800b332:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b336:	42bb      	cmp	r3, r7
 800b338:	da42      	bge.n	800b3c0 <__gethex+0x244>
 800b33a:	9801      	ldr	r0, [sp, #4]
 800b33c:	4621      	mov	r1, r4
 800b33e:	f000 faf7 	bl	800b930 <_Bfree>
 800b342:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b344:	2300      	movs	r3, #0
 800b346:	6013      	str	r3, [r2, #0]
 800b348:	25a3      	movs	r5, #163	@ 0xa3
 800b34a:	e793      	b.n	800b274 <__gethex+0xf8>
 800b34c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800b350:	2a2e      	cmp	r2, #46	@ 0x2e
 800b352:	d012      	beq.n	800b37a <__gethex+0x1fe>
 800b354:	2b20      	cmp	r3, #32
 800b356:	d104      	bne.n	800b362 <__gethex+0x1e6>
 800b358:	f845 bb04 	str.w	fp, [r5], #4
 800b35c:	f04f 0b00 	mov.w	fp, #0
 800b360:	465b      	mov	r3, fp
 800b362:	7830      	ldrb	r0, [r6, #0]
 800b364:	9303      	str	r3, [sp, #12]
 800b366:	f7ff fef3 	bl	800b150 <__hexdig_fun>
 800b36a:	9b03      	ldr	r3, [sp, #12]
 800b36c:	f000 000f 	and.w	r0, r0, #15
 800b370:	4098      	lsls	r0, r3
 800b372:	ea4b 0b00 	orr.w	fp, fp, r0
 800b376:	3304      	adds	r3, #4
 800b378:	e7ae      	b.n	800b2d8 <__gethex+0x15c>
 800b37a:	45b1      	cmp	r9, r6
 800b37c:	d8ea      	bhi.n	800b354 <__gethex+0x1d8>
 800b37e:	492b      	ldr	r1, [pc, #172]	@ (800b42c <__gethex+0x2b0>)
 800b380:	9303      	str	r3, [sp, #12]
 800b382:	2201      	movs	r2, #1
 800b384:	4630      	mov	r0, r6
 800b386:	f7fe ff53 	bl	800a230 <strncmp>
 800b38a:	9b03      	ldr	r3, [sp, #12]
 800b38c:	2800      	cmp	r0, #0
 800b38e:	d1e1      	bne.n	800b354 <__gethex+0x1d8>
 800b390:	e7a2      	b.n	800b2d8 <__gethex+0x15c>
 800b392:	1ea9      	subs	r1, r5, #2
 800b394:	4620      	mov	r0, r4
 800b396:	f000 ff1c 	bl	800c1d2 <__any_on>
 800b39a:	2800      	cmp	r0, #0
 800b39c:	d0c2      	beq.n	800b324 <__gethex+0x1a8>
 800b39e:	f04f 0903 	mov.w	r9, #3
 800b3a2:	e7c1      	b.n	800b328 <__gethex+0x1ac>
 800b3a4:	da09      	bge.n	800b3ba <__gethex+0x23e>
 800b3a6:	1b75      	subs	r5, r6, r5
 800b3a8:	4621      	mov	r1, r4
 800b3aa:	9801      	ldr	r0, [sp, #4]
 800b3ac:	462a      	mov	r2, r5
 800b3ae:	f000 fcd7 	bl	800bd60 <__lshift>
 800b3b2:	1b7f      	subs	r7, r7, r5
 800b3b4:	4604      	mov	r4, r0
 800b3b6:	f100 0a14 	add.w	sl, r0, #20
 800b3ba:	f04f 0900 	mov.w	r9, #0
 800b3be:	e7b8      	b.n	800b332 <__gethex+0x1b6>
 800b3c0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b3c4:	42bd      	cmp	r5, r7
 800b3c6:	dd6f      	ble.n	800b4a8 <__gethex+0x32c>
 800b3c8:	1bed      	subs	r5, r5, r7
 800b3ca:	42ae      	cmp	r6, r5
 800b3cc:	dc34      	bgt.n	800b438 <__gethex+0x2bc>
 800b3ce:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b3d2:	2b02      	cmp	r3, #2
 800b3d4:	d022      	beq.n	800b41c <__gethex+0x2a0>
 800b3d6:	2b03      	cmp	r3, #3
 800b3d8:	d024      	beq.n	800b424 <__gethex+0x2a8>
 800b3da:	2b01      	cmp	r3, #1
 800b3dc:	d115      	bne.n	800b40a <__gethex+0x28e>
 800b3de:	42ae      	cmp	r6, r5
 800b3e0:	d113      	bne.n	800b40a <__gethex+0x28e>
 800b3e2:	2e01      	cmp	r6, #1
 800b3e4:	d10b      	bne.n	800b3fe <__gethex+0x282>
 800b3e6:	9a02      	ldr	r2, [sp, #8]
 800b3e8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b3ec:	6013      	str	r3, [r2, #0]
 800b3ee:	2301      	movs	r3, #1
 800b3f0:	6123      	str	r3, [r4, #16]
 800b3f2:	f8ca 3000 	str.w	r3, [sl]
 800b3f6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b3f8:	2562      	movs	r5, #98	@ 0x62
 800b3fa:	601c      	str	r4, [r3, #0]
 800b3fc:	e73a      	b.n	800b274 <__gethex+0xf8>
 800b3fe:	1e71      	subs	r1, r6, #1
 800b400:	4620      	mov	r0, r4
 800b402:	f000 fee6 	bl	800c1d2 <__any_on>
 800b406:	2800      	cmp	r0, #0
 800b408:	d1ed      	bne.n	800b3e6 <__gethex+0x26a>
 800b40a:	9801      	ldr	r0, [sp, #4]
 800b40c:	4621      	mov	r1, r4
 800b40e:	f000 fa8f 	bl	800b930 <_Bfree>
 800b412:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b414:	2300      	movs	r3, #0
 800b416:	6013      	str	r3, [r2, #0]
 800b418:	2550      	movs	r5, #80	@ 0x50
 800b41a:	e72b      	b.n	800b274 <__gethex+0xf8>
 800b41c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d1f3      	bne.n	800b40a <__gethex+0x28e>
 800b422:	e7e0      	b.n	800b3e6 <__gethex+0x26a>
 800b424:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b426:	2b00      	cmp	r3, #0
 800b428:	d1dd      	bne.n	800b3e6 <__gethex+0x26a>
 800b42a:	e7ee      	b.n	800b40a <__gethex+0x28e>
 800b42c:	0800cd5c 	.word	0x0800cd5c
 800b430:	0800ce6d 	.word	0x0800ce6d
 800b434:	0800ce7e 	.word	0x0800ce7e
 800b438:	1e6f      	subs	r7, r5, #1
 800b43a:	f1b9 0f00 	cmp.w	r9, #0
 800b43e:	d130      	bne.n	800b4a2 <__gethex+0x326>
 800b440:	b127      	cbz	r7, 800b44c <__gethex+0x2d0>
 800b442:	4639      	mov	r1, r7
 800b444:	4620      	mov	r0, r4
 800b446:	f000 fec4 	bl	800c1d2 <__any_on>
 800b44a:	4681      	mov	r9, r0
 800b44c:	117a      	asrs	r2, r7, #5
 800b44e:	2301      	movs	r3, #1
 800b450:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800b454:	f007 071f 	and.w	r7, r7, #31
 800b458:	40bb      	lsls	r3, r7
 800b45a:	4213      	tst	r3, r2
 800b45c:	4629      	mov	r1, r5
 800b45e:	4620      	mov	r0, r4
 800b460:	bf18      	it	ne
 800b462:	f049 0902 	orrne.w	r9, r9, #2
 800b466:	f7ff fe21 	bl	800b0ac <rshift>
 800b46a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800b46e:	1b76      	subs	r6, r6, r5
 800b470:	2502      	movs	r5, #2
 800b472:	f1b9 0f00 	cmp.w	r9, #0
 800b476:	d047      	beq.n	800b508 <__gethex+0x38c>
 800b478:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b47c:	2b02      	cmp	r3, #2
 800b47e:	d015      	beq.n	800b4ac <__gethex+0x330>
 800b480:	2b03      	cmp	r3, #3
 800b482:	d017      	beq.n	800b4b4 <__gethex+0x338>
 800b484:	2b01      	cmp	r3, #1
 800b486:	d109      	bne.n	800b49c <__gethex+0x320>
 800b488:	f019 0f02 	tst.w	r9, #2
 800b48c:	d006      	beq.n	800b49c <__gethex+0x320>
 800b48e:	f8da 3000 	ldr.w	r3, [sl]
 800b492:	ea49 0903 	orr.w	r9, r9, r3
 800b496:	f019 0f01 	tst.w	r9, #1
 800b49a:	d10e      	bne.n	800b4ba <__gethex+0x33e>
 800b49c:	f045 0510 	orr.w	r5, r5, #16
 800b4a0:	e032      	b.n	800b508 <__gethex+0x38c>
 800b4a2:	f04f 0901 	mov.w	r9, #1
 800b4a6:	e7d1      	b.n	800b44c <__gethex+0x2d0>
 800b4a8:	2501      	movs	r5, #1
 800b4aa:	e7e2      	b.n	800b472 <__gethex+0x2f6>
 800b4ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b4ae:	f1c3 0301 	rsb	r3, r3, #1
 800b4b2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b4b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d0f0      	beq.n	800b49c <__gethex+0x320>
 800b4ba:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b4be:	f104 0314 	add.w	r3, r4, #20
 800b4c2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b4c6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b4ca:	f04f 0c00 	mov.w	ip, #0
 800b4ce:	4618      	mov	r0, r3
 800b4d0:	f853 2b04 	ldr.w	r2, [r3], #4
 800b4d4:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b4d8:	d01b      	beq.n	800b512 <__gethex+0x396>
 800b4da:	3201      	adds	r2, #1
 800b4dc:	6002      	str	r2, [r0, #0]
 800b4de:	2d02      	cmp	r5, #2
 800b4e0:	f104 0314 	add.w	r3, r4, #20
 800b4e4:	d13c      	bne.n	800b560 <__gethex+0x3e4>
 800b4e6:	f8d8 2000 	ldr.w	r2, [r8]
 800b4ea:	3a01      	subs	r2, #1
 800b4ec:	42b2      	cmp	r2, r6
 800b4ee:	d109      	bne.n	800b504 <__gethex+0x388>
 800b4f0:	1171      	asrs	r1, r6, #5
 800b4f2:	2201      	movs	r2, #1
 800b4f4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b4f8:	f006 061f 	and.w	r6, r6, #31
 800b4fc:	fa02 f606 	lsl.w	r6, r2, r6
 800b500:	421e      	tst	r6, r3
 800b502:	d13a      	bne.n	800b57a <__gethex+0x3fe>
 800b504:	f045 0520 	orr.w	r5, r5, #32
 800b508:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b50a:	601c      	str	r4, [r3, #0]
 800b50c:	9b02      	ldr	r3, [sp, #8]
 800b50e:	601f      	str	r7, [r3, #0]
 800b510:	e6b0      	b.n	800b274 <__gethex+0xf8>
 800b512:	4299      	cmp	r1, r3
 800b514:	f843 cc04 	str.w	ip, [r3, #-4]
 800b518:	d8d9      	bhi.n	800b4ce <__gethex+0x352>
 800b51a:	68a3      	ldr	r3, [r4, #8]
 800b51c:	459b      	cmp	fp, r3
 800b51e:	db17      	blt.n	800b550 <__gethex+0x3d4>
 800b520:	6861      	ldr	r1, [r4, #4]
 800b522:	9801      	ldr	r0, [sp, #4]
 800b524:	3101      	adds	r1, #1
 800b526:	f000 f9c3 	bl	800b8b0 <_Balloc>
 800b52a:	4681      	mov	r9, r0
 800b52c:	b918      	cbnz	r0, 800b536 <__gethex+0x3ba>
 800b52e:	4b1a      	ldr	r3, [pc, #104]	@ (800b598 <__gethex+0x41c>)
 800b530:	4602      	mov	r2, r0
 800b532:	2184      	movs	r1, #132	@ 0x84
 800b534:	e6c5      	b.n	800b2c2 <__gethex+0x146>
 800b536:	6922      	ldr	r2, [r4, #16]
 800b538:	3202      	adds	r2, #2
 800b53a:	f104 010c 	add.w	r1, r4, #12
 800b53e:	0092      	lsls	r2, r2, #2
 800b540:	300c      	adds	r0, #12
 800b542:	f7fe fefe 	bl	800a342 <memcpy>
 800b546:	4621      	mov	r1, r4
 800b548:	9801      	ldr	r0, [sp, #4]
 800b54a:	f000 f9f1 	bl	800b930 <_Bfree>
 800b54e:	464c      	mov	r4, r9
 800b550:	6923      	ldr	r3, [r4, #16]
 800b552:	1c5a      	adds	r2, r3, #1
 800b554:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b558:	6122      	str	r2, [r4, #16]
 800b55a:	2201      	movs	r2, #1
 800b55c:	615a      	str	r2, [r3, #20]
 800b55e:	e7be      	b.n	800b4de <__gethex+0x362>
 800b560:	6922      	ldr	r2, [r4, #16]
 800b562:	455a      	cmp	r2, fp
 800b564:	dd0b      	ble.n	800b57e <__gethex+0x402>
 800b566:	2101      	movs	r1, #1
 800b568:	4620      	mov	r0, r4
 800b56a:	f7ff fd9f 	bl	800b0ac <rshift>
 800b56e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b572:	3701      	adds	r7, #1
 800b574:	42bb      	cmp	r3, r7
 800b576:	f6ff aee0 	blt.w	800b33a <__gethex+0x1be>
 800b57a:	2501      	movs	r5, #1
 800b57c:	e7c2      	b.n	800b504 <__gethex+0x388>
 800b57e:	f016 061f 	ands.w	r6, r6, #31
 800b582:	d0fa      	beq.n	800b57a <__gethex+0x3fe>
 800b584:	4453      	add	r3, sl
 800b586:	f1c6 0620 	rsb	r6, r6, #32
 800b58a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b58e:	f000 fa81 	bl	800ba94 <__hi0bits>
 800b592:	42b0      	cmp	r0, r6
 800b594:	dbe7      	blt.n	800b566 <__gethex+0x3ea>
 800b596:	e7f0      	b.n	800b57a <__gethex+0x3fe>
 800b598:	0800ce6d 	.word	0x0800ce6d

0800b59c <L_shift>:
 800b59c:	f1c2 0208 	rsb	r2, r2, #8
 800b5a0:	0092      	lsls	r2, r2, #2
 800b5a2:	b570      	push	{r4, r5, r6, lr}
 800b5a4:	f1c2 0620 	rsb	r6, r2, #32
 800b5a8:	6843      	ldr	r3, [r0, #4]
 800b5aa:	6804      	ldr	r4, [r0, #0]
 800b5ac:	fa03 f506 	lsl.w	r5, r3, r6
 800b5b0:	432c      	orrs	r4, r5
 800b5b2:	40d3      	lsrs	r3, r2
 800b5b4:	6004      	str	r4, [r0, #0]
 800b5b6:	f840 3f04 	str.w	r3, [r0, #4]!
 800b5ba:	4288      	cmp	r0, r1
 800b5bc:	d3f4      	bcc.n	800b5a8 <L_shift+0xc>
 800b5be:	bd70      	pop	{r4, r5, r6, pc}

0800b5c0 <__match>:
 800b5c0:	b530      	push	{r4, r5, lr}
 800b5c2:	6803      	ldr	r3, [r0, #0]
 800b5c4:	3301      	adds	r3, #1
 800b5c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b5ca:	b914      	cbnz	r4, 800b5d2 <__match+0x12>
 800b5cc:	6003      	str	r3, [r0, #0]
 800b5ce:	2001      	movs	r0, #1
 800b5d0:	bd30      	pop	{r4, r5, pc}
 800b5d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b5d6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800b5da:	2d19      	cmp	r5, #25
 800b5dc:	bf98      	it	ls
 800b5de:	3220      	addls	r2, #32
 800b5e0:	42a2      	cmp	r2, r4
 800b5e2:	d0f0      	beq.n	800b5c6 <__match+0x6>
 800b5e4:	2000      	movs	r0, #0
 800b5e6:	e7f3      	b.n	800b5d0 <__match+0x10>

0800b5e8 <__hexnan>:
 800b5e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5ec:	680b      	ldr	r3, [r1, #0]
 800b5ee:	6801      	ldr	r1, [r0, #0]
 800b5f0:	115e      	asrs	r6, r3, #5
 800b5f2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b5f6:	f013 031f 	ands.w	r3, r3, #31
 800b5fa:	b087      	sub	sp, #28
 800b5fc:	bf18      	it	ne
 800b5fe:	3604      	addne	r6, #4
 800b600:	2500      	movs	r5, #0
 800b602:	1f37      	subs	r7, r6, #4
 800b604:	4682      	mov	sl, r0
 800b606:	4690      	mov	r8, r2
 800b608:	9301      	str	r3, [sp, #4]
 800b60a:	f846 5c04 	str.w	r5, [r6, #-4]
 800b60e:	46b9      	mov	r9, r7
 800b610:	463c      	mov	r4, r7
 800b612:	9502      	str	r5, [sp, #8]
 800b614:	46ab      	mov	fp, r5
 800b616:	784a      	ldrb	r2, [r1, #1]
 800b618:	1c4b      	adds	r3, r1, #1
 800b61a:	9303      	str	r3, [sp, #12]
 800b61c:	b342      	cbz	r2, 800b670 <__hexnan+0x88>
 800b61e:	4610      	mov	r0, r2
 800b620:	9105      	str	r1, [sp, #20]
 800b622:	9204      	str	r2, [sp, #16]
 800b624:	f7ff fd94 	bl	800b150 <__hexdig_fun>
 800b628:	2800      	cmp	r0, #0
 800b62a:	d151      	bne.n	800b6d0 <__hexnan+0xe8>
 800b62c:	9a04      	ldr	r2, [sp, #16]
 800b62e:	9905      	ldr	r1, [sp, #20]
 800b630:	2a20      	cmp	r2, #32
 800b632:	d818      	bhi.n	800b666 <__hexnan+0x7e>
 800b634:	9b02      	ldr	r3, [sp, #8]
 800b636:	459b      	cmp	fp, r3
 800b638:	dd13      	ble.n	800b662 <__hexnan+0x7a>
 800b63a:	454c      	cmp	r4, r9
 800b63c:	d206      	bcs.n	800b64c <__hexnan+0x64>
 800b63e:	2d07      	cmp	r5, #7
 800b640:	dc04      	bgt.n	800b64c <__hexnan+0x64>
 800b642:	462a      	mov	r2, r5
 800b644:	4649      	mov	r1, r9
 800b646:	4620      	mov	r0, r4
 800b648:	f7ff ffa8 	bl	800b59c <L_shift>
 800b64c:	4544      	cmp	r4, r8
 800b64e:	d952      	bls.n	800b6f6 <__hexnan+0x10e>
 800b650:	2300      	movs	r3, #0
 800b652:	f1a4 0904 	sub.w	r9, r4, #4
 800b656:	f844 3c04 	str.w	r3, [r4, #-4]
 800b65a:	f8cd b008 	str.w	fp, [sp, #8]
 800b65e:	464c      	mov	r4, r9
 800b660:	461d      	mov	r5, r3
 800b662:	9903      	ldr	r1, [sp, #12]
 800b664:	e7d7      	b.n	800b616 <__hexnan+0x2e>
 800b666:	2a29      	cmp	r2, #41	@ 0x29
 800b668:	d157      	bne.n	800b71a <__hexnan+0x132>
 800b66a:	3102      	adds	r1, #2
 800b66c:	f8ca 1000 	str.w	r1, [sl]
 800b670:	f1bb 0f00 	cmp.w	fp, #0
 800b674:	d051      	beq.n	800b71a <__hexnan+0x132>
 800b676:	454c      	cmp	r4, r9
 800b678:	d206      	bcs.n	800b688 <__hexnan+0xa0>
 800b67a:	2d07      	cmp	r5, #7
 800b67c:	dc04      	bgt.n	800b688 <__hexnan+0xa0>
 800b67e:	462a      	mov	r2, r5
 800b680:	4649      	mov	r1, r9
 800b682:	4620      	mov	r0, r4
 800b684:	f7ff ff8a 	bl	800b59c <L_shift>
 800b688:	4544      	cmp	r4, r8
 800b68a:	d936      	bls.n	800b6fa <__hexnan+0x112>
 800b68c:	f1a8 0204 	sub.w	r2, r8, #4
 800b690:	4623      	mov	r3, r4
 800b692:	f853 1b04 	ldr.w	r1, [r3], #4
 800b696:	f842 1f04 	str.w	r1, [r2, #4]!
 800b69a:	429f      	cmp	r7, r3
 800b69c:	d2f9      	bcs.n	800b692 <__hexnan+0xaa>
 800b69e:	1b3b      	subs	r3, r7, r4
 800b6a0:	f023 0303 	bic.w	r3, r3, #3
 800b6a4:	3304      	adds	r3, #4
 800b6a6:	3401      	adds	r4, #1
 800b6a8:	3e03      	subs	r6, #3
 800b6aa:	42b4      	cmp	r4, r6
 800b6ac:	bf88      	it	hi
 800b6ae:	2304      	movhi	r3, #4
 800b6b0:	4443      	add	r3, r8
 800b6b2:	2200      	movs	r2, #0
 800b6b4:	f843 2b04 	str.w	r2, [r3], #4
 800b6b8:	429f      	cmp	r7, r3
 800b6ba:	d2fb      	bcs.n	800b6b4 <__hexnan+0xcc>
 800b6bc:	683b      	ldr	r3, [r7, #0]
 800b6be:	b91b      	cbnz	r3, 800b6c8 <__hexnan+0xe0>
 800b6c0:	4547      	cmp	r7, r8
 800b6c2:	d128      	bne.n	800b716 <__hexnan+0x12e>
 800b6c4:	2301      	movs	r3, #1
 800b6c6:	603b      	str	r3, [r7, #0]
 800b6c8:	2005      	movs	r0, #5
 800b6ca:	b007      	add	sp, #28
 800b6cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6d0:	3501      	adds	r5, #1
 800b6d2:	2d08      	cmp	r5, #8
 800b6d4:	f10b 0b01 	add.w	fp, fp, #1
 800b6d8:	dd06      	ble.n	800b6e8 <__hexnan+0x100>
 800b6da:	4544      	cmp	r4, r8
 800b6dc:	d9c1      	bls.n	800b662 <__hexnan+0x7a>
 800b6de:	2300      	movs	r3, #0
 800b6e0:	f844 3c04 	str.w	r3, [r4, #-4]
 800b6e4:	2501      	movs	r5, #1
 800b6e6:	3c04      	subs	r4, #4
 800b6e8:	6822      	ldr	r2, [r4, #0]
 800b6ea:	f000 000f 	and.w	r0, r0, #15
 800b6ee:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b6f2:	6020      	str	r0, [r4, #0]
 800b6f4:	e7b5      	b.n	800b662 <__hexnan+0x7a>
 800b6f6:	2508      	movs	r5, #8
 800b6f8:	e7b3      	b.n	800b662 <__hexnan+0x7a>
 800b6fa:	9b01      	ldr	r3, [sp, #4]
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d0dd      	beq.n	800b6bc <__hexnan+0xd4>
 800b700:	f1c3 0320 	rsb	r3, r3, #32
 800b704:	f04f 32ff 	mov.w	r2, #4294967295
 800b708:	40da      	lsrs	r2, r3
 800b70a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b70e:	4013      	ands	r3, r2
 800b710:	f846 3c04 	str.w	r3, [r6, #-4]
 800b714:	e7d2      	b.n	800b6bc <__hexnan+0xd4>
 800b716:	3f04      	subs	r7, #4
 800b718:	e7d0      	b.n	800b6bc <__hexnan+0xd4>
 800b71a:	2004      	movs	r0, #4
 800b71c:	e7d5      	b.n	800b6ca <__hexnan+0xe2>
	...

0800b720 <malloc>:
 800b720:	4b02      	ldr	r3, [pc, #8]	@ (800b72c <malloc+0xc>)
 800b722:	4601      	mov	r1, r0
 800b724:	6818      	ldr	r0, [r3, #0]
 800b726:	f000 b825 	b.w	800b774 <_malloc_r>
 800b72a:	bf00      	nop
 800b72c:	20000194 	.word	0x20000194

0800b730 <sbrk_aligned>:
 800b730:	b570      	push	{r4, r5, r6, lr}
 800b732:	4e0f      	ldr	r6, [pc, #60]	@ (800b770 <sbrk_aligned+0x40>)
 800b734:	460c      	mov	r4, r1
 800b736:	6831      	ldr	r1, [r6, #0]
 800b738:	4605      	mov	r5, r0
 800b73a:	b911      	cbnz	r1, 800b742 <sbrk_aligned+0x12>
 800b73c:	f001 f9d6 	bl	800caec <_sbrk_r>
 800b740:	6030      	str	r0, [r6, #0]
 800b742:	4621      	mov	r1, r4
 800b744:	4628      	mov	r0, r5
 800b746:	f001 f9d1 	bl	800caec <_sbrk_r>
 800b74a:	1c43      	adds	r3, r0, #1
 800b74c:	d103      	bne.n	800b756 <sbrk_aligned+0x26>
 800b74e:	f04f 34ff 	mov.w	r4, #4294967295
 800b752:	4620      	mov	r0, r4
 800b754:	bd70      	pop	{r4, r5, r6, pc}
 800b756:	1cc4      	adds	r4, r0, #3
 800b758:	f024 0403 	bic.w	r4, r4, #3
 800b75c:	42a0      	cmp	r0, r4
 800b75e:	d0f8      	beq.n	800b752 <sbrk_aligned+0x22>
 800b760:	1a21      	subs	r1, r4, r0
 800b762:	4628      	mov	r0, r5
 800b764:	f001 f9c2 	bl	800caec <_sbrk_r>
 800b768:	3001      	adds	r0, #1
 800b76a:	d1f2      	bne.n	800b752 <sbrk_aligned+0x22>
 800b76c:	e7ef      	b.n	800b74e <sbrk_aligned+0x1e>
 800b76e:	bf00      	nop
 800b770:	200006ac 	.word	0x200006ac

0800b774 <_malloc_r>:
 800b774:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b778:	1ccd      	adds	r5, r1, #3
 800b77a:	f025 0503 	bic.w	r5, r5, #3
 800b77e:	3508      	adds	r5, #8
 800b780:	2d0c      	cmp	r5, #12
 800b782:	bf38      	it	cc
 800b784:	250c      	movcc	r5, #12
 800b786:	2d00      	cmp	r5, #0
 800b788:	4606      	mov	r6, r0
 800b78a:	db01      	blt.n	800b790 <_malloc_r+0x1c>
 800b78c:	42a9      	cmp	r1, r5
 800b78e:	d904      	bls.n	800b79a <_malloc_r+0x26>
 800b790:	230c      	movs	r3, #12
 800b792:	6033      	str	r3, [r6, #0]
 800b794:	2000      	movs	r0, #0
 800b796:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b79a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b870 <_malloc_r+0xfc>
 800b79e:	f000 f87b 	bl	800b898 <__malloc_lock>
 800b7a2:	f8d8 3000 	ldr.w	r3, [r8]
 800b7a6:	461c      	mov	r4, r3
 800b7a8:	bb44      	cbnz	r4, 800b7fc <_malloc_r+0x88>
 800b7aa:	4629      	mov	r1, r5
 800b7ac:	4630      	mov	r0, r6
 800b7ae:	f7ff ffbf 	bl	800b730 <sbrk_aligned>
 800b7b2:	1c43      	adds	r3, r0, #1
 800b7b4:	4604      	mov	r4, r0
 800b7b6:	d158      	bne.n	800b86a <_malloc_r+0xf6>
 800b7b8:	f8d8 4000 	ldr.w	r4, [r8]
 800b7bc:	4627      	mov	r7, r4
 800b7be:	2f00      	cmp	r7, #0
 800b7c0:	d143      	bne.n	800b84a <_malloc_r+0xd6>
 800b7c2:	2c00      	cmp	r4, #0
 800b7c4:	d04b      	beq.n	800b85e <_malloc_r+0xea>
 800b7c6:	6823      	ldr	r3, [r4, #0]
 800b7c8:	4639      	mov	r1, r7
 800b7ca:	4630      	mov	r0, r6
 800b7cc:	eb04 0903 	add.w	r9, r4, r3
 800b7d0:	f001 f98c 	bl	800caec <_sbrk_r>
 800b7d4:	4581      	cmp	r9, r0
 800b7d6:	d142      	bne.n	800b85e <_malloc_r+0xea>
 800b7d8:	6821      	ldr	r1, [r4, #0]
 800b7da:	1a6d      	subs	r5, r5, r1
 800b7dc:	4629      	mov	r1, r5
 800b7de:	4630      	mov	r0, r6
 800b7e0:	f7ff ffa6 	bl	800b730 <sbrk_aligned>
 800b7e4:	3001      	adds	r0, #1
 800b7e6:	d03a      	beq.n	800b85e <_malloc_r+0xea>
 800b7e8:	6823      	ldr	r3, [r4, #0]
 800b7ea:	442b      	add	r3, r5
 800b7ec:	6023      	str	r3, [r4, #0]
 800b7ee:	f8d8 3000 	ldr.w	r3, [r8]
 800b7f2:	685a      	ldr	r2, [r3, #4]
 800b7f4:	bb62      	cbnz	r2, 800b850 <_malloc_r+0xdc>
 800b7f6:	f8c8 7000 	str.w	r7, [r8]
 800b7fa:	e00f      	b.n	800b81c <_malloc_r+0xa8>
 800b7fc:	6822      	ldr	r2, [r4, #0]
 800b7fe:	1b52      	subs	r2, r2, r5
 800b800:	d420      	bmi.n	800b844 <_malloc_r+0xd0>
 800b802:	2a0b      	cmp	r2, #11
 800b804:	d917      	bls.n	800b836 <_malloc_r+0xc2>
 800b806:	1961      	adds	r1, r4, r5
 800b808:	42a3      	cmp	r3, r4
 800b80a:	6025      	str	r5, [r4, #0]
 800b80c:	bf18      	it	ne
 800b80e:	6059      	strne	r1, [r3, #4]
 800b810:	6863      	ldr	r3, [r4, #4]
 800b812:	bf08      	it	eq
 800b814:	f8c8 1000 	streq.w	r1, [r8]
 800b818:	5162      	str	r2, [r4, r5]
 800b81a:	604b      	str	r3, [r1, #4]
 800b81c:	4630      	mov	r0, r6
 800b81e:	f000 f841 	bl	800b8a4 <__malloc_unlock>
 800b822:	f104 000b 	add.w	r0, r4, #11
 800b826:	1d23      	adds	r3, r4, #4
 800b828:	f020 0007 	bic.w	r0, r0, #7
 800b82c:	1ac2      	subs	r2, r0, r3
 800b82e:	bf1c      	itt	ne
 800b830:	1a1b      	subne	r3, r3, r0
 800b832:	50a3      	strne	r3, [r4, r2]
 800b834:	e7af      	b.n	800b796 <_malloc_r+0x22>
 800b836:	6862      	ldr	r2, [r4, #4]
 800b838:	42a3      	cmp	r3, r4
 800b83a:	bf0c      	ite	eq
 800b83c:	f8c8 2000 	streq.w	r2, [r8]
 800b840:	605a      	strne	r2, [r3, #4]
 800b842:	e7eb      	b.n	800b81c <_malloc_r+0xa8>
 800b844:	4623      	mov	r3, r4
 800b846:	6864      	ldr	r4, [r4, #4]
 800b848:	e7ae      	b.n	800b7a8 <_malloc_r+0x34>
 800b84a:	463c      	mov	r4, r7
 800b84c:	687f      	ldr	r7, [r7, #4]
 800b84e:	e7b6      	b.n	800b7be <_malloc_r+0x4a>
 800b850:	461a      	mov	r2, r3
 800b852:	685b      	ldr	r3, [r3, #4]
 800b854:	42a3      	cmp	r3, r4
 800b856:	d1fb      	bne.n	800b850 <_malloc_r+0xdc>
 800b858:	2300      	movs	r3, #0
 800b85a:	6053      	str	r3, [r2, #4]
 800b85c:	e7de      	b.n	800b81c <_malloc_r+0xa8>
 800b85e:	230c      	movs	r3, #12
 800b860:	6033      	str	r3, [r6, #0]
 800b862:	4630      	mov	r0, r6
 800b864:	f000 f81e 	bl	800b8a4 <__malloc_unlock>
 800b868:	e794      	b.n	800b794 <_malloc_r+0x20>
 800b86a:	6005      	str	r5, [r0, #0]
 800b86c:	e7d6      	b.n	800b81c <_malloc_r+0xa8>
 800b86e:	bf00      	nop
 800b870:	200006b0 	.word	0x200006b0

0800b874 <__ascii_mbtowc>:
 800b874:	b082      	sub	sp, #8
 800b876:	b901      	cbnz	r1, 800b87a <__ascii_mbtowc+0x6>
 800b878:	a901      	add	r1, sp, #4
 800b87a:	b142      	cbz	r2, 800b88e <__ascii_mbtowc+0x1a>
 800b87c:	b14b      	cbz	r3, 800b892 <__ascii_mbtowc+0x1e>
 800b87e:	7813      	ldrb	r3, [r2, #0]
 800b880:	600b      	str	r3, [r1, #0]
 800b882:	7812      	ldrb	r2, [r2, #0]
 800b884:	1e10      	subs	r0, r2, #0
 800b886:	bf18      	it	ne
 800b888:	2001      	movne	r0, #1
 800b88a:	b002      	add	sp, #8
 800b88c:	4770      	bx	lr
 800b88e:	4610      	mov	r0, r2
 800b890:	e7fb      	b.n	800b88a <__ascii_mbtowc+0x16>
 800b892:	f06f 0001 	mvn.w	r0, #1
 800b896:	e7f8      	b.n	800b88a <__ascii_mbtowc+0x16>

0800b898 <__malloc_lock>:
 800b898:	4801      	ldr	r0, [pc, #4]	@ (800b8a0 <__malloc_lock+0x8>)
 800b89a:	f7fe bd50 	b.w	800a33e <__retarget_lock_acquire_recursive>
 800b89e:	bf00      	nop
 800b8a0:	200006a8 	.word	0x200006a8

0800b8a4 <__malloc_unlock>:
 800b8a4:	4801      	ldr	r0, [pc, #4]	@ (800b8ac <__malloc_unlock+0x8>)
 800b8a6:	f7fe bd4b 	b.w	800a340 <__retarget_lock_release_recursive>
 800b8aa:	bf00      	nop
 800b8ac:	200006a8 	.word	0x200006a8

0800b8b0 <_Balloc>:
 800b8b0:	b570      	push	{r4, r5, r6, lr}
 800b8b2:	69c6      	ldr	r6, [r0, #28]
 800b8b4:	4604      	mov	r4, r0
 800b8b6:	460d      	mov	r5, r1
 800b8b8:	b976      	cbnz	r6, 800b8d8 <_Balloc+0x28>
 800b8ba:	2010      	movs	r0, #16
 800b8bc:	f7ff ff30 	bl	800b720 <malloc>
 800b8c0:	4602      	mov	r2, r0
 800b8c2:	61e0      	str	r0, [r4, #28]
 800b8c4:	b920      	cbnz	r0, 800b8d0 <_Balloc+0x20>
 800b8c6:	4b18      	ldr	r3, [pc, #96]	@ (800b928 <_Balloc+0x78>)
 800b8c8:	4818      	ldr	r0, [pc, #96]	@ (800b92c <_Balloc+0x7c>)
 800b8ca:	216b      	movs	r1, #107	@ 0x6b
 800b8cc:	f001 f91e 	bl	800cb0c <__assert_func>
 800b8d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b8d4:	6006      	str	r6, [r0, #0]
 800b8d6:	60c6      	str	r6, [r0, #12]
 800b8d8:	69e6      	ldr	r6, [r4, #28]
 800b8da:	68f3      	ldr	r3, [r6, #12]
 800b8dc:	b183      	cbz	r3, 800b900 <_Balloc+0x50>
 800b8de:	69e3      	ldr	r3, [r4, #28]
 800b8e0:	68db      	ldr	r3, [r3, #12]
 800b8e2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b8e6:	b9b8      	cbnz	r0, 800b918 <_Balloc+0x68>
 800b8e8:	2101      	movs	r1, #1
 800b8ea:	fa01 f605 	lsl.w	r6, r1, r5
 800b8ee:	1d72      	adds	r2, r6, #5
 800b8f0:	0092      	lsls	r2, r2, #2
 800b8f2:	4620      	mov	r0, r4
 800b8f4:	f001 f928 	bl	800cb48 <_calloc_r>
 800b8f8:	b160      	cbz	r0, 800b914 <_Balloc+0x64>
 800b8fa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b8fe:	e00e      	b.n	800b91e <_Balloc+0x6e>
 800b900:	2221      	movs	r2, #33	@ 0x21
 800b902:	2104      	movs	r1, #4
 800b904:	4620      	mov	r0, r4
 800b906:	f001 f91f 	bl	800cb48 <_calloc_r>
 800b90a:	69e3      	ldr	r3, [r4, #28]
 800b90c:	60f0      	str	r0, [r6, #12]
 800b90e:	68db      	ldr	r3, [r3, #12]
 800b910:	2b00      	cmp	r3, #0
 800b912:	d1e4      	bne.n	800b8de <_Balloc+0x2e>
 800b914:	2000      	movs	r0, #0
 800b916:	bd70      	pop	{r4, r5, r6, pc}
 800b918:	6802      	ldr	r2, [r0, #0]
 800b91a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b91e:	2300      	movs	r3, #0
 800b920:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b924:	e7f7      	b.n	800b916 <_Balloc+0x66>
 800b926:	bf00      	nop
 800b928:	0800cdfe 	.word	0x0800cdfe
 800b92c:	0800cede 	.word	0x0800cede

0800b930 <_Bfree>:
 800b930:	b570      	push	{r4, r5, r6, lr}
 800b932:	69c6      	ldr	r6, [r0, #28]
 800b934:	4605      	mov	r5, r0
 800b936:	460c      	mov	r4, r1
 800b938:	b976      	cbnz	r6, 800b958 <_Bfree+0x28>
 800b93a:	2010      	movs	r0, #16
 800b93c:	f7ff fef0 	bl	800b720 <malloc>
 800b940:	4602      	mov	r2, r0
 800b942:	61e8      	str	r0, [r5, #28]
 800b944:	b920      	cbnz	r0, 800b950 <_Bfree+0x20>
 800b946:	4b09      	ldr	r3, [pc, #36]	@ (800b96c <_Bfree+0x3c>)
 800b948:	4809      	ldr	r0, [pc, #36]	@ (800b970 <_Bfree+0x40>)
 800b94a:	218f      	movs	r1, #143	@ 0x8f
 800b94c:	f001 f8de 	bl	800cb0c <__assert_func>
 800b950:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b954:	6006      	str	r6, [r0, #0]
 800b956:	60c6      	str	r6, [r0, #12]
 800b958:	b13c      	cbz	r4, 800b96a <_Bfree+0x3a>
 800b95a:	69eb      	ldr	r3, [r5, #28]
 800b95c:	6862      	ldr	r2, [r4, #4]
 800b95e:	68db      	ldr	r3, [r3, #12]
 800b960:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b964:	6021      	str	r1, [r4, #0]
 800b966:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b96a:	bd70      	pop	{r4, r5, r6, pc}
 800b96c:	0800cdfe 	.word	0x0800cdfe
 800b970:	0800cede 	.word	0x0800cede

0800b974 <__multadd>:
 800b974:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b978:	690d      	ldr	r5, [r1, #16]
 800b97a:	4607      	mov	r7, r0
 800b97c:	460c      	mov	r4, r1
 800b97e:	461e      	mov	r6, r3
 800b980:	f101 0c14 	add.w	ip, r1, #20
 800b984:	2000      	movs	r0, #0
 800b986:	f8dc 3000 	ldr.w	r3, [ip]
 800b98a:	b299      	uxth	r1, r3
 800b98c:	fb02 6101 	mla	r1, r2, r1, r6
 800b990:	0c1e      	lsrs	r6, r3, #16
 800b992:	0c0b      	lsrs	r3, r1, #16
 800b994:	fb02 3306 	mla	r3, r2, r6, r3
 800b998:	b289      	uxth	r1, r1
 800b99a:	3001      	adds	r0, #1
 800b99c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b9a0:	4285      	cmp	r5, r0
 800b9a2:	f84c 1b04 	str.w	r1, [ip], #4
 800b9a6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b9aa:	dcec      	bgt.n	800b986 <__multadd+0x12>
 800b9ac:	b30e      	cbz	r6, 800b9f2 <__multadd+0x7e>
 800b9ae:	68a3      	ldr	r3, [r4, #8]
 800b9b0:	42ab      	cmp	r3, r5
 800b9b2:	dc19      	bgt.n	800b9e8 <__multadd+0x74>
 800b9b4:	6861      	ldr	r1, [r4, #4]
 800b9b6:	4638      	mov	r0, r7
 800b9b8:	3101      	adds	r1, #1
 800b9ba:	f7ff ff79 	bl	800b8b0 <_Balloc>
 800b9be:	4680      	mov	r8, r0
 800b9c0:	b928      	cbnz	r0, 800b9ce <__multadd+0x5a>
 800b9c2:	4602      	mov	r2, r0
 800b9c4:	4b0c      	ldr	r3, [pc, #48]	@ (800b9f8 <__multadd+0x84>)
 800b9c6:	480d      	ldr	r0, [pc, #52]	@ (800b9fc <__multadd+0x88>)
 800b9c8:	21ba      	movs	r1, #186	@ 0xba
 800b9ca:	f001 f89f 	bl	800cb0c <__assert_func>
 800b9ce:	6922      	ldr	r2, [r4, #16]
 800b9d0:	3202      	adds	r2, #2
 800b9d2:	f104 010c 	add.w	r1, r4, #12
 800b9d6:	0092      	lsls	r2, r2, #2
 800b9d8:	300c      	adds	r0, #12
 800b9da:	f7fe fcb2 	bl	800a342 <memcpy>
 800b9de:	4621      	mov	r1, r4
 800b9e0:	4638      	mov	r0, r7
 800b9e2:	f7ff ffa5 	bl	800b930 <_Bfree>
 800b9e6:	4644      	mov	r4, r8
 800b9e8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b9ec:	3501      	adds	r5, #1
 800b9ee:	615e      	str	r6, [r3, #20]
 800b9f0:	6125      	str	r5, [r4, #16]
 800b9f2:	4620      	mov	r0, r4
 800b9f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9f8:	0800ce6d 	.word	0x0800ce6d
 800b9fc:	0800cede 	.word	0x0800cede

0800ba00 <__s2b>:
 800ba00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ba04:	460c      	mov	r4, r1
 800ba06:	4615      	mov	r5, r2
 800ba08:	461f      	mov	r7, r3
 800ba0a:	2209      	movs	r2, #9
 800ba0c:	3308      	adds	r3, #8
 800ba0e:	4606      	mov	r6, r0
 800ba10:	fb93 f3f2 	sdiv	r3, r3, r2
 800ba14:	2100      	movs	r1, #0
 800ba16:	2201      	movs	r2, #1
 800ba18:	429a      	cmp	r2, r3
 800ba1a:	db09      	blt.n	800ba30 <__s2b+0x30>
 800ba1c:	4630      	mov	r0, r6
 800ba1e:	f7ff ff47 	bl	800b8b0 <_Balloc>
 800ba22:	b940      	cbnz	r0, 800ba36 <__s2b+0x36>
 800ba24:	4602      	mov	r2, r0
 800ba26:	4b19      	ldr	r3, [pc, #100]	@ (800ba8c <__s2b+0x8c>)
 800ba28:	4819      	ldr	r0, [pc, #100]	@ (800ba90 <__s2b+0x90>)
 800ba2a:	21d3      	movs	r1, #211	@ 0xd3
 800ba2c:	f001 f86e 	bl	800cb0c <__assert_func>
 800ba30:	0052      	lsls	r2, r2, #1
 800ba32:	3101      	adds	r1, #1
 800ba34:	e7f0      	b.n	800ba18 <__s2b+0x18>
 800ba36:	9b08      	ldr	r3, [sp, #32]
 800ba38:	6143      	str	r3, [r0, #20]
 800ba3a:	2d09      	cmp	r5, #9
 800ba3c:	f04f 0301 	mov.w	r3, #1
 800ba40:	6103      	str	r3, [r0, #16]
 800ba42:	dd16      	ble.n	800ba72 <__s2b+0x72>
 800ba44:	f104 0909 	add.w	r9, r4, #9
 800ba48:	46c8      	mov	r8, r9
 800ba4a:	442c      	add	r4, r5
 800ba4c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ba50:	4601      	mov	r1, r0
 800ba52:	3b30      	subs	r3, #48	@ 0x30
 800ba54:	220a      	movs	r2, #10
 800ba56:	4630      	mov	r0, r6
 800ba58:	f7ff ff8c 	bl	800b974 <__multadd>
 800ba5c:	45a0      	cmp	r8, r4
 800ba5e:	d1f5      	bne.n	800ba4c <__s2b+0x4c>
 800ba60:	f1a5 0408 	sub.w	r4, r5, #8
 800ba64:	444c      	add	r4, r9
 800ba66:	1b2d      	subs	r5, r5, r4
 800ba68:	1963      	adds	r3, r4, r5
 800ba6a:	42bb      	cmp	r3, r7
 800ba6c:	db04      	blt.n	800ba78 <__s2b+0x78>
 800ba6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba72:	340a      	adds	r4, #10
 800ba74:	2509      	movs	r5, #9
 800ba76:	e7f6      	b.n	800ba66 <__s2b+0x66>
 800ba78:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ba7c:	4601      	mov	r1, r0
 800ba7e:	3b30      	subs	r3, #48	@ 0x30
 800ba80:	220a      	movs	r2, #10
 800ba82:	4630      	mov	r0, r6
 800ba84:	f7ff ff76 	bl	800b974 <__multadd>
 800ba88:	e7ee      	b.n	800ba68 <__s2b+0x68>
 800ba8a:	bf00      	nop
 800ba8c:	0800ce6d 	.word	0x0800ce6d
 800ba90:	0800cede 	.word	0x0800cede

0800ba94 <__hi0bits>:
 800ba94:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800ba98:	4603      	mov	r3, r0
 800ba9a:	bf36      	itet	cc
 800ba9c:	0403      	lslcc	r3, r0, #16
 800ba9e:	2000      	movcs	r0, #0
 800baa0:	2010      	movcc	r0, #16
 800baa2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800baa6:	bf3c      	itt	cc
 800baa8:	021b      	lslcc	r3, r3, #8
 800baaa:	3008      	addcc	r0, #8
 800baac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bab0:	bf3c      	itt	cc
 800bab2:	011b      	lslcc	r3, r3, #4
 800bab4:	3004      	addcc	r0, #4
 800bab6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800baba:	bf3c      	itt	cc
 800babc:	009b      	lslcc	r3, r3, #2
 800babe:	3002      	addcc	r0, #2
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	db05      	blt.n	800bad0 <__hi0bits+0x3c>
 800bac4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800bac8:	f100 0001 	add.w	r0, r0, #1
 800bacc:	bf08      	it	eq
 800bace:	2020      	moveq	r0, #32
 800bad0:	4770      	bx	lr

0800bad2 <__lo0bits>:
 800bad2:	6803      	ldr	r3, [r0, #0]
 800bad4:	4602      	mov	r2, r0
 800bad6:	f013 0007 	ands.w	r0, r3, #7
 800bada:	d00b      	beq.n	800baf4 <__lo0bits+0x22>
 800badc:	07d9      	lsls	r1, r3, #31
 800bade:	d421      	bmi.n	800bb24 <__lo0bits+0x52>
 800bae0:	0798      	lsls	r0, r3, #30
 800bae2:	bf49      	itett	mi
 800bae4:	085b      	lsrmi	r3, r3, #1
 800bae6:	089b      	lsrpl	r3, r3, #2
 800bae8:	2001      	movmi	r0, #1
 800baea:	6013      	strmi	r3, [r2, #0]
 800baec:	bf5c      	itt	pl
 800baee:	6013      	strpl	r3, [r2, #0]
 800baf0:	2002      	movpl	r0, #2
 800baf2:	4770      	bx	lr
 800baf4:	b299      	uxth	r1, r3
 800baf6:	b909      	cbnz	r1, 800bafc <__lo0bits+0x2a>
 800baf8:	0c1b      	lsrs	r3, r3, #16
 800bafa:	2010      	movs	r0, #16
 800bafc:	b2d9      	uxtb	r1, r3
 800bafe:	b909      	cbnz	r1, 800bb04 <__lo0bits+0x32>
 800bb00:	3008      	adds	r0, #8
 800bb02:	0a1b      	lsrs	r3, r3, #8
 800bb04:	0719      	lsls	r1, r3, #28
 800bb06:	bf04      	itt	eq
 800bb08:	091b      	lsreq	r3, r3, #4
 800bb0a:	3004      	addeq	r0, #4
 800bb0c:	0799      	lsls	r1, r3, #30
 800bb0e:	bf04      	itt	eq
 800bb10:	089b      	lsreq	r3, r3, #2
 800bb12:	3002      	addeq	r0, #2
 800bb14:	07d9      	lsls	r1, r3, #31
 800bb16:	d403      	bmi.n	800bb20 <__lo0bits+0x4e>
 800bb18:	085b      	lsrs	r3, r3, #1
 800bb1a:	f100 0001 	add.w	r0, r0, #1
 800bb1e:	d003      	beq.n	800bb28 <__lo0bits+0x56>
 800bb20:	6013      	str	r3, [r2, #0]
 800bb22:	4770      	bx	lr
 800bb24:	2000      	movs	r0, #0
 800bb26:	4770      	bx	lr
 800bb28:	2020      	movs	r0, #32
 800bb2a:	4770      	bx	lr

0800bb2c <__i2b>:
 800bb2c:	b510      	push	{r4, lr}
 800bb2e:	460c      	mov	r4, r1
 800bb30:	2101      	movs	r1, #1
 800bb32:	f7ff febd 	bl	800b8b0 <_Balloc>
 800bb36:	4602      	mov	r2, r0
 800bb38:	b928      	cbnz	r0, 800bb46 <__i2b+0x1a>
 800bb3a:	4b05      	ldr	r3, [pc, #20]	@ (800bb50 <__i2b+0x24>)
 800bb3c:	4805      	ldr	r0, [pc, #20]	@ (800bb54 <__i2b+0x28>)
 800bb3e:	f240 1145 	movw	r1, #325	@ 0x145
 800bb42:	f000 ffe3 	bl	800cb0c <__assert_func>
 800bb46:	2301      	movs	r3, #1
 800bb48:	6144      	str	r4, [r0, #20]
 800bb4a:	6103      	str	r3, [r0, #16]
 800bb4c:	bd10      	pop	{r4, pc}
 800bb4e:	bf00      	nop
 800bb50:	0800ce6d 	.word	0x0800ce6d
 800bb54:	0800cede 	.word	0x0800cede

0800bb58 <__multiply>:
 800bb58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb5c:	4614      	mov	r4, r2
 800bb5e:	690a      	ldr	r2, [r1, #16]
 800bb60:	6923      	ldr	r3, [r4, #16]
 800bb62:	429a      	cmp	r2, r3
 800bb64:	bfa8      	it	ge
 800bb66:	4623      	movge	r3, r4
 800bb68:	460f      	mov	r7, r1
 800bb6a:	bfa4      	itt	ge
 800bb6c:	460c      	movge	r4, r1
 800bb6e:	461f      	movge	r7, r3
 800bb70:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800bb74:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800bb78:	68a3      	ldr	r3, [r4, #8]
 800bb7a:	6861      	ldr	r1, [r4, #4]
 800bb7c:	eb0a 0609 	add.w	r6, sl, r9
 800bb80:	42b3      	cmp	r3, r6
 800bb82:	b085      	sub	sp, #20
 800bb84:	bfb8      	it	lt
 800bb86:	3101      	addlt	r1, #1
 800bb88:	f7ff fe92 	bl	800b8b0 <_Balloc>
 800bb8c:	b930      	cbnz	r0, 800bb9c <__multiply+0x44>
 800bb8e:	4602      	mov	r2, r0
 800bb90:	4b44      	ldr	r3, [pc, #272]	@ (800bca4 <__multiply+0x14c>)
 800bb92:	4845      	ldr	r0, [pc, #276]	@ (800bca8 <__multiply+0x150>)
 800bb94:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800bb98:	f000 ffb8 	bl	800cb0c <__assert_func>
 800bb9c:	f100 0514 	add.w	r5, r0, #20
 800bba0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800bba4:	462b      	mov	r3, r5
 800bba6:	2200      	movs	r2, #0
 800bba8:	4543      	cmp	r3, r8
 800bbaa:	d321      	bcc.n	800bbf0 <__multiply+0x98>
 800bbac:	f107 0114 	add.w	r1, r7, #20
 800bbb0:	f104 0214 	add.w	r2, r4, #20
 800bbb4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800bbb8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800bbbc:	9302      	str	r3, [sp, #8]
 800bbbe:	1b13      	subs	r3, r2, r4
 800bbc0:	3b15      	subs	r3, #21
 800bbc2:	f023 0303 	bic.w	r3, r3, #3
 800bbc6:	3304      	adds	r3, #4
 800bbc8:	f104 0715 	add.w	r7, r4, #21
 800bbcc:	42ba      	cmp	r2, r7
 800bbce:	bf38      	it	cc
 800bbd0:	2304      	movcc	r3, #4
 800bbd2:	9301      	str	r3, [sp, #4]
 800bbd4:	9b02      	ldr	r3, [sp, #8]
 800bbd6:	9103      	str	r1, [sp, #12]
 800bbd8:	428b      	cmp	r3, r1
 800bbda:	d80c      	bhi.n	800bbf6 <__multiply+0x9e>
 800bbdc:	2e00      	cmp	r6, #0
 800bbde:	dd03      	ble.n	800bbe8 <__multiply+0x90>
 800bbe0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d05b      	beq.n	800bca0 <__multiply+0x148>
 800bbe8:	6106      	str	r6, [r0, #16]
 800bbea:	b005      	add	sp, #20
 800bbec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbf0:	f843 2b04 	str.w	r2, [r3], #4
 800bbf4:	e7d8      	b.n	800bba8 <__multiply+0x50>
 800bbf6:	f8b1 a000 	ldrh.w	sl, [r1]
 800bbfa:	f1ba 0f00 	cmp.w	sl, #0
 800bbfe:	d024      	beq.n	800bc4a <__multiply+0xf2>
 800bc00:	f104 0e14 	add.w	lr, r4, #20
 800bc04:	46a9      	mov	r9, r5
 800bc06:	f04f 0c00 	mov.w	ip, #0
 800bc0a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800bc0e:	f8d9 3000 	ldr.w	r3, [r9]
 800bc12:	fa1f fb87 	uxth.w	fp, r7
 800bc16:	b29b      	uxth	r3, r3
 800bc18:	fb0a 330b 	mla	r3, sl, fp, r3
 800bc1c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800bc20:	f8d9 7000 	ldr.w	r7, [r9]
 800bc24:	4463      	add	r3, ip
 800bc26:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800bc2a:	fb0a c70b 	mla	r7, sl, fp, ip
 800bc2e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800bc32:	b29b      	uxth	r3, r3
 800bc34:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800bc38:	4572      	cmp	r2, lr
 800bc3a:	f849 3b04 	str.w	r3, [r9], #4
 800bc3e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800bc42:	d8e2      	bhi.n	800bc0a <__multiply+0xb2>
 800bc44:	9b01      	ldr	r3, [sp, #4]
 800bc46:	f845 c003 	str.w	ip, [r5, r3]
 800bc4a:	9b03      	ldr	r3, [sp, #12]
 800bc4c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800bc50:	3104      	adds	r1, #4
 800bc52:	f1b9 0f00 	cmp.w	r9, #0
 800bc56:	d021      	beq.n	800bc9c <__multiply+0x144>
 800bc58:	682b      	ldr	r3, [r5, #0]
 800bc5a:	f104 0c14 	add.w	ip, r4, #20
 800bc5e:	46ae      	mov	lr, r5
 800bc60:	f04f 0a00 	mov.w	sl, #0
 800bc64:	f8bc b000 	ldrh.w	fp, [ip]
 800bc68:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800bc6c:	fb09 770b 	mla	r7, r9, fp, r7
 800bc70:	4457      	add	r7, sl
 800bc72:	b29b      	uxth	r3, r3
 800bc74:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800bc78:	f84e 3b04 	str.w	r3, [lr], #4
 800bc7c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800bc80:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bc84:	f8be 3000 	ldrh.w	r3, [lr]
 800bc88:	fb09 330a 	mla	r3, r9, sl, r3
 800bc8c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800bc90:	4562      	cmp	r2, ip
 800bc92:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bc96:	d8e5      	bhi.n	800bc64 <__multiply+0x10c>
 800bc98:	9f01      	ldr	r7, [sp, #4]
 800bc9a:	51eb      	str	r3, [r5, r7]
 800bc9c:	3504      	adds	r5, #4
 800bc9e:	e799      	b.n	800bbd4 <__multiply+0x7c>
 800bca0:	3e01      	subs	r6, #1
 800bca2:	e79b      	b.n	800bbdc <__multiply+0x84>
 800bca4:	0800ce6d 	.word	0x0800ce6d
 800bca8:	0800cede 	.word	0x0800cede

0800bcac <__pow5mult>:
 800bcac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bcb0:	4615      	mov	r5, r2
 800bcb2:	f012 0203 	ands.w	r2, r2, #3
 800bcb6:	4607      	mov	r7, r0
 800bcb8:	460e      	mov	r6, r1
 800bcba:	d007      	beq.n	800bccc <__pow5mult+0x20>
 800bcbc:	4c25      	ldr	r4, [pc, #148]	@ (800bd54 <__pow5mult+0xa8>)
 800bcbe:	3a01      	subs	r2, #1
 800bcc0:	2300      	movs	r3, #0
 800bcc2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bcc6:	f7ff fe55 	bl	800b974 <__multadd>
 800bcca:	4606      	mov	r6, r0
 800bccc:	10ad      	asrs	r5, r5, #2
 800bcce:	d03d      	beq.n	800bd4c <__pow5mult+0xa0>
 800bcd0:	69fc      	ldr	r4, [r7, #28]
 800bcd2:	b97c      	cbnz	r4, 800bcf4 <__pow5mult+0x48>
 800bcd4:	2010      	movs	r0, #16
 800bcd6:	f7ff fd23 	bl	800b720 <malloc>
 800bcda:	4602      	mov	r2, r0
 800bcdc:	61f8      	str	r0, [r7, #28]
 800bcde:	b928      	cbnz	r0, 800bcec <__pow5mult+0x40>
 800bce0:	4b1d      	ldr	r3, [pc, #116]	@ (800bd58 <__pow5mult+0xac>)
 800bce2:	481e      	ldr	r0, [pc, #120]	@ (800bd5c <__pow5mult+0xb0>)
 800bce4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800bce8:	f000 ff10 	bl	800cb0c <__assert_func>
 800bcec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bcf0:	6004      	str	r4, [r0, #0]
 800bcf2:	60c4      	str	r4, [r0, #12]
 800bcf4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800bcf8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bcfc:	b94c      	cbnz	r4, 800bd12 <__pow5mult+0x66>
 800bcfe:	f240 2171 	movw	r1, #625	@ 0x271
 800bd02:	4638      	mov	r0, r7
 800bd04:	f7ff ff12 	bl	800bb2c <__i2b>
 800bd08:	2300      	movs	r3, #0
 800bd0a:	f8c8 0008 	str.w	r0, [r8, #8]
 800bd0e:	4604      	mov	r4, r0
 800bd10:	6003      	str	r3, [r0, #0]
 800bd12:	f04f 0900 	mov.w	r9, #0
 800bd16:	07eb      	lsls	r3, r5, #31
 800bd18:	d50a      	bpl.n	800bd30 <__pow5mult+0x84>
 800bd1a:	4631      	mov	r1, r6
 800bd1c:	4622      	mov	r2, r4
 800bd1e:	4638      	mov	r0, r7
 800bd20:	f7ff ff1a 	bl	800bb58 <__multiply>
 800bd24:	4631      	mov	r1, r6
 800bd26:	4680      	mov	r8, r0
 800bd28:	4638      	mov	r0, r7
 800bd2a:	f7ff fe01 	bl	800b930 <_Bfree>
 800bd2e:	4646      	mov	r6, r8
 800bd30:	106d      	asrs	r5, r5, #1
 800bd32:	d00b      	beq.n	800bd4c <__pow5mult+0xa0>
 800bd34:	6820      	ldr	r0, [r4, #0]
 800bd36:	b938      	cbnz	r0, 800bd48 <__pow5mult+0x9c>
 800bd38:	4622      	mov	r2, r4
 800bd3a:	4621      	mov	r1, r4
 800bd3c:	4638      	mov	r0, r7
 800bd3e:	f7ff ff0b 	bl	800bb58 <__multiply>
 800bd42:	6020      	str	r0, [r4, #0]
 800bd44:	f8c0 9000 	str.w	r9, [r0]
 800bd48:	4604      	mov	r4, r0
 800bd4a:	e7e4      	b.n	800bd16 <__pow5mult+0x6a>
 800bd4c:	4630      	mov	r0, r6
 800bd4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd52:	bf00      	nop
 800bd54:	0800cf38 	.word	0x0800cf38
 800bd58:	0800cdfe 	.word	0x0800cdfe
 800bd5c:	0800cede 	.word	0x0800cede

0800bd60 <__lshift>:
 800bd60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd64:	460c      	mov	r4, r1
 800bd66:	6849      	ldr	r1, [r1, #4]
 800bd68:	6923      	ldr	r3, [r4, #16]
 800bd6a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bd6e:	68a3      	ldr	r3, [r4, #8]
 800bd70:	4607      	mov	r7, r0
 800bd72:	4691      	mov	r9, r2
 800bd74:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bd78:	f108 0601 	add.w	r6, r8, #1
 800bd7c:	42b3      	cmp	r3, r6
 800bd7e:	db0b      	blt.n	800bd98 <__lshift+0x38>
 800bd80:	4638      	mov	r0, r7
 800bd82:	f7ff fd95 	bl	800b8b0 <_Balloc>
 800bd86:	4605      	mov	r5, r0
 800bd88:	b948      	cbnz	r0, 800bd9e <__lshift+0x3e>
 800bd8a:	4602      	mov	r2, r0
 800bd8c:	4b28      	ldr	r3, [pc, #160]	@ (800be30 <__lshift+0xd0>)
 800bd8e:	4829      	ldr	r0, [pc, #164]	@ (800be34 <__lshift+0xd4>)
 800bd90:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800bd94:	f000 feba 	bl	800cb0c <__assert_func>
 800bd98:	3101      	adds	r1, #1
 800bd9a:	005b      	lsls	r3, r3, #1
 800bd9c:	e7ee      	b.n	800bd7c <__lshift+0x1c>
 800bd9e:	2300      	movs	r3, #0
 800bda0:	f100 0114 	add.w	r1, r0, #20
 800bda4:	f100 0210 	add.w	r2, r0, #16
 800bda8:	4618      	mov	r0, r3
 800bdaa:	4553      	cmp	r3, sl
 800bdac:	db33      	blt.n	800be16 <__lshift+0xb6>
 800bdae:	6920      	ldr	r0, [r4, #16]
 800bdb0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bdb4:	f104 0314 	add.w	r3, r4, #20
 800bdb8:	f019 091f 	ands.w	r9, r9, #31
 800bdbc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bdc0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bdc4:	d02b      	beq.n	800be1e <__lshift+0xbe>
 800bdc6:	f1c9 0e20 	rsb	lr, r9, #32
 800bdca:	468a      	mov	sl, r1
 800bdcc:	2200      	movs	r2, #0
 800bdce:	6818      	ldr	r0, [r3, #0]
 800bdd0:	fa00 f009 	lsl.w	r0, r0, r9
 800bdd4:	4310      	orrs	r0, r2
 800bdd6:	f84a 0b04 	str.w	r0, [sl], #4
 800bdda:	f853 2b04 	ldr.w	r2, [r3], #4
 800bdde:	459c      	cmp	ip, r3
 800bde0:	fa22 f20e 	lsr.w	r2, r2, lr
 800bde4:	d8f3      	bhi.n	800bdce <__lshift+0x6e>
 800bde6:	ebac 0304 	sub.w	r3, ip, r4
 800bdea:	3b15      	subs	r3, #21
 800bdec:	f023 0303 	bic.w	r3, r3, #3
 800bdf0:	3304      	adds	r3, #4
 800bdf2:	f104 0015 	add.w	r0, r4, #21
 800bdf6:	4584      	cmp	ip, r0
 800bdf8:	bf38      	it	cc
 800bdfa:	2304      	movcc	r3, #4
 800bdfc:	50ca      	str	r2, [r1, r3]
 800bdfe:	b10a      	cbz	r2, 800be04 <__lshift+0xa4>
 800be00:	f108 0602 	add.w	r6, r8, #2
 800be04:	3e01      	subs	r6, #1
 800be06:	4638      	mov	r0, r7
 800be08:	612e      	str	r6, [r5, #16]
 800be0a:	4621      	mov	r1, r4
 800be0c:	f7ff fd90 	bl	800b930 <_Bfree>
 800be10:	4628      	mov	r0, r5
 800be12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be16:	f842 0f04 	str.w	r0, [r2, #4]!
 800be1a:	3301      	adds	r3, #1
 800be1c:	e7c5      	b.n	800bdaa <__lshift+0x4a>
 800be1e:	3904      	subs	r1, #4
 800be20:	f853 2b04 	ldr.w	r2, [r3], #4
 800be24:	f841 2f04 	str.w	r2, [r1, #4]!
 800be28:	459c      	cmp	ip, r3
 800be2a:	d8f9      	bhi.n	800be20 <__lshift+0xc0>
 800be2c:	e7ea      	b.n	800be04 <__lshift+0xa4>
 800be2e:	bf00      	nop
 800be30:	0800ce6d 	.word	0x0800ce6d
 800be34:	0800cede 	.word	0x0800cede

0800be38 <__mcmp>:
 800be38:	690a      	ldr	r2, [r1, #16]
 800be3a:	4603      	mov	r3, r0
 800be3c:	6900      	ldr	r0, [r0, #16]
 800be3e:	1a80      	subs	r0, r0, r2
 800be40:	b530      	push	{r4, r5, lr}
 800be42:	d10e      	bne.n	800be62 <__mcmp+0x2a>
 800be44:	3314      	adds	r3, #20
 800be46:	3114      	adds	r1, #20
 800be48:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800be4c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800be50:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800be54:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800be58:	4295      	cmp	r5, r2
 800be5a:	d003      	beq.n	800be64 <__mcmp+0x2c>
 800be5c:	d205      	bcs.n	800be6a <__mcmp+0x32>
 800be5e:	f04f 30ff 	mov.w	r0, #4294967295
 800be62:	bd30      	pop	{r4, r5, pc}
 800be64:	42a3      	cmp	r3, r4
 800be66:	d3f3      	bcc.n	800be50 <__mcmp+0x18>
 800be68:	e7fb      	b.n	800be62 <__mcmp+0x2a>
 800be6a:	2001      	movs	r0, #1
 800be6c:	e7f9      	b.n	800be62 <__mcmp+0x2a>
	...

0800be70 <__mdiff>:
 800be70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be74:	4689      	mov	r9, r1
 800be76:	4606      	mov	r6, r0
 800be78:	4611      	mov	r1, r2
 800be7a:	4648      	mov	r0, r9
 800be7c:	4614      	mov	r4, r2
 800be7e:	f7ff ffdb 	bl	800be38 <__mcmp>
 800be82:	1e05      	subs	r5, r0, #0
 800be84:	d112      	bne.n	800beac <__mdiff+0x3c>
 800be86:	4629      	mov	r1, r5
 800be88:	4630      	mov	r0, r6
 800be8a:	f7ff fd11 	bl	800b8b0 <_Balloc>
 800be8e:	4602      	mov	r2, r0
 800be90:	b928      	cbnz	r0, 800be9e <__mdiff+0x2e>
 800be92:	4b3f      	ldr	r3, [pc, #252]	@ (800bf90 <__mdiff+0x120>)
 800be94:	f240 2137 	movw	r1, #567	@ 0x237
 800be98:	483e      	ldr	r0, [pc, #248]	@ (800bf94 <__mdiff+0x124>)
 800be9a:	f000 fe37 	bl	800cb0c <__assert_func>
 800be9e:	2301      	movs	r3, #1
 800bea0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bea4:	4610      	mov	r0, r2
 800bea6:	b003      	add	sp, #12
 800bea8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800beac:	bfbc      	itt	lt
 800beae:	464b      	movlt	r3, r9
 800beb0:	46a1      	movlt	r9, r4
 800beb2:	4630      	mov	r0, r6
 800beb4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800beb8:	bfba      	itte	lt
 800beba:	461c      	movlt	r4, r3
 800bebc:	2501      	movlt	r5, #1
 800bebe:	2500      	movge	r5, #0
 800bec0:	f7ff fcf6 	bl	800b8b0 <_Balloc>
 800bec4:	4602      	mov	r2, r0
 800bec6:	b918      	cbnz	r0, 800bed0 <__mdiff+0x60>
 800bec8:	4b31      	ldr	r3, [pc, #196]	@ (800bf90 <__mdiff+0x120>)
 800beca:	f240 2145 	movw	r1, #581	@ 0x245
 800bece:	e7e3      	b.n	800be98 <__mdiff+0x28>
 800bed0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800bed4:	6926      	ldr	r6, [r4, #16]
 800bed6:	60c5      	str	r5, [r0, #12]
 800bed8:	f109 0310 	add.w	r3, r9, #16
 800bedc:	f109 0514 	add.w	r5, r9, #20
 800bee0:	f104 0e14 	add.w	lr, r4, #20
 800bee4:	f100 0b14 	add.w	fp, r0, #20
 800bee8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800beec:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800bef0:	9301      	str	r3, [sp, #4]
 800bef2:	46d9      	mov	r9, fp
 800bef4:	f04f 0c00 	mov.w	ip, #0
 800bef8:	9b01      	ldr	r3, [sp, #4]
 800befa:	f85e 0b04 	ldr.w	r0, [lr], #4
 800befe:	f853 af04 	ldr.w	sl, [r3, #4]!
 800bf02:	9301      	str	r3, [sp, #4]
 800bf04:	fa1f f38a 	uxth.w	r3, sl
 800bf08:	4619      	mov	r1, r3
 800bf0a:	b283      	uxth	r3, r0
 800bf0c:	1acb      	subs	r3, r1, r3
 800bf0e:	0c00      	lsrs	r0, r0, #16
 800bf10:	4463      	add	r3, ip
 800bf12:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800bf16:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800bf1a:	b29b      	uxth	r3, r3
 800bf1c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800bf20:	4576      	cmp	r6, lr
 800bf22:	f849 3b04 	str.w	r3, [r9], #4
 800bf26:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bf2a:	d8e5      	bhi.n	800bef8 <__mdiff+0x88>
 800bf2c:	1b33      	subs	r3, r6, r4
 800bf2e:	3b15      	subs	r3, #21
 800bf30:	f023 0303 	bic.w	r3, r3, #3
 800bf34:	3415      	adds	r4, #21
 800bf36:	3304      	adds	r3, #4
 800bf38:	42a6      	cmp	r6, r4
 800bf3a:	bf38      	it	cc
 800bf3c:	2304      	movcc	r3, #4
 800bf3e:	441d      	add	r5, r3
 800bf40:	445b      	add	r3, fp
 800bf42:	461e      	mov	r6, r3
 800bf44:	462c      	mov	r4, r5
 800bf46:	4544      	cmp	r4, r8
 800bf48:	d30e      	bcc.n	800bf68 <__mdiff+0xf8>
 800bf4a:	f108 0103 	add.w	r1, r8, #3
 800bf4e:	1b49      	subs	r1, r1, r5
 800bf50:	f021 0103 	bic.w	r1, r1, #3
 800bf54:	3d03      	subs	r5, #3
 800bf56:	45a8      	cmp	r8, r5
 800bf58:	bf38      	it	cc
 800bf5a:	2100      	movcc	r1, #0
 800bf5c:	440b      	add	r3, r1
 800bf5e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bf62:	b191      	cbz	r1, 800bf8a <__mdiff+0x11a>
 800bf64:	6117      	str	r7, [r2, #16]
 800bf66:	e79d      	b.n	800bea4 <__mdiff+0x34>
 800bf68:	f854 1b04 	ldr.w	r1, [r4], #4
 800bf6c:	46e6      	mov	lr, ip
 800bf6e:	0c08      	lsrs	r0, r1, #16
 800bf70:	fa1c fc81 	uxtah	ip, ip, r1
 800bf74:	4471      	add	r1, lr
 800bf76:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800bf7a:	b289      	uxth	r1, r1
 800bf7c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800bf80:	f846 1b04 	str.w	r1, [r6], #4
 800bf84:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bf88:	e7dd      	b.n	800bf46 <__mdiff+0xd6>
 800bf8a:	3f01      	subs	r7, #1
 800bf8c:	e7e7      	b.n	800bf5e <__mdiff+0xee>
 800bf8e:	bf00      	nop
 800bf90:	0800ce6d 	.word	0x0800ce6d
 800bf94:	0800cede 	.word	0x0800cede

0800bf98 <__ulp>:
 800bf98:	b082      	sub	sp, #8
 800bf9a:	ed8d 0b00 	vstr	d0, [sp]
 800bf9e:	9a01      	ldr	r2, [sp, #4]
 800bfa0:	4b0f      	ldr	r3, [pc, #60]	@ (800bfe0 <__ulp+0x48>)
 800bfa2:	4013      	ands	r3, r2
 800bfa4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	dc08      	bgt.n	800bfbe <__ulp+0x26>
 800bfac:	425b      	negs	r3, r3
 800bfae:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800bfb2:	ea4f 5223 	mov.w	r2, r3, asr #20
 800bfb6:	da04      	bge.n	800bfc2 <__ulp+0x2a>
 800bfb8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800bfbc:	4113      	asrs	r3, r2
 800bfbe:	2200      	movs	r2, #0
 800bfc0:	e008      	b.n	800bfd4 <__ulp+0x3c>
 800bfc2:	f1a2 0314 	sub.w	r3, r2, #20
 800bfc6:	2b1e      	cmp	r3, #30
 800bfc8:	bfda      	itte	le
 800bfca:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800bfce:	40da      	lsrle	r2, r3
 800bfd0:	2201      	movgt	r2, #1
 800bfd2:	2300      	movs	r3, #0
 800bfd4:	4619      	mov	r1, r3
 800bfd6:	4610      	mov	r0, r2
 800bfd8:	ec41 0b10 	vmov	d0, r0, r1
 800bfdc:	b002      	add	sp, #8
 800bfde:	4770      	bx	lr
 800bfe0:	7ff00000 	.word	0x7ff00000

0800bfe4 <__b2d>:
 800bfe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bfe8:	6906      	ldr	r6, [r0, #16]
 800bfea:	f100 0814 	add.w	r8, r0, #20
 800bfee:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800bff2:	1f37      	subs	r7, r6, #4
 800bff4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800bff8:	4610      	mov	r0, r2
 800bffa:	f7ff fd4b 	bl	800ba94 <__hi0bits>
 800bffe:	f1c0 0320 	rsb	r3, r0, #32
 800c002:	280a      	cmp	r0, #10
 800c004:	600b      	str	r3, [r1, #0]
 800c006:	491b      	ldr	r1, [pc, #108]	@ (800c074 <__b2d+0x90>)
 800c008:	dc15      	bgt.n	800c036 <__b2d+0x52>
 800c00a:	f1c0 0c0b 	rsb	ip, r0, #11
 800c00e:	fa22 f30c 	lsr.w	r3, r2, ip
 800c012:	45b8      	cmp	r8, r7
 800c014:	ea43 0501 	orr.w	r5, r3, r1
 800c018:	bf34      	ite	cc
 800c01a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c01e:	2300      	movcs	r3, #0
 800c020:	3015      	adds	r0, #21
 800c022:	fa02 f000 	lsl.w	r0, r2, r0
 800c026:	fa23 f30c 	lsr.w	r3, r3, ip
 800c02a:	4303      	orrs	r3, r0
 800c02c:	461c      	mov	r4, r3
 800c02e:	ec45 4b10 	vmov	d0, r4, r5
 800c032:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c036:	45b8      	cmp	r8, r7
 800c038:	bf3a      	itte	cc
 800c03a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c03e:	f1a6 0708 	subcc.w	r7, r6, #8
 800c042:	2300      	movcs	r3, #0
 800c044:	380b      	subs	r0, #11
 800c046:	d012      	beq.n	800c06e <__b2d+0x8a>
 800c048:	f1c0 0120 	rsb	r1, r0, #32
 800c04c:	fa23 f401 	lsr.w	r4, r3, r1
 800c050:	4082      	lsls	r2, r0
 800c052:	4322      	orrs	r2, r4
 800c054:	4547      	cmp	r7, r8
 800c056:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800c05a:	bf8c      	ite	hi
 800c05c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800c060:	2200      	movls	r2, #0
 800c062:	4083      	lsls	r3, r0
 800c064:	40ca      	lsrs	r2, r1
 800c066:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800c06a:	4313      	orrs	r3, r2
 800c06c:	e7de      	b.n	800c02c <__b2d+0x48>
 800c06e:	ea42 0501 	orr.w	r5, r2, r1
 800c072:	e7db      	b.n	800c02c <__b2d+0x48>
 800c074:	3ff00000 	.word	0x3ff00000

0800c078 <__d2b>:
 800c078:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c07c:	460f      	mov	r7, r1
 800c07e:	2101      	movs	r1, #1
 800c080:	ec59 8b10 	vmov	r8, r9, d0
 800c084:	4616      	mov	r6, r2
 800c086:	f7ff fc13 	bl	800b8b0 <_Balloc>
 800c08a:	4604      	mov	r4, r0
 800c08c:	b930      	cbnz	r0, 800c09c <__d2b+0x24>
 800c08e:	4602      	mov	r2, r0
 800c090:	4b23      	ldr	r3, [pc, #140]	@ (800c120 <__d2b+0xa8>)
 800c092:	4824      	ldr	r0, [pc, #144]	@ (800c124 <__d2b+0xac>)
 800c094:	f240 310f 	movw	r1, #783	@ 0x30f
 800c098:	f000 fd38 	bl	800cb0c <__assert_func>
 800c09c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c0a0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c0a4:	b10d      	cbz	r5, 800c0aa <__d2b+0x32>
 800c0a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c0aa:	9301      	str	r3, [sp, #4]
 800c0ac:	f1b8 0300 	subs.w	r3, r8, #0
 800c0b0:	d023      	beq.n	800c0fa <__d2b+0x82>
 800c0b2:	4668      	mov	r0, sp
 800c0b4:	9300      	str	r3, [sp, #0]
 800c0b6:	f7ff fd0c 	bl	800bad2 <__lo0bits>
 800c0ba:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c0be:	b1d0      	cbz	r0, 800c0f6 <__d2b+0x7e>
 800c0c0:	f1c0 0320 	rsb	r3, r0, #32
 800c0c4:	fa02 f303 	lsl.w	r3, r2, r3
 800c0c8:	430b      	orrs	r3, r1
 800c0ca:	40c2      	lsrs	r2, r0
 800c0cc:	6163      	str	r3, [r4, #20]
 800c0ce:	9201      	str	r2, [sp, #4]
 800c0d0:	9b01      	ldr	r3, [sp, #4]
 800c0d2:	61a3      	str	r3, [r4, #24]
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	bf0c      	ite	eq
 800c0d8:	2201      	moveq	r2, #1
 800c0da:	2202      	movne	r2, #2
 800c0dc:	6122      	str	r2, [r4, #16]
 800c0de:	b1a5      	cbz	r5, 800c10a <__d2b+0x92>
 800c0e0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c0e4:	4405      	add	r5, r0
 800c0e6:	603d      	str	r5, [r7, #0]
 800c0e8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c0ec:	6030      	str	r0, [r6, #0]
 800c0ee:	4620      	mov	r0, r4
 800c0f0:	b003      	add	sp, #12
 800c0f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c0f6:	6161      	str	r1, [r4, #20]
 800c0f8:	e7ea      	b.n	800c0d0 <__d2b+0x58>
 800c0fa:	a801      	add	r0, sp, #4
 800c0fc:	f7ff fce9 	bl	800bad2 <__lo0bits>
 800c100:	9b01      	ldr	r3, [sp, #4]
 800c102:	6163      	str	r3, [r4, #20]
 800c104:	3020      	adds	r0, #32
 800c106:	2201      	movs	r2, #1
 800c108:	e7e8      	b.n	800c0dc <__d2b+0x64>
 800c10a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c10e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c112:	6038      	str	r0, [r7, #0]
 800c114:	6918      	ldr	r0, [r3, #16]
 800c116:	f7ff fcbd 	bl	800ba94 <__hi0bits>
 800c11a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c11e:	e7e5      	b.n	800c0ec <__d2b+0x74>
 800c120:	0800ce6d 	.word	0x0800ce6d
 800c124:	0800cede 	.word	0x0800cede

0800c128 <__ratio>:
 800c128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c12c:	b085      	sub	sp, #20
 800c12e:	e9cd 1000 	strd	r1, r0, [sp]
 800c132:	a902      	add	r1, sp, #8
 800c134:	f7ff ff56 	bl	800bfe4 <__b2d>
 800c138:	9800      	ldr	r0, [sp, #0]
 800c13a:	a903      	add	r1, sp, #12
 800c13c:	ec55 4b10 	vmov	r4, r5, d0
 800c140:	f7ff ff50 	bl	800bfe4 <__b2d>
 800c144:	9b01      	ldr	r3, [sp, #4]
 800c146:	6919      	ldr	r1, [r3, #16]
 800c148:	9b00      	ldr	r3, [sp, #0]
 800c14a:	691b      	ldr	r3, [r3, #16]
 800c14c:	1ac9      	subs	r1, r1, r3
 800c14e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800c152:	1a9b      	subs	r3, r3, r2
 800c154:	ec5b ab10 	vmov	sl, fp, d0
 800c158:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	bfce      	itee	gt
 800c160:	462a      	movgt	r2, r5
 800c162:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c166:	465a      	movle	r2, fp
 800c168:	462f      	mov	r7, r5
 800c16a:	46d9      	mov	r9, fp
 800c16c:	bfcc      	ite	gt
 800c16e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c172:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800c176:	464b      	mov	r3, r9
 800c178:	4652      	mov	r2, sl
 800c17a:	4620      	mov	r0, r4
 800c17c:	4639      	mov	r1, r7
 800c17e:	f7f4 fb8d 	bl	800089c <__aeabi_ddiv>
 800c182:	ec41 0b10 	vmov	d0, r0, r1
 800c186:	b005      	add	sp, #20
 800c188:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c18c <__copybits>:
 800c18c:	3901      	subs	r1, #1
 800c18e:	b570      	push	{r4, r5, r6, lr}
 800c190:	1149      	asrs	r1, r1, #5
 800c192:	6914      	ldr	r4, [r2, #16]
 800c194:	3101      	adds	r1, #1
 800c196:	f102 0314 	add.w	r3, r2, #20
 800c19a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c19e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c1a2:	1f05      	subs	r5, r0, #4
 800c1a4:	42a3      	cmp	r3, r4
 800c1a6:	d30c      	bcc.n	800c1c2 <__copybits+0x36>
 800c1a8:	1aa3      	subs	r3, r4, r2
 800c1aa:	3b11      	subs	r3, #17
 800c1ac:	f023 0303 	bic.w	r3, r3, #3
 800c1b0:	3211      	adds	r2, #17
 800c1b2:	42a2      	cmp	r2, r4
 800c1b4:	bf88      	it	hi
 800c1b6:	2300      	movhi	r3, #0
 800c1b8:	4418      	add	r0, r3
 800c1ba:	2300      	movs	r3, #0
 800c1bc:	4288      	cmp	r0, r1
 800c1be:	d305      	bcc.n	800c1cc <__copybits+0x40>
 800c1c0:	bd70      	pop	{r4, r5, r6, pc}
 800c1c2:	f853 6b04 	ldr.w	r6, [r3], #4
 800c1c6:	f845 6f04 	str.w	r6, [r5, #4]!
 800c1ca:	e7eb      	b.n	800c1a4 <__copybits+0x18>
 800c1cc:	f840 3b04 	str.w	r3, [r0], #4
 800c1d0:	e7f4      	b.n	800c1bc <__copybits+0x30>

0800c1d2 <__any_on>:
 800c1d2:	f100 0214 	add.w	r2, r0, #20
 800c1d6:	6900      	ldr	r0, [r0, #16]
 800c1d8:	114b      	asrs	r3, r1, #5
 800c1da:	4298      	cmp	r0, r3
 800c1dc:	b510      	push	{r4, lr}
 800c1de:	db11      	blt.n	800c204 <__any_on+0x32>
 800c1e0:	dd0a      	ble.n	800c1f8 <__any_on+0x26>
 800c1e2:	f011 011f 	ands.w	r1, r1, #31
 800c1e6:	d007      	beq.n	800c1f8 <__any_on+0x26>
 800c1e8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c1ec:	fa24 f001 	lsr.w	r0, r4, r1
 800c1f0:	fa00 f101 	lsl.w	r1, r0, r1
 800c1f4:	428c      	cmp	r4, r1
 800c1f6:	d10b      	bne.n	800c210 <__any_on+0x3e>
 800c1f8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c1fc:	4293      	cmp	r3, r2
 800c1fe:	d803      	bhi.n	800c208 <__any_on+0x36>
 800c200:	2000      	movs	r0, #0
 800c202:	bd10      	pop	{r4, pc}
 800c204:	4603      	mov	r3, r0
 800c206:	e7f7      	b.n	800c1f8 <__any_on+0x26>
 800c208:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c20c:	2900      	cmp	r1, #0
 800c20e:	d0f5      	beq.n	800c1fc <__any_on+0x2a>
 800c210:	2001      	movs	r0, #1
 800c212:	e7f6      	b.n	800c202 <__any_on+0x30>

0800c214 <_strtol_l.constprop.0>:
 800c214:	2b24      	cmp	r3, #36	@ 0x24
 800c216:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c21a:	4686      	mov	lr, r0
 800c21c:	4690      	mov	r8, r2
 800c21e:	d801      	bhi.n	800c224 <_strtol_l.constprop.0+0x10>
 800c220:	2b01      	cmp	r3, #1
 800c222:	d106      	bne.n	800c232 <_strtol_l.constprop.0+0x1e>
 800c224:	f7fe f860 	bl	800a2e8 <__errno>
 800c228:	2316      	movs	r3, #22
 800c22a:	6003      	str	r3, [r0, #0]
 800c22c:	2000      	movs	r0, #0
 800c22e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c232:	4834      	ldr	r0, [pc, #208]	@ (800c304 <_strtol_l.constprop.0+0xf0>)
 800c234:	460d      	mov	r5, r1
 800c236:	462a      	mov	r2, r5
 800c238:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c23c:	5d06      	ldrb	r6, [r0, r4]
 800c23e:	f016 0608 	ands.w	r6, r6, #8
 800c242:	d1f8      	bne.n	800c236 <_strtol_l.constprop.0+0x22>
 800c244:	2c2d      	cmp	r4, #45	@ 0x2d
 800c246:	d12d      	bne.n	800c2a4 <_strtol_l.constprop.0+0x90>
 800c248:	782c      	ldrb	r4, [r5, #0]
 800c24a:	2601      	movs	r6, #1
 800c24c:	1c95      	adds	r5, r2, #2
 800c24e:	f033 0210 	bics.w	r2, r3, #16
 800c252:	d109      	bne.n	800c268 <_strtol_l.constprop.0+0x54>
 800c254:	2c30      	cmp	r4, #48	@ 0x30
 800c256:	d12a      	bne.n	800c2ae <_strtol_l.constprop.0+0x9a>
 800c258:	782a      	ldrb	r2, [r5, #0]
 800c25a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c25e:	2a58      	cmp	r2, #88	@ 0x58
 800c260:	d125      	bne.n	800c2ae <_strtol_l.constprop.0+0x9a>
 800c262:	786c      	ldrb	r4, [r5, #1]
 800c264:	2310      	movs	r3, #16
 800c266:	3502      	adds	r5, #2
 800c268:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800c26c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800c270:	2200      	movs	r2, #0
 800c272:	fbbc f9f3 	udiv	r9, ip, r3
 800c276:	4610      	mov	r0, r2
 800c278:	fb03 ca19 	mls	sl, r3, r9, ip
 800c27c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800c280:	2f09      	cmp	r7, #9
 800c282:	d81b      	bhi.n	800c2bc <_strtol_l.constprop.0+0xa8>
 800c284:	463c      	mov	r4, r7
 800c286:	42a3      	cmp	r3, r4
 800c288:	dd27      	ble.n	800c2da <_strtol_l.constprop.0+0xc6>
 800c28a:	1c57      	adds	r7, r2, #1
 800c28c:	d007      	beq.n	800c29e <_strtol_l.constprop.0+0x8a>
 800c28e:	4581      	cmp	r9, r0
 800c290:	d320      	bcc.n	800c2d4 <_strtol_l.constprop.0+0xc0>
 800c292:	d101      	bne.n	800c298 <_strtol_l.constprop.0+0x84>
 800c294:	45a2      	cmp	sl, r4
 800c296:	db1d      	blt.n	800c2d4 <_strtol_l.constprop.0+0xc0>
 800c298:	fb00 4003 	mla	r0, r0, r3, r4
 800c29c:	2201      	movs	r2, #1
 800c29e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c2a2:	e7eb      	b.n	800c27c <_strtol_l.constprop.0+0x68>
 800c2a4:	2c2b      	cmp	r4, #43	@ 0x2b
 800c2a6:	bf04      	itt	eq
 800c2a8:	782c      	ldrbeq	r4, [r5, #0]
 800c2aa:	1c95      	addeq	r5, r2, #2
 800c2ac:	e7cf      	b.n	800c24e <_strtol_l.constprop.0+0x3a>
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d1da      	bne.n	800c268 <_strtol_l.constprop.0+0x54>
 800c2b2:	2c30      	cmp	r4, #48	@ 0x30
 800c2b4:	bf0c      	ite	eq
 800c2b6:	2308      	moveq	r3, #8
 800c2b8:	230a      	movne	r3, #10
 800c2ba:	e7d5      	b.n	800c268 <_strtol_l.constprop.0+0x54>
 800c2bc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800c2c0:	2f19      	cmp	r7, #25
 800c2c2:	d801      	bhi.n	800c2c8 <_strtol_l.constprop.0+0xb4>
 800c2c4:	3c37      	subs	r4, #55	@ 0x37
 800c2c6:	e7de      	b.n	800c286 <_strtol_l.constprop.0+0x72>
 800c2c8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800c2cc:	2f19      	cmp	r7, #25
 800c2ce:	d804      	bhi.n	800c2da <_strtol_l.constprop.0+0xc6>
 800c2d0:	3c57      	subs	r4, #87	@ 0x57
 800c2d2:	e7d8      	b.n	800c286 <_strtol_l.constprop.0+0x72>
 800c2d4:	f04f 32ff 	mov.w	r2, #4294967295
 800c2d8:	e7e1      	b.n	800c29e <_strtol_l.constprop.0+0x8a>
 800c2da:	1c53      	adds	r3, r2, #1
 800c2dc:	d108      	bne.n	800c2f0 <_strtol_l.constprop.0+0xdc>
 800c2de:	2322      	movs	r3, #34	@ 0x22
 800c2e0:	f8ce 3000 	str.w	r3, [lr]
 800c2e4:	4660      	mov	r0, ip
 800c2e6:	f1b8 0f00 	cmp.w	r8, #0
 800c2ea:	d0a0      	beq.n	800c22e <_strtol_l.constprop.0+0x1a>
 800c2ec:	1e69      	subs	r1, r5, #1
 800c2ee:	e006      	b.n	800c2fe <_strtol_l.constprop.0+0xea>
 800c2f0:	b106      	cbz	r6, 800c2f4 <_strtol_l.constprop.0+0xe0>
 800c2f2:	4240      	negs	r0, r0
 800c2f4:	f1b8 0f00 	cmp.w	r8, #0
 800c2f8:	d099      	beq.n	800c22e <_strtol_l.constprop.0+0x1a>
 800c2fa:	2a00      	cmp	r2, #0
 800c2fc:	d1f6      	bne.n	800c2ec <_strtol_l.constprop.0+0xd8>
 800c2fe:	f8c8 1000 	str.w	r1, [r8]
 800c302:	e794      	b.n	800c22e <_strtol_l.constprop.0+0x1a>
 800c304:	0800d039 	.word	0x0800d039

0800c308 <_strtol_r>:
 800c308:	f7ff bf84 	b.w	800c214 <_strtol_l.constprop.0>

0800c30c <__ascii_wctomb>:
 800c30c:	4603      	mov	r3, r0
 800c30e:	4608      	mov	r0, r1
 800c310:	b141      	cbz	r1, 800c324 <__ascii_wctomb+0x18>
 800c312:	2aff      	cmp	r2, #255	@ 0xff
 800c314:	d904      	bls.n	800c320 <__ascii_wctomb+0x14>
 800c316:	228a      	movs	r2, #138	@ 0x8a
 800c318:	601a      	str	r2, [r3, #0]
 800c31a:	f04f 30ff 	mov.w	r0, #4294967295
 800c31e:	4770      	bx	lr
 800c320:	700a      	strb	r2, [r1, #0]
 800c322:	2001      	movs	r0, #1
 800c324:	4770      	bx	lr

0800c326 <__ssputs_r>:
 800c326:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c32a:	688e      	ldr	r6, [r1, #8]
 800c32c:	461f      	mov	r7, r3
 800c32e:	42be      	cmp	r6, r7
 800c330:	680b      	ldr	r3, [r1, #0]
 800c332:	4682      	mov	sl, r0
 800c334:	460c      	mov	r4, r1
 800c336:	4690      	mov	r8, r2
 800c338:	d82d      	bhi.n	800c396 <__ssputs_r+0x70>
 800c33a:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c33e:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c342:	d026      	beq.n	800c392 <__ssputs_r+0x6c>
 800c344:	6965      	ldr	r5, [r4, #20]
 800c346:	6909      	ldr	r1, [r1, #16]
 800c348:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c34c:	eba3 0901 	sub.w	r9, r3, r1
 800c350:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c354:	1c7b      	adds	r3, r7, #1
 800c356:	444b      	add	r3, r9
 800c358:	106d      	asrs	r5, r5, #1
 800c35a:	429d      	cmp	r5, r3
 800c35c:	bf38      	it	cc
 800c35e:	461d      	movcc	r5, r3
 800c360:	0553      	lsls	r3, r2, #21
 800c362:	d527      	bpl.n	800c3b4 <__ssputs_r+0x8e>
 800c364:	4629      	mov	r1, r5
 800c366:	f7ff fa05 	bl	800b774 <_malloc_r>
 800c36a:	4606      	mov	r6, r0
 800c36c:	b360      	cbz	r0, 800c3c8 <__ssputs_r+0xa2>
 800c36e:	6921      	ldr	r1, [r4, #16]
 800c370:	464a      	mov	r2, r9
 800c372:	f7fd ffe6 	bl	800a342 <memcpy>
 800c376:	89a3      	ldrh	r3, [r4, #12]
 800c378:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c37c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c380:	81a3      	strh	r3, [r4, #12]
 800c382:	6126      	str	r6, [r4, #16]
 800c384:	6165      	str	r5, [r4, #20]
 800c386:	444e      	add	r6, r9
 800c388:	eba5 0509 	sub.w	r5, r5, r9
 800c38c:	6026      	str	r6, [r4, #0]
 800c38e:	60a5      	str	r5, [r4, #8]
 800c390:	463e      	mov	r6, r7
 800c392:	42be      	cmp	r6, r7
 800c394:	d900      	bls.n	800c398 <__ssputs_r+0x72>
 800c396:	463e      	mov	r6, r7
 800c398:	6820      	ldr	r0, [r4, #0]
 800c39a:	4632      	mov	r2, r6
 800c39c:	4641      	mov	r1, r8
 800c39e:	f000 fb69 	bl	800ca74 <memmove>
 800c3a2:	68a3      	ldr	r3, [r4, #8]
 800c3a4:	1b9b      	subs	r3, r3, r6
 800c3a6:	60a3      	str	r3, [r4, #8]
 800c3a8:	6823      	ldr	r3, [r4, #0]
 800c3aa:	4433      	add	r3, r6
 800c3ac:	6023      	str	r3, [r4, #0]
 800c3ae:	2000      	movs	r0, #0
 800c3b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c3b4:	462a      	mov	r2, r5
 800c3b6:	f000 fbdb 	bl	800cb70 <_realloc_r>
 800c3ba:	4606      	mov	r6, r0
 800c3bc:	2800      	cmp	r0, #0
 800c3be:	d1e0      	bne.n	800c382 <__ssputs_r+0x5c>
 800c3c0:	6921      	ldr	r1, [r4, #16]
 800c3c2:	4650      	mov	r0, sl
 800c3c4:	f7fe fe28 	bl	800b018 <_free_r>
 800c3c8:	230c      	movs	r3, #12
 800c3ca:	f8ca 3000 	str.w	r3, [sl]
 800c3ce:	89a3      	ldrh	r3, [r4, #12]
 800c3d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c3d4:	81a3      	strh	r3, [r4, #12]
 800c3d6:	f04f 30ff 	mov.w	r0, #4294967295
 800c3da:	e7e9      	b.n	800c3b0 <__ssputs_r+0x8a>

0800c3dc <_svfiprintf_r>:
 800c3dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3e0:	4698      	mov	r8, r3
 800c3e2:	898b      	ldrh	r3, [r1, #12]
 800c3e4:	061b      	lsls	r3, r3, #24
 800c3e6:	b09d      	sub	sp, #116	@ 0x74
 800c3e8:	4607      	mov	r7, r0
 800c3ea:	460d      	mov	r5, r1
 800c3ec:	4614      	mov	r4, r2
 800c3ee:	d510      	bpl.n	800c412 <_svfiprintf_r+0x36>
 800c3f0:	690b      	ldr	r3, [r1, #16]
 800c3f2:	b973      	cbnz	r3, 800c412 <_svfiprintf_r+0x36>
 800c3f4:	2140      	movs	r1, #64	@ 0x40
 800c3f6:	f7ff f9bd 	bl	800b774 <_malloc_r>
 800c3fa:	6028      	str	r0, [r5, #0]
 800c3fc:	6128      	str	r0, [r5, #16]
 800c3fe:	b930      	cbnz	r0, 800c40e <_svfiprintf_r+0x32>
 800c400:	230c      	movs	r3, #12
 800c402:	603b      	str	r3, [r7, #0]
 800c404:	f04f 30ff 	mov.w	r0, #4294967295
 800c408:	b01d      	add	sp, #116	@ 0x74
 800c40a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c40e:	2340      	movs	r3, #64	@ 0x40
 800c410:	616b      	str	r3, [r5, #20]
 800c412:	2300      	movs	r3, #0
 800c414:	9309      	str	r3, [sp, #36]	@ 0x24
 800c416:	2320      	movs	r3, #32
 800c418:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c41c:	f8cd 800c 	str.w	r8, [sp, #12]
 800c420:	2330      	movs	r3, #48	@ 0x30
 800c422:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c5c0 <_svfiprintf_r+0x1e4>
 800c426:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c42a:	f04f 0901 	mov.w	r9, #1
 800c42e:	4623      	mov	r3, r4
 800c430:	469a      	mov	sl, r3
 800c432:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c436:	b10a      	cbz	r2, 800c43c <_svfiprintf_r+0x60>
 800c438:	2a25      	cmp	r2, #37	@ 0x25
 800c43a:	d1f9      	bne.n	800c430 <_svfiprintf_r+0x54>
 800c43c:	ebba 0b04 	subs.w	fp, sl, r4
 800c440:	d00b      	beq.n	800c45a <_svfiprintf_r+0x7e>
 800c442:	465b      	mov	r3, fp
 800c444:	4622      	mov	r2, r4
 800c446:	4629      	mov	r1, r5
 800c448:	4638      	mov	r0, r7
 800c44a:	f7ff ff6c 	bl	800c326 <__ssputs_r>
 800c44e:	3001      	adds	r0, #1
 800c450:	f000 80a7 	beq.w	800c5a2 <_svfiprintf_r+0x1c6>
 800c454:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c456:	445a      	add	r2, fp
 800c458:	9209      	str	r2, [sp, #36]	@ 0x24
 800c45a:	f89a 3000 	ldrb.w	r3, [sl]
 800c45e:	2b00      	cmp	r3, #0
 800c460:	f000 809f 	beq.w	800c5a2 <_svfiprintf_r+0x1c6>
 800c464:	2300      	movs	r3, #0
 800c466:	f04f 32ff 	mov.w	r2, #4294967295
 800c46a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c46e:	f10a 0a01 	add.w	sl, sl, #1
 800c472:	9304      	str	r3, [sp, #16]
 800c474:	9307      	str	r3, [sp, #28]
 800c476:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c47a:	931a      	str	r3, [sp, #104]	@ 0x68
 800c47c:	4654      	mov	r4, sl
 800c47e:	2205      	movs	r2, #5
 800c480:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c484:	484e      	ldr	r0, [pc, #312]	@ (800c5c0 <_svfiprintf_r+0x1e4>)
 800c486:	f7f3 fecb 	bl	8000220 <memchr>
 800c48a:	9a04      	ldr	r2, [sp, #16]
 800c48c:	b9d8      	cbnz	r0, 800c4c6 <_svfiprintf_r+0xea>
 800c48e:	06d0      	lsls	r0, r2, #27
 800c490:	bf44      	itt	mi
 800c492:	2320      	movmi	r3, #32
 800c494:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c498:	0711      	lsls	r1, r2, #28
 800c49a:	bf44      	itt	mi
 800c49c:	232b      	movmi	r3, #43	@ 0x2b
 800c49e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c4a2:	f89a 3000 	ldrb.w	r3, [sl]
 800c4a6:	2b2a      	cmp	r3, #42	@ 0x2a
 800c4a8:	d015      	beq.n	800c4d6 <_svfiprintf_r+0xfa>
 800c4aa:	9a07      	ldr	r2, [sp, #28]
 800c4ac:	4654      	mov	r4, sl
 800c4ae:	2000      	movs	r0, #0
 800c4b0:	f04f 0c0a 	mov.w	ip, #10
 800c4b4:	4621      	mov	r1, r4
 800c4b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c4ba:	3b30      	subs	r3, #48	@ 0x30
 800c4bc:	2b09      	cmp	r3, #9
 800c4be:	d94b      	bls.n	800c558 <_svfiprintf_r+0x17c>
 800c4c0:	b1b0      	cbz	r0, 800c4f0 <_svfiprintf_r+0x114>
 800c4c2:	9207      	str	r2, [sp, #28]
 800c4c4:	e014      	b.n	800c4f0 <_svfiprintf_r+0x114>
 800c4c6:	eba0 0308 	sub.w	r3, r0, r8
 800c4ca:	fa09 f303 	lsl.w	r3, r9, r3
 800c4ce:	4313      	orrs	r3, r2
 800c4d0:	9304      	str	r3, [sp, #16]
 800c4d2:	46a2      	mov	sl, r4
 800c4d4:	e7d2      	b.n	800c47c <_svfiprintf_r+0xa0>
 800c4d6:	9b03      	ldr	r3, [sp, #12]
 800c4d8:	1d19      	adds	r1, r3, #4
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	9103      	str	r1, [sp, #12]
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	bfbb      	ittet	lt
 800c4e2:	425b      	neglt	r3, r3
 800c4e4:	f042 0202 	orrlt.w	r2, r2, #2
 800c4e8:	9307      	strge	r3, [sp, #28]
 800c4ea:	9307      	strlt	r3, [sp, #28]
 800c4ec:	bfb8      	it	lt
 800c4ee:	9204      	strlt	r2, [sp, #16]
 800c4f0:	7823      	ldrb	r3, [r4, #0]
 800c4f2:	2b2e      	cmp	r3, #46	@ 0x2e
 800c4f4:	d10a      	bne.n	800c50c <_svfiprintf_r+0x130>
 800c4f6:	7863      	ldrb	r3, [r4, #1]
 800c4f8:	2b2a      	cmp	r3, #42	@ 0x2a
 800c4fa:	d132      	bne.n	800c562 <_svfiprintf_r+0x186>
 800c4fc:	9b03      	ldr	r3, [sp, #12]
 800c4fe:	1d1a      	adds	r2, r3, #4
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	9203      	str	r2, [sp, #12]
 800c504:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c508:	3402      	adds	r4, #2
 800c50a:	9305      	str	r3, [sp, #20]
 800c50c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c5d0 <_svfiprintf_r+0x1f4>
 800c510:	7821      	ldrb	r1, [r4, #0]
 800c512:	2203      	movs	r2, #3
 800c514:	4650      	mov	r0, sl
 800c516:	f7f3 fe83 	bl	8000220 <memchr>
 800c51a:	b138      	cbz	r0, 800c52c <_svfiprintf_r+0x150>
 800c51c:	9b04      	ldr	r3, [sp, #16]
 800c51e:	eba0 000a 	sub.w	r0, r0, sl
 800c522:	2240      	movs	r2, #64	@ 0x40
 800c524:	4082      	lsls	r2, r0
 800c526:	4313      	orrs	r3, r2
 800c528:	3401      	adds	r4, #1
 800c52a:	9304      	str	r3, [sp, #16]
 800c52c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c530:	4824      	ldr	r0, [pc, #144]	@ (800c5c4 <_svfiprintf_r+0x1e8>)
 800c532:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c536:	2206      	movs	r2, #6
 800c538:	f7f3 fe72 	bl	8000220 <memchr>
 800c53c:	2800      	cmp	r0, #0
 800c53e:	d036      	beq.n	800c5ae <_svfiprintf_r+0x1d2>
 800c540:	4b21      	ldr	r3, [pc, #132]	@ (800c5c8 <_svfiprintf_r+0x1ec>)
 800c542:	bb1b      	cbnz	r3, 800c58c <_svfiprintf_r+0x1b0>
 800c544:	9b03      	ldr	r3, [sp, #12]
 800c546:	3307      	adds	r3, #7
 800c548:	f023 0307 	bic.w	r3, r3, #7
 800c54c:	3308      	adds	r3, #8
 800c54e:	9303      	str	r3, [sp, #12]
 800c550:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c552:	4433      	add	r3, r6
 800c554:	9309      	str	r3, [sp, #36]	@ 0x24
 800c556:	e76a      	b.n	800c42e <_svfiprintf_r+0x52>
 800c558:	fb0c 3202 	mla	r2, ip, r2, r3
 800c55c:	460c      	mov	r4, r1
 800c55e:	2001      	movs	r0, #1
 800c560:	e7a8      	b.n	800c4b4 <_svfiprintf_r+0xd8>
 800c562:	2300      	movs	r3, #0
 800c564:	3401      	adds	r4, #1
 800c566:	9305      	str	r3, [sp, #20]
 800c568:	4619      	mov	r1, r3
 800c56a:	f04f 0c0a 	mov.w	ip, #10
 800c56e:	4620      	mov	r0, r4
 800c570:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c574:	3a30      	subs	r2, #48	@ 0x30
 800c576:	2a09      	cmp	r2, #9
 800c578:	d903      	bls.n	800c582 <_svfiprintf_r+0x1a6>
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d0c6      	beq.n	800c50c <_svfiprintf_r+0x130>
 800c57e:	9105      	str	r1, [sp, #20]
 800c580:	e7c4      	b.n	800c50c <_svfiprintf_r+0x130>
 800c582:	fb0c 2101 	mla	r1, ip, r1, r2
 800c586:	4604      	mov	r4, r0
 800c588:	2301      	movs	r3, #1
 800c58a:	e7f0      	b.n	800c56e <_svfiprintf_r+0x192>
 800c58c:	ab03      	add	r3, sp, #12
 800c58e:	9300      	str	r3, [sp, #0]
 800c590:	462a      	mov	r2, r5
 800c592:	4b0e      	ldr	r3, [pc, #56]	@ (800c5cc <_svfiprintf_r+0x1f0>)
 800c594:	a904      	add	r1, sp, #16
 800c596:	4638      	mov	r0, r7
 800c598:	f7fc fd90 	bl	80090bc <_printf_float>
 800c59c:	1c42      	adds	r2, r0, #1
 800c59e:	4606      	mov	r6, r0
 800c5a0:	d1d6      	bne.n	800c550 <_svfiprintf_r+0x174>
 800c5a2:	89ab      	ldrh	r3, [r5, #12]
 800c5a4:	065b      	lsls	r3, r3, #25
 800c5a6:	f53f af2d 	bmi.w	800c404 <_svfiprintf_r+0x28>
 800c5aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c5ac:	e72c      	b.n	800c408 <_svfiprintf_r+0x2c>
 800c5ae:	ab03      	add	r3, sp, #12
 800c5b0:	9300      	str	r3, [sp, #0]
 800c5b2:	462a      	mov	r2, r5
 800c5b4:	4b05      	ldr	r3, [pc, #20]	@ (800c5cc <_svfiprintf_r+0x1f0>)
 800c5b6:	a904      	add	r1, sp, #16
 800c5b8:	4638      	mov	r0, r7
 800c5ba:	f7fd f817 	bl	80095ec <_printf_i>
 800c5be:	e7ed      	b.n	800c59c <_svfiprintf_r+0x1c0>
 800c5c0:	0800d139 	.word	0x0800d139
 800c5c4:	0800d143 	.word	0x0800d143
 800c5c8:	080090bd 	.word	0x080090bd
 800c5cc:	0800c327 	.word	0x0800c327
 800c5d0:	0800d13f 	.word	0x0800d13f

0800c5d4 <__sfputc_r>:
 800c5d4:	6893      	ldr	r3, [r2, #8]
 800c5d6:	3b01      	subs	r3, #1
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	b410      	push	{r4}
 800c5dc:	6093      	str	r3, [r2, #8]
 800c5de:	da08      	bge.n	800c5f2 <__sfputc_r+0x1e>
 800c5e0:	6994      	ldr	r4, [r2, #24]
 800c5e2:	42a3      	cmp	r3, r4
 800c5e4:	db01      	blt.n	800c5ea <__sfputc_r+0x16>
 800c5e6:	290a      	cmp	r1, #10
 800c5e8:	d103      	bne.n	800c5f2 <__sfputc_r+0x1e>
 800c5ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c5ee:	f7fd bd82 	b.w	800a0f6 <__swbuf_r>
 800c5f2:	6813      	ldr	r3, [r2, #0]
 800c5f4:	1c58      	adds	r0, r3, #1
 800c5f6:	6010      	str	r0, [r2, #0]
 800c5f8:	7019      	strb	r1, [r3, #0]
 800c5fa:	4608      	mov	r0, r1
 800c5fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c600:	4770      	bx	lr

0800c602 <__sfputs_r>:
 800c602:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c604:	4606      	mov	r6, r0
 800c606:	460f      	mov	r7, r1
 800c608:	4614      	mov	r4, r2
 800c60a:	18d5      	adds	r5, r2, r3
 800c60c:	42ac      	cmp	r4, r5
 800c60e:	d101      	bne.n	800c614 <__sfputs_r+0x12>
 800c610:	2000      	movs	r0, #0
 800c612:	e007      	b.n	800c624 <__sfputs_r+0x22>
 800c614:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c618:	463a      	mov	r2, r7
 800c61a:	4630      	mov	r0, r6
 800c61c:	f7ff ffda 	bl	800c5d4 <__sfputc_r>
 800c620:	1c43      	adds	r3, r0, #1
 800c622:	d1f3      	bne.n	800c60c <__sfputs_r+0xa>
 800c624:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c628 <_vfiprintf_r>:
 800c628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c62c:	460d      	mov	r5, r1
 800c62e:	b09d      	sub	sp, #116	@ 0x74
 800c630:	4614      	mov	r4, r2
 800c632:	4698      	mov	r8, r3
 800c634:	4606      	mov	r6, r0
 800c636:	b118      	cbz	r0, 800c640 <_vfiprintf_r+0x18>
 800c638:	6a03      	ldr	r3, [r0, #32]
 800c63a:	b90b      	cbnz	r3, 800c640 <_vfiprintf_r+0x18>
 800c63c:	f7fd fb96 	bl	8009d6c <__sinit>
 800c640:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c642:	07d9      	lsls	r1, r3, #31
 800c644:	d405      	bmi.n	800c652 <_vfiprintf_r+0x2a>
 800c646:	89ab      	ldrh	r3, [r5, #12]
 800c648:	059a      	lsls	r2, r3, #22
 800c64a:	d402      	bmi.n	800c652 <_vfiprintf_r+0x2a>
 800c64c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c64e:	f7fd fe76 	bl	800a33e <__retarget_lock_acquire_recursive>
 800c652:	89ab      	ldrh	r3, [r5, #12]
 800c654:	071b      	lsls	r3, r3, #28
 800c656:	d501      	bpl.n	800c65c <_vfiprintf_r+0x34>
 800c658:	692b      	ldr	r3, [r5, #16]
 800c65a:	b99b      	cbnz	r3, 800c684 <_vfiprintf_r+0x5c>
 800c65c:	4629      	mov	r1, r5
 800c65e:	4630      	mov	r0, r6
 800c660:	f7fd fd88 	bl	800a174 <__swsetup_r>
 800c664:	b170      	cbz	r0, 800c684 <_vfiprintf_r+0x5c>
 800c666:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c668:	07dc      	lsls	r4, r3, #31
 800c66a:	d504      	bpl.n	800c676 <_vfiprintf_r+0x4e>
 800c66c:	f04f 30ff 	mov.w	r0, #4294967295
 800c670:	b01d      	add	sp, #116	@ 0x74
 800c672:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c676:	89ab      	ldrh	r3, [r5, #12]
 800c678:	0598      	lsls	r0, r3, #22
 800c67a:	d4f7      	bmi.n	800c66c <_vfiprintf_r+0x44>
 800c67c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c67e:	f7fd fe5f 	bl	800a340 <__retarget_lock_release_recursive>
 800c682:	e7f3      	b.n	800c66c <_vfiprintf_r+0x44>
 800c684:	2300      	movs	r3, #0
 800c686:	9309      	str	r3, [sp, #36]	@ 0x24
 800c688:	2320      	movs	r3, #32
 800c68a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c68e:	f8cd 800c 	str.w	r8, [sp, #12]
 800c692:	2330      	movs	r3, #48	@ 0x30
 800c694:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c844 <_vfiprintf_r+0x21c>
 800c698:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c69c:	f04f 0901 	mov.w	r9, #1
 800c6a0:	4623      	mov	r3, r4
 800c6a2:	469a      	mov	sl, r3
 800c6a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c6a8:	b10a      	cbz	r2, 800c6ae <_vfiprintf_r+0x86>
 800c6aa:	2a25      	cmp	r2, #37	@ 0x25
 800c6ac:	d1f9      	bne.n	800c6a2 <_vfiprintf_r+0x7a>
 800c6ae:	ebba 0b04 	subs.w	fp, sl, r4
 800c6b2:	d00b      	beq.n	800c6cc <_vfiprintf_r+0xa4>
 800c6b4:	465b      	mov	r3, fp
 800c6b6:	4622      	mov	r2, r4
 800c6b8:	4629      	mov	r1, r5
 800c6ba:	4630      	mov	r0, r6
 800c6bc:	f7ff ffa1 	bl	800c602 <__sfputs_r>
 800c6c0:	3001      	adds	r0, #1
 800c6c2:	f000 80a7 	beq.w	800c814 <_vfiprintf_r+0x1ec>
 800c6c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c6c8:	445a      	add	r2, fp
 800c6ca:	9209      	str	r2, [sp, #36]	@ 0x24
 800c6cc:	f89a 3000 	ldrb.w	r3, [sl]
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	f000 809f 	beq.w	800c814 <_vfiprintf_r+0x1ec>
 800c6d6:	2300      	movs	r3, #0
 800c6d8:	f04f 32ff 	mov.w	r2, #4294967295
 800c6dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c6e0:	f10a 0a01 	add.w	sl, sl, #1
 800c6e4:	9304      	str	r3, [sp, #16]
 800c6e6:	9307      	str	r3, [sp, #28]
 800c6e8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c6ec:	931a      	str	r3, [sp, #104]	@ 0x68
 800c6ee:	4654      	mov	r4, sl
 800c6f0:	2205      	movs	r2, #5
 800c6f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c6f6:	4853      	ldr	r0, [pc, #332]	@ (800c844 <_vfiprintf_r+0x21c>)
 800c6f8:	f7f3 fd92 	bl	8000220 <memchr>
 800c6fc:	9a04      	ldr	r2, [sp, #16]
 800c6fe:	b9d8      	cbnz	r0, 800c738 <_vfiprintf_r+0x110>
 800c700:	06d1      	lsls	r1, r2, #27
 800c702:	bf44      	itt	mi
 800c704:	2320      	movmi	r3, #32
 800c706:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c70a:	0713      	lsls	r3, r2, #28
 800c70c:	bf44      	itt	mi
 800c70e:	232b      	movmi	r3, #43	@ 0x2b
 800c710:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c714:	f89a 3000 	ldrb.w	r3, [sl]
 800c718:	2b2a      	cmp	r3, #42	@ 0x2a
 800c71a:	d015      	beq.n	800c748 <_vfiprintf_r+0x120>
 800c71c:	9a07      	ldr	r2, [sp, #28]
 800c71e:	4654      	mov	r4, sl
 800c720:	2000      	movs	r0, #0
 800c722:	f04f 0c0a 	mov.w	ip, #10
 800c726:	4621      	mov	r1, r4
 800c728:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c72c:	3b30      	subs	r3, #48	@ 0x30
 800c72e:	2b09      	cmp	r3, #9
 800c730:	d94b      	bls.n	800c7ca <_vfiprintf_r+0x1a2>
 800c732:	b1b0      	cbz	r0, 800c762 <_vfiprintf_r+0x13a>
 800c734:	9207      	str	r2, [sp, #28]
 800c736:	e014      	b.n	800c762 <_vfiprintf_r+0x13a>
 800c738:	eba0 0308 	sub.w	r3, r0, r8
 800c73c:	fa09 f303 	lsl.w	r3, r9, r3
 800c740:	4313      	orrs	r3, r2
 800c742:	9304      	str	r3, [sp, #16]
 800c744:	46a2      	mov	sl, r4
 800c746:	e7d2      	b.n	800c6ee <_vfiprintf_r+0xc6>
 800c748:	9b03      	ldr	r3, [sp, #12]
 800c74a:	1d19      	adds	r1, r3, #4
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	9103      	str	r1, [sp, #12]
 800c750:	2b00      	cmp	r3, #0
 800c752:	bfbb      	ittet	lt
 800c754:	425b      	neglt	r3, r3
 800c756:	f042 0202 	orrlt.w	r2, r2, #2
 800c75a:	9307      	strge	r3, [sp, #28]
 800c75c:	9307      	strlt	r3, [sp, #28]
 800c75e:	bfb8      	it	lt
 800c760:	9204      	strlt	r2, [sp, #16]
 800c762:	7823      	ldrb	r3, [r4, #0]
 800c764:	2b2e      	cmp	r3, #46	@ 0x2e
 800c766:	d10a      	bne.n	800c77e <_vfiprintf_r+0x156>
 800c768:	7863      	ldrb	r3, [r4, #1]
 800c76a:	2b2a      	cmp	r3, #42	@ 0x2a
 800c76c:	d132      	bne.n	800c7d4 <_vfiprintf_r+0x1ac>
 800c76e:	9b03      	ldr	r3, [sp, #12]
 800c770:	1d1a      	adds	r2, r3, #4
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	9203      	str	r2, [sp, #12]
 800c776:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c77a:	3402      	adds	r4, #2
 800c77c:	9305      	str	r3, [sp, #20]
 800c77e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c854 <_vfiprintf_r+0x22c>
 800c782:	7821      	ldrb	r1, [r4, #0]
 800c784:	2203      	movs	r2, #3
 800c786:	4650      	mov	r0, sl
 800c788:	f7f3 fd4a 	bl	8000220 <memchr>
 800c78c:	b138      	cbz	r0, 800c79e <_vfiprintf_r+0x176>
 800c78e:	9b04      	ldr	r3, [sp, #16]
 800c790:	eba0 000a 	sub.w	r0, r0, sl
 800c794:	2240      	movs	r2, #64	@ 0x40
 800c796:	4082      	lsls	r2, r0
 800c798:	4313      	orrs	r3, r2
 800c79a:	3401      	adds	r4, #1
 800c79c:	9304      	str	r3, [sp, #16]
 800c79e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c7a2:	4829      	ldr	r0, [pc, #164]	@ (800c848 <_vfiprintf_r+0x220>)
 800c7a4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c7a8:	2206      	movs	r2, #6
 800c7aa:	f7f3 fd39 	bl	8000220 <memchr>
 800c7ae:	2800      	cmp	r0, #0
 800c7b0:	d03f      	beq.n	800c832 <_vfiprintf_r+0x20a>
 800c7b2:	4b26      	ldr	r3, [pc, #152]	@ (800c84c <_vfiprintf_r+0x224>)
 800c7b4:	bb1b      	cbnz	r3, 800c7fe <_vfiprintf_r+0x1d6>
 800c7b6:	9b03      	ldr	r3, [sp, #12]
 800c7b8:	3307      	adds	r3, #7
 800c7ba:	f023 0307 	bic.w	r3, r3, #7
 800c7be:	3308      	adds	r3, #8
 800c7c0:	9303      	str	r3, [sp, #12]
 800c7c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c7c4:	443b      	add	r3, r7
 800c7c6:	9309      	str	r3, [sp, #36]	@ 0x24
 800c7c8:	e76a      	b.n	800c6a0 <_vfiprintf_r+0x78>
 800c7ca:	fb0c 3202 	mla	r2, ip, r2, r3
 800c7ce:	460c      	mov	r4, r1
 800c7d0:	2001      	movs	r0, #1
 800c7d2:	e7a8      	b.n	800c726 <_vfiprintf_r+0xfe>
 800c7d4:	2300      	movs	r3, #0
 800c7d6:	3401      	adds	r4, #1
 800c7d8:	9305      	str	r3, [sp, #20]
 800c7da:	4619      	mov	r1, r3
 800c7dc:	f04f 0c0a 	mov.w	ip, #10
 800c7e0:	4620      	mov	r0, r4
 800c7e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c7e6:	3a30      	subs	r2, #48	@ 0x30
 800c7e8:	2a09      	cmp	r2, #9
 800c7ea:	d903      	bls.n	800c7f4 <_vfiprintf_r+0x1cc>
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d0c6      	beq.n	800c77e <_vfiprintf_r+0x156>
 800c7f0:	9105      	str	r1, [sp, #20]
 800c7f2:	e7c4      	b.n	800c77e <_vfiprintf_r+0x156>
 800c7f4:	fb0c 2101 	mla	r1, ip, r1, r2
 800c7f8:	4604      	mov	r4, r0
 800c7fa:	2301      	movs	r3, #1
 800c7fc:	e7f0      	b.n	800c7e0 <_vfiprintf_r+0x1b8>
 800c7fe:	ab03      	add	r3, sp, #12
 800c800:	9300      	str	r3, [sp, #0]
 800c802:	462a      	mov	r2, r5
 800c804:	4b12      	ldr	r3, [pc, #72]	@ (800c850 <_vfiprintf_r+0x228>)
 800c806:	a904      	add	r1, sp, #16
 800c808:	4630      	mov	r0, r6
 800c80a:	f7fc fc57 	bl	80090bc <_printf_float>
 800c80e:	4607      	mov	r7, r0
 800c810:	1c78      	adds	r0, r7, #1
 800c812:	d1d6      	bne.n	800c7c2 <_vfiprintf_r+0x19a>
 800c814:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c816:	07d9      	lsls	r1, r3, #31
 800c818:	d405      	bmi.n	800c826 <_vfiprintf_r+0x1fe>
 800c81a:	89ab      	ldrh	r3, [r5, #12]
 800c81c:	059a      	lsls	r2, r3, #22
 800c81e:	d402      	bmi.n	800c826 <_vfiprintf_r+0x1fe>
 800c820:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c822:	f7fd fd8d 	bl	800a340 <__retarget_lock_release_recursive>
 800c826:	89ab      	ldrh	r3, [r5, #12]
 800c828:	065b      	lsls	r3, r3, #25
 800c82a:	f53f af1f 	bmi.w	800c66c <_vfiprintf_r+0x44>
 800c82e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c830:	e71e      	b.n	800c670 <_vfiprintf_r+0x48>
 800c832:	ab03      	add	r3, sp, #12
 800c834:	9300      	str	r3, [sp, #0]
 800c836:	462a      	mov	r2, r5
 800c838:	4b05      	ldr	r3, [pc, #20]	@ (800c850 <_vfiprintf_r+0x228>)
 800c83a:	a904      	add	r1, sp, #16
 800c83c:	4630      	mov	r0, r6
 800c83e:	f7fc fed5 	bl	80095ec <_printf_i>
 800c842:	e7e4      	b.n	800c80e <_vfiprintf_r+0x1e6>
 800c844:	0800d139 	.word	0x0800d139
 800c848:	0800d143 	.word	0x0800d143
 800c84c:	080090bd 	.word	0x080090bd
 800c850:	0800c603 	.word	0x0800c603
 800c854:	0800d13f 	.word	0x0800d13f

0800c858 <__sflush_r>:
 800c858:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c85c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c860:	0716      	lsls	r6, r2, #28
 800c862:	4605      	mov	r5, r0
 800c864:	460c      	mov	r4, r1
 800c866:	d454      	bmi.n	800c912 <__sflush_r+0xba>
 800c868:	684b      	ldr	r3, [r1, #4]
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	dc02      	bgt.n	800c874 <__sflush_r+0x1c>
 800c86e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c870:	2b00      	cmp	r3, #0
 800c872:	dd48      	ble.n	800c906 <__sflush_r+0xae>
 800c874:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c876:	2e00      	cmp	r6, #0
 800c878:	d045      	beq.n	800c906 <__sflush_r+0xae>
 800c87a:	2300      	movs	r3, #0
 800c87c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c880:	682f      	ldr	r7, [r5, #0]
 800c882:	6a21      	ldr	r1, [r4, #32]
 800c884:	602b      	str	r3, [r5, #0]
 800c886:	d030      	beq.n	800c8ea <__sflush_r+0x92>
 800c888:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c88a:	89a3      	ldrh	r3, [r4, #12]
 800c88c:	0759      	lsls	r1, r3, #29
 800c88e:	d505      	bpl.n	800c89c <__sflush_r+0x44>
 800c890:	6863      	ldr	r3, [r4, #4]
 800c892:	1ad2      	subs	r2, r2, r3
 800c894:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c896:	b10b      	cbz	r3, 800c89c <__sflush_r+0x44>
 800c898:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c89a:	1ad2      	subs	r2, r2, r3
 800c89c:	2300      	movs	r3, #0
 800c89e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c8a0:	6a21      	ldr	r1, [r4, #32]
 800c8a2:	4628      	mov	r0, r5
 800c8a4:	47b0      	blx	r6
 800c8a6:	1c43      	adds	r3, r0, #1
 800c8a8:	89a3      	ldrh	r3, [r4, #12]
 800c8aa:	d106      	bne.n	800c8ba <__sflush_r+0x62>
 800c8ac:	6829      	ldr	r1, [r5, #0]
 800c8ae:	291d      	cmp	r1, #29
 800c8b0:	d82b      	bhi.n	800c90a <__sflush_r+0xb2>
 800c8b2:	4a2a      	ldr	r2, [pc, #168]	@ (800c95c <__sflush_r+0x104>)
 800c8b4:	410a      	asrs	r2, r1
 800c8b6:	07d6      	lsls	r6, r2, #31
 800c8b8:	d427      	bmi.n	800c90a <__sflush_r+0xb2>
 800c8ba:	2200      	movs	r2, #0
 800c8bc:	6062      	str	r2, [r4, #4]
 800c8be:	04d9      	lsls	r1, r3, #19
 800c8c0:	6922      	ldr	r2, [r4, #16]
 800c8c2:	6022      	str	r2, [r4, #0]
 800c8c4:	d504      	bpl.n	800c8d0 <__sflush_r+0x78>
 800c8c6:	1c42      	adds	r2, r0, #1
 800c8c8:	d101      	bne.n	800c8ce <__sflush_r+0x76>
 800c8ca:	682b      	ldr	r3, [r5, #0]
 800c8cc:	b903      	cbnz	r3, 800c8d0 <__sflush_r+0x78>
 800c8ce:	6560      	str	r0, [r4, #84]	@ 0x54
 800c8d0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c8d2:	602f      	str	r7, [r5, #0]
 800c8d4:	b1b9      	cbz	r1, 800c906 <__sflush_r+0xae>
 800c8d6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c8da:	4299      	cmp	r1, r3
 800c8dc:	d002      	beq.n	800c8e4 <__sflush_r+0x8c>
 800c8de:	4628      	mov	r0, r5
 800c8e0:	f7fe fb9a 	bl	800b018 <_free_r>
 800c8e4:	2300      	movs	r3, #0
 800c8e6:	6363      	str	r3, [r4, #52]	@ 0x34
 800c8e8:	e00d      	b.n	800c906 <__sflush_r+0xae>
 800c8ea:	2301      	movs	r3, #1
 800c8ec:	4628      	mov	r0, r5
 800c8ee:	47b0      	blx	r6
 800c8f0:	4602      	mov	r2, r0
 800c8f2:	1c50      	adds	r0, r2, #1
 800c8f4:	d1c9      	bne.n	800c88a <__sflush_r+0x32>
 800c8f6:	682b      	ldr	r3, [r5, #0]
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d0c6      	beq.n	800c88a <__sflush_r+0x32>
 800c8fc:	2b1d      	cmp	r3, #29
 800c8fe:	d001      	beq.n	800c904 <__sflush_r+0xac>
 800c900:	2b16      	cmp	r3, #22
 800c902:	d11e      	bne.n	800c942 <__sflush_r+0xea>
 800c904:	602f      	str	r7, [r5, #0]
 800c906:	2000      	movs	r0, #0
 800c908:	e022      	b.n	800c950 <__sflush_r+0xf8>
 800c90a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c90e:	b21b      	sxth	r3, r3
 800c910:	e01b      	b.n	800c94a <__sflush_r+0xf2>
 800c912:	690f      	ldr	r7, [r1, #16]
 800c914:	2f00      	cmp	r7, #0
 800c916:	d0f6      	beq.n	800c906 <__sflush_r+0xae>
 800c918:	0793      	lsls	r3, r2, #30
 800c91a:	680e      	ldr	r6, [r1, #0]
 800c91c:	bf08      	it	eq
 800c91e:	694b      	ldreq	r3, [r1, #20]
 800c920:	600f      	str	r7, [r1, #0]
 800c922:	bf18      	it	ne
 800c924:	2300      	movne	r3, #0
 800c926:	eba6 0807 	sub.w	r8, r6, r7
 800c92a:	608b      	str	r3, [r1, #8]
 800c92c:	f1b8 0f00 	cmp.w	r8, #0
 800c930:	dde9      	ble.n	800c906 <__sflush_r+0xae>
 800c932:	6a21      	ldr	r1, [r4, #32]
 800c934:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c936:	4643      	mov	r3, r8
 800c938:	463a      	mov	r2, r7
 800c93a:	4628      	mov	r0, r5
 800c93c:	47b0      	blx	r6
 800c93e:	2800      	cmp	r0, #0
 800c940:	dc08      	bgt.n	800c954 <__sflush_r+0xfc>
 800c942:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c946:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c94a:	81a3      	strh	r3, [r4, #12]
 800c94c:	f04f 30ff 	mov.w	r0, #4294967295
 800c950:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c954:	4407      	add	r7, r0
 800c956:	eba8 0800 	sub.w	r8, r8, r0
 800c95a:	e7e7      	b.n	800c92c <__sflush_r+0xd4>
 800c95c:	dfbffffe 	.word	0xdfbffffe

0800c960 <_fflush_r>:
 800c960:	b538      	push	{r3, r4, r5, lr}
 800c962:	690b      	ldr	r3, [r1, #16]
 800c964:	4605      	mov	r5, r0
 800c966:	460c      	mov	r4, r1
 800c968:	b913      	cbnz	r3, 800c970 <_fflush_r+0x10>
 800c96a:	2500      	movs	r5, #0
 800c96c:	4628      	mov	r0, r5
 800c96e:	bd38      	pop	{r3, r4, r5, pc}
 800c970:	b118      	cbz	r0, 800c97a <_fflush_r+0x1a>
 800c972:	6a03      	ldr	r3, [r0, #32]
 800c974:	b90b      	cbnz	r3, 800c97a <_fflush_r+0x1a>
 800c976:	f7fd f9f9 	bl	8009d6c <__sinit>
 800c97a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d0f3      	beq.n	800c96a <_fflush_r+0xa>
 800c982:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c984:	07d0      	lsls	r0, r2, #31
 800c986:	d404      	bmi.n	800c992 <_fflush_r+0x32>
 800c988:	0599      	lsls	r1, r3, #22
 800c98a:	d402      	bmi.n	800c992 <_fflush_r+0x32>
 800c98c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c98e:	f7fd fcd6 	bl	800a33e <__retarget_lock_acquire_recursive>
 800c992:	4628      	mov	r0, r5
 800c994:	4621      	mov	r1, r4
 800c996:	f7ff ff5f 	bl	800c858 <__sflush_r>
 800c99a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c99c:	07da      	lsls	r2, r3, #31
 800c99e:	4605      	mov	r5, r0
 800c9a0:	d4e4      	bmi.n	800c96c <_fflush_r+0xc>
 800c9a2:	89a3      	ldrh	r3, [r4, #12]
 800c9a4:	059b      	lsls	r3, r3, #22
 800c9a6:	d4e1      	bmi.n	800c96c <_fflush_r+0xc>
 800c9a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c9aa:	f7fd fcc9 	bl	800a340 <__retarget_lock_release_recursive>
 800c9ae:	e7dd      	b.n	800c96c <_fflush_r+0xc>

0800c9b0 <__swhatbuf_r>:
 800c9b0:	b570      	push	{r4, r5, r6, lr}
 800c9b2:	460c      	mov	r4, r1
 800c9b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c9b8:	2900      	cmp	r1, #0
 800c9ba:	b096      	sub	sp, #88	@ 0x58
 800c9bc:	4615      	mov	r5, r2
 800c9be:	461e      	mov	r6, r3
 800c9c0:	da0d      	bge.n	800c9de <__swhatbuf_r+0x2e>
 800c9c2:	89a3      	ldrh	r3, [r4, #12]
 800c9c4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c9c8:	f04f 0100 	mov.w	r1, #0
 800c9cc:	bf14      	ite	ne
 800c9ce:	2340      	movne	r3, #64	@ 0x40
 800c9d0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c9d4:	2000      	movs	r0, #0
 800c9d6:	6031      	str	r1, [r6, #0]
 800c9d8:	602b      	str	r3, [r5, #0]
 800c9da:	b016      	add	sp, #88	@ 0x58
 800c9dc:	bd70      	pop	{r4, r5, r6, pc}
 800c9de:	466a      	mov	r2, sp
 800c9e0:	f000 f862 	bl	800caa8 <_fstat_r>
 800c9e4:	2800      	cmp	r0, #0
 800c9e6:	dbec      	blt.n	800c9c2 <__swhatbuf_r+0x12>
 800c9e8:	9901      	ldr	r1, [sp, #4]
 800c9ea:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c9ee:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c9f2:	4259      	negs	r1, r3
 800c9f4:	4159      	adcs	r1, r3
 800c9f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c9fa:	e7eb      	b.n	800c9d4 <__swhatbuf_r+0x24>

0800c9fc <__smakebuf_r>:
 800c9fc:	898b      	ldrh	r3, [r1, #12]
 800c9fe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ca00:	079d      	lsls	r5, r3, #30
 800ca02:	4606      	mov	r6, r0
 800ca04:	460c      	mov	r4, r1
 800ca06:	d507      	bpl.n	800ca18 <__smakebuf_r+0x1c>
 800ca08:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ca0c:	6023      	str	r3, [r4, #0]
 800ca0e:	6123      	str	r3, [r4, #16]
 800ca10:	2301      	movs	r3, #1
 800ca12:	6163      	str	r3, [r4, #20]
 800ca14:	b003      	add	sp, #12
 800ca16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ca18:	ab01      	add	r3, sp, #4
 800ca1a:	466a      	mov	r2, sp
 800ca1c:	f7ff ffc8 	bl	800c9b0 <__swhatbuf_r>
 800ca20:	9f00      	ldr	r7, [sp, #0]
 800ca22:	4605      	mov	r5, r0
 800ca24:	4639      	mov	r1, r7
 800ca26:	4630      	mov	r0, r6
 800ca28:	f7fe fea4 	bl	800b774 <_malloc_r>
 800ca2c:	b948      	cbnz	r0, 800ca42 <__smakebuf_r+0x46>
 800ca2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ca32:	059a      	lsls	r2, r3, #22
 800ca34:	d4ee      	bmi.n	800ca14 <__smakebuf_r+0x18>
 800ca36:	f023 0303 	bic.w	r3, r3, #3
 800ca3a:	f043 0302 	orr.w	r3, r3, #2
 800ca3e:	81a3      	strh	r3, [r4, #12]
 800ca40:	e7e2      	b.n	800ca08 <__smakebuf_r+0xc>
 800ca42:	89a3      	ldrh	r3, [r4, #12]
 800ca44:	6020      	str	r0, [r4, #0]
 800ca46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ca4a:	81a3      	strh	r3, [r4, #12]
 800ca4c:	9b01      	ldr	r3, [sp, #4]
 800ca4e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ca52:	b15b      	cbz	r3, 800ca6c <__smakebuf_r+0x70>
 800ca54:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ca58:	4630      	mov	r0, r6
 800ca5a:	f000 f837 	bl	800cacc <_isatty_r>
 800ca5e:	b128      	cbz	r0, 800ca6c <__smakebuf_r+0x70>
 800ca60:	89a3      	ldrh	r3, [r4, #12]
 800ca62:	f023 0303 	bic.w	r3, r3, #3
 800ca66:	f043 0301 	orr.w	r3, r3, #1
 800ca6a:	81a3      	strh	r3, [r4, #12]
 800ca6c:	89a3      	ldrh	r3, [r4, #12]
 800ca6e:	431d      	orrs	r5, r3
 800ca70:	81a5      	strh	r5, [r4, #12]
 800ca72:	e7cf      	b.n	800ca14 <__smakebuf_r+0x18>

0800ca74 <memmove>:
 800ca74:	4288      	cmp	r0, r1
 800ca76:	b510      	push	{r4, lr}
 800ca78:	eb01 0402 	add.w	r4, r1, r2
 800ca7c:	d902      	bls.n	800ca84 <memmove+0x10>
 800ca7e:	4284      	cmp	r4, r0
 800ca80:	4623      	mov	r3, r4
 800ca82:	d807      	bhi.n	800ca94 <memmove+0x20>
 800ca84:	1e43      	subs	r3, r0, #1
 800ca86:	42a1      	cmp	r1, r4
 800ca88:	d008      	beq.n	800ca9c <memmove+0x28>
 800ca8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ca8e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ca92:	e7f8      	b.n	800ca86 <memmove+0x12>
 800ca94:	4402      	add	r2, r0
 800ca96:	4601      	mov	r1, r0
 800ca98:	428a      	cmp	r2, r1
 800ca9a:	d100      	bne.n	800ca9e <memmove+0x2a>
 800ca9c:	bd10      	pop	{r4, pc}
 800ca9e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800caa2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800caa6:	e7f7      	b.n	800ca98 <memmove+0x24>

0800caa8 <_fstat_r>:
 800caa8:	b538      	push	{r3, r4, r5, lr}
 800caaa:	4d07      	ldr	r5, [pc, #28]	@ (800cac8 <_fstat_r+0x20>)
 800caac:	2300      	movs	r3, #0
 800caae:	4604      	mov	r4, r0
 800cab0:	4608      	mov	r0, r1
 800cab2:	4611      	mov	r1, r2
 800cab4:	602b      	str	r3, [r5, #0]
 800cab6:	f7f5 fc0b 	bl	80022d0 <_fstat>
 800caba:	1c43      	adds	r3, r0, #1
 800cabc:	d102      	bne.n	800cac4 <_fstat_r+0x1c>
 800cabe:	682b      	ldr	r3, [r5, #0]
 800cac0:	b103      	cbz	r3, 800cac4 <_fstat_r+0x1c>
 800cac2:	6023      	str	r3, [r4, #0]
 800cac4:	bd38      	pop	{r3, r4, r5, pc}
 800cac6:	bf00      	nop
 800cac8:	200006a4 	.word	0x200006a4

0800cacc <_isatty_r>:
 800cacc:	b538      	push	{r3, r4, r5, lr}
 800cace:	4d06      	ldr	r5, [pc, #24]	@ (800cae8 <_isatty_r+0x1c>)
 800cad0:	2300      	movs	r3, #0
 800cad2:	4604      	mov	r4, r0
 800cad4:	4608      	mov	r0, r1
 800cad6:	602b      	str	r3, [r5, #0]
 800cad8:	f7f5 fc0a 	bl	80022f0 <_isatty>
 800cadc:	1c43      	adds	r3, r0, #1
 800cade:	d102      	bne.n	800cae6 <_isatty_r+0x1a>
 800cae0:	682b      	ldr	r3, [r5, #0]
 800cae2:	b103      	cbz	r3, 800cae6 <_isatty_r+0x1a>
 800cae4:	6023      	str	r3, [r4, #0]
 800cae6:	bd38      	pop	{r3, r4, r5, pc}
 800cae8:	200006a4 	.word	0x200006a4

0800caec <_sbrk_r>:
 800caec:	b538      	push	{r3, r4, r5, lr}
 800caee:	4d06      	ldr	r5, [pc, #24]	@ (800cb08 <_sbrk_r+0x1c>)
 800caf0:	2300      	movs	r3, #0
 800caf2:	4604      	mov	r4, r0
 800caf4:	4608      	mov	r0, r1
 800caf6:	602b      	str	r3, [r5, #0]
 800caf8:	f7f5 fc12 	bl	8002320 <_sbrk>
 800cafc:	1c43      	adds	r3, r0, #1
 800cafe:	d102      	bne.n	800cb06 <_sbrk_r+0x1a>
 800cb00:	682b      	ldr	r3, [r5, #0]
 800cb02:	b103      	cbz	r3, 800cb06 <_sbrk_r+0x1a>
 800cb04:	6023      	str	r3, [r4, #0]
 800cb06:	bd38      	pop	{r3, r4, r5, pc}
 800cb08:	200006a4 	.word	0x200006a4

0800cb0c <__assert_func>:
 800cb0c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cb0e:	4614      	mov	r4, r2
 800cb10:	461a      	mov	r2, r3
 800cb12:	4b09      	ldr	r3, [pc, #36]	@ (800cb38 <__assert_func+0x2c>)
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	4605      	mov	r5, r0
 800cb18:	68d8      	ldr	r0, [r3, #12]
 800cb1a:	b954      	cbnz	r4, 800cb32 <__assert_func+0x26>
 800cb1c:	4b07      	ldr	r3, [pc, #28]	@ (800cb3c <__assert_func+0x30>)
 800cb1e:	461c      	mov	r4, r3
 800cb20:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cb24:	9100      	str	r1, [sp, #0]
 800cb26:	462b      	mov	r3, r5
 800cb28:	4905      	ldr	r1, [pc, #20]	@ (800cb40 <__assert_func+0x34>)
 800cb2a:	f000 f84f 	bl	800cbcc <fiprintf>
 800cb2e:	f000 f85f 	bl	800cbf0 <abort>
 800cb32:	4b04      	ldr	r3, [pc, #16]	@ (800cb44 <__assert_func+0x38>)
 800cb34:	e7f4      	b.n	800cb20 <__assert_func+0x14>
 800cb36:	bf00      	nop
 800cb38:	20000194 	.word	0x20000194
 800cb3c:	0800d185 	.word	0x0800d185
 800cb40:	0800d157 	.word	0x0800d157
 800cb44:	0800d14a 	.word	0x0800d14a

0800cb48 <_calloc_r>:
 800cb48:	b570      	push	{r4, r5, r6, lr}
 800cb4a:	fba1 5402 	umull	r5, r4, r1, r2
 800cb4e:	b93c      	cbnz	r4, 800cb60 <_calloc_r+0x18>
 800cb50:	4629      	mov	r1, r5
 800cb52:	f7fe fe0f 	bl	800b774 <_malloc_r>
 800cb56:	4606      	mov	r6, r0
 800cb58:	b928      	cbnz	r0, 800cb66 <_calloc_r+0x1e>
 800cb5a:	2600      	movs	r6, #0
 800cb5c:	4630      	mov	r0, r6
 800cb5e:	bd70      	pop	{r4, r5, r6, pc}
 800cb60:	220c      	movs	r2, #12
 800cb62:	6002      	str	r2, [r0, #0]
 800cb64:	e7f9      	b.n	800cb5a <_calloc_r+0x12>
 800cb66:	462a      	mov	r2, r5
 800cb68:	4621      	mov	r1, r4
 800cb6a:	f7fd fb59 	bl	800a220 <memset>
 800cb6e:	e7f5      	b.n	800cb5c <_calloc_r+0x14>

0800cb70 <_realloc_r>:
 800cb70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb74:	4680      	mov	r8, r0
 800cb76:	4615      	mov	r5, r2
 800cb78:	460c      	mov	r4, r1
 800cb7a:	b921      	cbnz	r1, 800cb86 <_realloc_r+0x16>
 800cb7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cb80:	4611      	mov	r1, r2
 800cb82:	f7fe bdf7 	b.w	800b774 <_malloc_r>
 800cb86:	b92a      	cbnz	r2, 800cb94 <_realloc_r+0x24>
 800cb88:	f7fe fa46 	bl	800b018 <_free_r>
 800cb8c:	2400      	movs	r4, #0
 800cb8e:	4620      	mov	r0, r4
 800cb90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb94:	f000 f833 	bl	800cbfe <_malloc_usable_size_r>
 800cb98:	4285      	cmp	r5, r0
 800cb9a:	4606      	mov	r6, r0
 800cb9c:	d802      	bhi.n	800cba4 <_realloc_r+0x34>
 800cb9e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800cba2:	d8f4      	bhi.n	800cb8e <_realloc_r+0x1e>
 800cba4:	4629      	mov	r1, r5
 800cba6:	4640      	mov	r0, r8
 800cba8:	f7fe fde4 	bl	800b774 <_malloc_r>
 800cbac:	4607      	mov	r7, r0
 800cbae:	2800      	cmp	r0, #0
 800cbb0:	d0ec      	beq.n	800cb8c <_realloc_r+0x1c>
 800cbb2:	42b5      	cmp	r5, r6
 800cbb4:	462a      	mov	r2, r5
 800cbb6:	4621      	mov	r1, r4
 800cbb8:	bf28      	it	cs
 800cbba:	4632      	movcs	r2, r6
 800cbbc:	f7fd fbc1 	bl	800a342 <memcpy>
 800cbc0:	4621      	mov	r1, r4
 800cbc2:	4640      	mov	r0, r8
 800cbc4:	f7fe fa28 	bl	800b018 <_free_r>
 800cbc8:	463c      	mov	r4, r7
 800cbca:	e7e0      	b.n	800cb8e <_realloc_r+0x1e>

0800cbcc <fiprintf>:
 800cbcc:	b40e      	push	{r1, r2, r3}
 800cbce:	b503      	push	{r0, r1, lr}
 800cbd0:	4601      	mov	r1, r0
 800cbd2:	ab03      	add	r3, sp, #12
 800cbd4:	4805      	ldr	r0, [pc, #20]	@ (800cbec <fiprintf+0x20>)
 800cbd6:	f853 2b04 	ldr.w	r2, [r3], #4
 800cbda:	6800      	ldr	r0, [r0, #0]
 800cbdc:	9301      	str	r3, [sp, #4]
 800cbde:	f7ff fd23 	bl	800c628 <_vfiprintf_r>
 800cbe2:	b002      	add	sp, #8
 800cbe4:	f85d eb04 	ldr.w	lr, [sp], #4
 800cbe8:	b003      	add	sp, #12
 800cbea:	4770      	bx	lr
 800cbec:	20000194 	.word	0x20000194

0800cbf0 <abort>:
 800cbf0:	b508      	push	{r3, lr}
 800cbf2:	2006      	movs	r0, #6
 800cbf4:	f000 f834 	bl	800cc60 <raise>
 800cbf8:	2001      	movs	r0, #1
 800cbfa:	f7f5 fb35 	bl	8002268 <_exit>

0800cbfe <_malloc_usable_size_r>:
 800cbfe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cc02:	1f18      	subs	r0, r3, #4
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	bfbc      	itt	lt
 800cc08:	580b      	ldrlt	r3, [r1, r0]
 800cc0a:	18c0      	addlt	r0, r0, r3
 800cc0c:	4770      	bx	lr

0800cc0e <_raise_r>:
 800cc0e:	291f      	cmp	r1, #31
 800cc10:	b538      	push	{r3, r4, r5, lr}
 800cc12:	4605      	mov	r5, r0
 800cc14:	460c      	mov	r4, r1
 800cc16:	d904      	bls.n	800cc22 <_raise_r+0x14>
 800cc18:	2316      	movs	r3, #22
 800cc1a:	6003      	str	r3, [r0, #0]
 800cc1c:	f04f 30ff 	mov.w	r0, #4294967295
 800cc20:	bd38      	pop	{r3, r4, r5, pc}
 800cc22:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800cc24:	b112      	cbz	r2, 800cc2c <_raise_r+0x1e>
 800cc26:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cc2a:	b94b      	cbnz	r3, 800cc40 <_raise_r+0x32>
 800cc2c:	4628      	mov	r0, r5
 800cc2e:	f000 f831 	bl	800cc94 <_getpid_r>
 800cc32:	4622      	mov	r2, r4
 800cc34:	4601      	mov	r1, r0
 800cc36:	4628      	mov	r0, r5
 800cc38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cc3c:	f000 b818 	b.w	800cc70 <_kill_r>
 800cc40:	2b01      	cmp	r3, #1
 800cc42:	d00a      	beq.n	800cc5a <_raise_r+0x4c>
 800cc44:	1c59      	adds	r1, r3, #1
 800cc46:	d103      	bne.n	800cc50 <_raise_r+0x42>
 800cc48:	2316      	movs	r3, #22
 800cc4a:	6003      	str	r3, [r0, #0]
 800cc4c:	2001      	movs	r0, #1
 800cc4e:	e7e7      	b.n	800cc20 <_raise_r+0x12>
 800cc50:	2100      	movs	r1, #0
 800cc52:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800cc56:	4620      	mov	r0, r4
 800cc58:	4798      	blx	r3
 800cc5a:	2000      	movs	r0, #0
 800cc5c:	e7e0      	b.n	800cc20 <_raise_r+0x12>
	...

0800cc60 <raise>:
 800cc60:	4b02      	ldr	r3, [pc, #8]	@ (800cc6c <raise+0xc>)
 800cc62:	4601      	mov	r1, r0
 800cc64:	6818      	ldr	r0, [r3, #0]
 800cc66:	f7ff bfd2 	b.w	800cc0e <_raise_r>
 800cc6a:	bf00      	nop
 800cc6c:	20000194 	.word	0x20000194

0800cc70 <_kill_r>:
 800cc70:	b538      	push	{r3, r4, r5, lr}
 800cc72:	4d07      	ldr	r5, [pc, #28]	@ (800cc90 <_kill_r+0x20>)
 800cc74:	2300      	movs	r3, #0
 800cc76:	4604      	mov	r4, r0
 800cc78:	4608      	mov	r0, r1
 800cc7a:	4611      	mov	r1, r2
 800cc7c:	602b      	str	r3, [r5, #0]
 800cc7e:	f7f5 fae3 	bl	8002248 <_kill>
 800cc82:	1c43      	adds	r3, r0, #1
 800cc84:	d102      	bne.n	800cc8c <_kill_r+0x1c>
 800cc86:	682b      	ldr	r3, [r5, #0]
 800cc88:	b103      	cbz	r3, 800cc8c <_kill_r+0x1c>
 800cc8a:	6023      	str	r3, [r4, #0]
 800cc8c:	bd38      	pop	{r3, r4, r5, pc}
 800cc8e:	bf00      	nop
 800cc90:	200006a4 	.word	0x200006a4

0800cc94 <_getpid_r>:
 800cc94:	f7f5 bad0 	b.w	8002238 <_getpid>

0800cc98 <_init>:
 800cc98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc9a:	bf00      	nop
 800cc9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc9e:	bc08      	pop	{r3}
 800cca0:	469e      	mov	lr, r3
 800cca2:	4770      	bx	lr

0800cca4 <_fini>:
 800cca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cca6:	bf00      	nop
 800cca8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ccaa:	bc08      	pop	{r3}
 800ccac:	469e      	mov	lr, r3
 800ccae:	4770      	bx	lr
